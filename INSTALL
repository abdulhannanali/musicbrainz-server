Install instructions for the MusicBrainz Server:
------------------------------------------------

Requirements:
=============

The MusicBrainz server requires the following items:

1) A real SQL server, like postgres. MySQL won't work.
   The scripts use the perl DBI interface to talk to the server. It should
   work with other servers as well, but that has not been tested.

   You need at least version 7.3 of Postgres!

   PostgreSQL notes:

      - Configure the server with: configure --enable-multibyte=UNICODE
        to enable UTF-8 support. THIS IS IMPORTANT!!
      - if you've installed postgres via a package and have "pg_config"
        you can run:
            pg_config --configure
        to see what the source was compiles with to be sure it complies.
        If it doesn't return "--enable-multibyte" at all, you'll have to
        recompile it from source

2) A database dedicated to MusicBrainz.  Of course, the scripts can help you
   create this.

3) Apache with mod_perl and Mason installed. See the following sites for more
   details on each of these packages:

      Apache:   http://www.apache.org
      mod_perl: http://perl.apache.org for details.
      Mason:    http://www.masonhq.com

   NOTE: When configuring Apache, make sure to not include the built-in
         expat, since that will conflict with the SiRPAC RDF parser's use
         of the external expat module. Configure Apache with:

         mod_perl: perl Makefile.PL APACHE_SRC=../apache_1.3.19/src DO_HTTPD=1 USE_APACI=1 PREP_HTTPD=1 EVERYTHING=1
         apache: ./configure --enable-module=rewrite --disable-rule=expat --prefix=/usr/apache --activate-module=src/modules/perl/libperl.a

    Also NOTE: Red Hat is known to ship their Apache packages with the
               built-in expat support enabled, so you will have to build
               Apache from scratch on Red Hat systems.

    WARNING!  Don't compile Apache with mod_perl built as a DSO (Dynamic
              Shared Object).  Mason doesn't get along with a DSO mod_perl
              (though it's not alone). If you do build mod_perl as a DSO,
              Apache can (and probably will) segfault or die silently on
              startup.


4) Expat XML Parser library: http://sourceforge.net/projects/expat

5) Perl 5.8.0

   The MusicBrainz server now uses Perl 5.8.0, required for its Unicode
   capabilities and the "Encode" module.  Strange encoding problems were
   observed with Perl 5.6.1.

6) Required perl modules:

   CPAN Name
   ---------
   Bundle::Apache
   Apache::Session
   Apache::Session::File
   Storable
   DBI
   DBD::Pg
   HTML::Mason (MB works only with version 1.05:
                http://www.masonhq.com/code/download/HTML-Mason-1.05.tar.gz)
   String::CRC32
   String::Unicode::Similiarity (see notes below)
   Unicode::String
   XML::Parser
   XML::DOM
   RDFStore
   Digest::SHA1
   UUID (requires e2fsprogs)
   Text::Unaccent (at least version 1.05:
         http://www.senga.org/download/unac/Text-Unaccent-1.05.tar.gz)
   MIME-Base64
   HTTP::Negotiate

   These probably come standard with Perl:
   IO::Socket
   URI::Escape
   Carp
   Net::SMTP
   Tie::STDERR
   Time::HiRes
   String::ShellQuote

7) String::Unicode::Similarity

The server also uses a modified version of String::Similarity from CPAN,
patched to be able to deal with Unicode data.  Download both the original
code and the patch:

  http://search.cpan.org/CPAN/authors/id/M/ML/MLEHMANN/String-Similarity-0.02.tar.gz
  ftp://ftp.musicbrainz.org/pub/musicbrainz/misc/String-Unicode-Similarity.patch

then build with:

	tar zfx String-Similarity-0.02.tar.gz
	patch -p1 < String-Unicode-Similarity.patch
	cd String-Similarity-0.02
	perl Makefile.PL
	make
	make test
	make install

Installation:
=============

1) Make sure you have all the prerequisite pieces of software installed.
   Installing perl modules using CPAN is easier than doing it by hand.
   To use CPAN, as root type 'perl -MCPAN -e shell'.

2) Decide on a name for your database (e.g. musicbrainz) and a database
   owner (e.g. musicbrainz).  Decide on a location for the mb_server code.
   Pick directories for storing Mason and session/lock data.  If you pick
   these values, you'll have less work to do in the next step:

   Database:
   - database name "musicbrainz_db"
   - database user "musicbrainz_user", with no password

   Directories:
   - mb_server code: /home/httpd/musicbrainz/mb_server
   - Mason data:     /home/httpd/musicbrainz/mason
   - session data:   /home/httpd/musicbrainz/sessions
   - session locks:  /home/httpd/musicbrainz/locks

   Make sure your "session data" and "session locks" directories exist.  (The
   "Mason data" directory will be created automatically if it doesn't exist).

3) Edit the following files (in mb_server) to match the choices you made in
   the previous step:

   cgi-bin/DBDefs.pm
     This just contains lots of configuration settings; read the comments
     in the file for more information.  There's at least one setting in there
     which MUST be changed for you to run a server (SMTP_SECRET_CHECKSUM);
     most of the settings you can probably leave unchanged if you wish.

   admin/startup.pl
     There's only one thing to change here, namely the "use lib" line,
     which is marked with a "TODO" comment.

   admin/vh_httpd.conf
     This contains many things to customize - look for the TODO comments,
     which point out things that you might need to change.

4) Assuming you want to start off with a fully-populated database, you'll
   want to download the database dump files from the FTP site:

   wget --mirror ftp://ftp.musicbrainz.org/pub/musicbrainz/data/*tar*

   (Please use a mirror site if you can - see
   http://musicbrainz.org/ftpmirror/pub/musicbrainz/data/ for a list).

   Download all the dump files, double-check your settings in DBDefs.pm, make
   sure Postgres is running, then run the "InitDb" script, passing
   it the names of the "dump" files you just downloaded:

	./admin/InitDb.pl --createdb --import mbdump*.tar.bz2

   When run in this way, the script should do everything, including creating
   the database for you.  As a rough guide, on my Athlon 800MHz box it takes
   about 60-80 minutes to run this step, creating and loading a full database.
   Don't be surprised if this takes a while.

5) Configure Apache to use Mason.  In the admin directory you will find
   the vh_httpd.conf file, which is a VirtualHost fragment for Apache's
   httpd.conf file.  I suggest you run MusicBrainz as a virtual host.
   You should only have to import vh_httpd.conf into your virtualhosts section
   of your httpd.conf file.  In the admin directory you'll also find
   startup.pl, which is the mod_perl startup file.  You should have already
   customised these two files in step 3.

6) Copy all the files/subdirs in the htdocs directory into DocumentRoot
   directory that you specified in httpd.conf. Then copy all the files/subdirs
   from the cgi-bin dir into the ScriptAlias directory specified in httpd.conf

7) Now start Apache and you should be set and ready to roll.  Go the the
   selected URL and you should see a MusicBrainz site, complete with data.

   This should be it and now you have your very own MusicBrainz server.

Good luck!

Robert Kaye
Mayhem & Chaos Coordinator
rob@eorbit.net

Install instructions for the MusicBrainz Server:
------------------------------------------------

Requirements:
=============

The MusicBrainz server requires the following items:

1) A real SQL server, like postgres. MySQL won't work.
   The scripts use the perl DBI interface to talk to the server. It should
   work with other servers as well, but that has not been tested.

   You need at least version 7.3 of Postgres!

   PostgreSQL notes:

      - Configure the server with: configure --enable-multibyte=UNICODE
        to enable UTF-8 support. THIS IS IMPORTANT!!

      - If you've installed postgres via a package and have "pg_config"
        you can run:
            pg_config --configure
        to see what the source was compiles with to be sure it complies.
        If it doesn't return "--enable-multibyte" at all, you'll have to
        recompile it from source

   PostgreSQL authentication and Security
   
   (Read the Postgres documentation ("Client Authentication") for details).

   For normal operation, MusicBrainz only needs to connect from one or two OS
   users (whoever your web server / crontabs run as), to one database (the
   MusicBrainz database, given by &DBDefs::DB_NAME), as one Postgres user
   (&DBDefs::DB_USER).  For example, if you run your web server and crontabs
   as "www-user", the following configuration recipe may prove useful:
	
	# in pg_hba.conf:
	local musicbrainz_db musicbrainz_user ident mb_map

	# in pg_ident.conf:
	mb_map www-user musicbrainz_user

   The only time any other connection is required is if the "InitDB.pl"
   installation script is invoked with "--createdb".  In this case it needs to
   connect as the "postgres" user, so something else will need to be done to
   allow that.  You could:
	
	a) configure Postgres to allow your MusicBrainz OS user to connect
	   as both "postgres" and "musicbrainz_user"; you can then run everything
	   from one user account, e.g.
	   
	   ./admin/InitDB.pl --createdb --import mbdump*.tar.bz2
	
   or
   
        b) Run the "--createdb" step separately, from someone who can
	   connect as "postgres" (e.g. the "postgres" OS user):

	   # as "postgres":
	   ./admin/InitDB.pl --createdb

	   # as your MusicBrainz OS user:
	   ./admin/InitDB.pl --import mbdump*.tar.bz2

2) A database dedicated to MusicBrainz.  Of course, the scripts can help you
   create this.

3) Perl 5.8 or later

   The MusicBrainz server now uses Perl 5.8, required for its Unicode
   capabilities and the "Encode" module.  Strange encoding problems were
   observed with Perl 5.6.1.

   If you're planning to install Perl somewhere other than your usual system
   location (e.g. not /usr/bin/perl), take care to ensure that when you
   perform the various Perl-related steps below (building mod_perl, adding
   modules from CPAN) you use the correct copy of Perl.  For example,
   "/path/to/my/perl Makefile.PL".

   The default location for mb_server is "/home/httpd/musicbrainz/mb_server"
   (see MB_SERVER_ROOT in cgi-bin/DBDefs.pm).  MusicBrainz expects to find
   Perl at "/home/httpd/musicbrainz/mb_server/cgi-bin/perl".  If you're using
   the default MB_SERVER_ROOT, then just add a symbolic link to "perl" into
   the cgi-bin directory.
   
   If you're using a different server root, you'll need to adjust the "#!"
   line of each script to tell it where to find Perl instead.  For example,
   if you're using a base path of /usr/local/mb_server, this command should
   make the required adjustments for you:

   perl -i -pwe 's[^#!/home/httpd/musicbrainz/mb_server/cgi-bin/perl][#!/usr/local/mb_server/cgi-bin/perl]' `grep -rl '^#!/home/httpd/musicbrainz/mb_server/cgi-bin/perl' .`

4) Apache with mod_perl and Mason installed. See the following sites for more
   details on each of these packages:

      Apache:   http://www.apache.org
      mod_perl: http://perl.apache.org for details.
      Mason:    http://www.masonhq.com

   NOTE: When configuring Apache, make sure to not include the built-in
         expat, since that will conflict with the SiRPAC RDF parser's use
         of the external expat module. Configure Apache with:

         mod_perl: perl Makefile.PL APACHE_SRC=../apache_1.3.19/src DO_HTTPD=1 USE_APACI=1 PREP_HTTPD=1 EVERYTHING=1
         apache: ./configure --enable-module=rewrite --disable-rule=expat --prefix=/usr/apache --activate-module=src/modules/perl/libperl.a

    Also NOTE: Red Hat is known to ship their Apache packages with the
               built-in expat support enabled, so you will have to build
               Apache from scratch on Red Hat systems.

    WARNING!  Don't compile Apache with mod_perl built as a DSO (Dynamic
              Shared Object).  Mason doesn't get along with a DSO mod_perl
              (though it's not alone). If you do build mod_perl as a DSO,
              Apache can (and probably will) segfault or die silently on
              startup.


5) Expat XML Parser library: http://sourceforge.net/projects/expat

6) Required perl modules:

   CPAN Name
   ---------
   Apache::Session
   Apache::Session::File
   Bundle::Apache
   Cache::SizeAwareFileCache
   DBD::Pg
   DBI
   Digest::SHA1
   HTML::Mason
   HTTP::Negotiate
   MIME-Base64
   MIME::Lite
   RDFStore
   Storable
   String::CRC32
   String::Unicode::Similiarity (see notes below)
   Text::Unaccent (at least version 1.05: http://www.senga.org/download/unac/Text-Unaccent-1.05.tar.gz)
   UUID (requires e2fsprogs)
   Unicode::String
   XML::Parser

   These probably come standard with Perl:
   Carp
   IO::Socket
   Net::SMTP
   String::ShellQuote
   Tie::STDERR
   Time::HiRes
   URI::Escape

7) String::Unicode::Similarity

The server also uses a modified version of String::Similarity from CPAN,
patched to be able to deal with Unicode data.  Download both the original
code and the patch:

  http://search.cpan.org/CPAN/authors/id/M/ML/MLEHMANN/String-Similarity-0.02.tar.gz
  ftp://ftp.musicbrainz.org/pub/musicbrainz/misc/String-Unicode-Similarity.patch

then build with:

	tar zfx String-Similarity-0.02.tar.gz
	patch -p1 < String-Unicode-Similarity.patch
	cd String-Similarity-0.02
	perl Makefile.PL
	make
	make test
	make install

8) Other dependencies

Run ./admin/depend.pl to check for other requirements.

Installation:
=============

1) If you want to import the current live data into your database, you'll need
   the current live copy of the server codebase, not the latest CVS copy.
   Otherwise, the import may fail, possibly with an error like this:
     ERROR:  copy: line 1, Missing data for column "automodsaccepted" 
 
   How to get the live server code:

   i) Work out what CVS tag corresponds to the live server.  It should be of
      the form "RELEASE_yyyymmdd-BRANCH".  The date (yyyymmdd) in question
      will probably match the "server version" smallprint shown at the bottom
      of every MusicBrainz web page.  Alternatively, list the possible tags
      ("cvs status -v INSTALL | grep RELEASE_ | sort") and pick the one with
      the latest date.
      (Yes, I agree, that was too complicated.  It needs to be made simpler.)

   ii) Check out that version of the mb_server source code, e.g.
      cvs checkout -r RELEASE_20031019-BRANCH mb_server

2) Make sure you have all the prerequisite pieces of software installed.
   Installing perl modules using CPAN is easier than doing it by hand.
   To use CPAN, as root type 'perl -MCPAN -e shell'.

3) Decide on a name for your database (e.g. musicbrainz) and a database
   owner (e.g. musicbrainz).  Decide on a location for the mb_server code.
   Pick directories for storing Mason and session/lock data.  If you pick
   these values, you'll have less work to do in the next step:

   Database:
   - database name "musicbrainz_db"
   - database user "musicbrainz_user", with no password

   Directories:
   - mb_server code: /home/httpd/musicbrainz/mb_server
   - Mason data:     /home/httpd/musicbrainz/mason
   - session data:   /home/httpd/musicbrainz/sessions
   - session locks:  /home/httpd/musicbrainz/locks

   Make sure your "session data" and "session locks" directories exist.  (The
   "Mason data" directory will be created automatically if it doesn't exist).

4) Edit the following files (in mb_server) to match the choices you made in
   the previous step:

   cgi-bin/DBDefs.pm
     This just contains lots of configuration settings; read the comments
     in the file for more information.  There's at least one setting in there
     which MUST be changed for you to run a server (SMTP_SECRET_CHECKSUM);
     most of the settings you can probably leave unchanged if you wish.

   admin/startup.pl
     There's only one thing to change here, namely the "use lib" line,
     which is marked with a "TODO" comment.

   admin/vh_httpd.conf
     This contains many things to customize - look for the TODO comments,
     which point out things that you might need to change.

5) Assuming you want to start off with a fully-populated database, you'll
   want to download the database dump files from the FTP site:

   wget --mirror ftp://ftp.musicbrainz.org/pub/musicbrainz/data/*tar*

   (Please use a mirror site if you can - see
   http://musicbrainz.org/ftpmirror/pub/musicbrainz/data/ for a list).

   Download all the dump files, double-check your settings in DBDefs.pm, make
   sure Postgres is running, then run the "InitDb" script, passing
   it the names of the "dump" files you just downloaded:

	./admin/InitDb.pl --createdb --echo --import mbdump*.tar.bz2

   (but see the above notes about Postgres authentication and security).

   When run in this way, the script should do everything, including creating
   the database for you.  As a rough guide, on my Athlon 2500+ box it takes
   about 90 minutes to run this step, creating and loading a full database.
   Recent tests suggest that on Postgres 7.4.1 it's MUCH faster - about 35
   minutes for me.  Of course, if you don't need to import all the data (say,
   only need the core tables), then that'll help too.

6) Configure Apache to use Mason.  In the admin directory you will find
   the vh_httpd.conf file, which is a VirtualHost fragment for Apache's
   httpd.conf file.  I suggest you run MusicBrainz as a virtual host.
   You should only have to import vh_httpd.conf into your virtualhosts section
   of your httpd.conf file.  In the admin directory you'll also find
   startup.pl, which is the mod_perl startup file.  You should have already
   customised these two files in step 3.

7) Copy all the files/subdirs in the htdocs directory into DocumentRoot
   directory that you specified in httpd.conf. Then copy all the files/subdirs
   from the cgi-bin dir into the ScriptAlias directory specified in httpd.conf

8) Now start Apache and you should be set and ready to roll.  Go the the
   selected URL and you should see a MusicBrainz site, complete with data.

   This should be it and now you have your very own MusicBrainz server.

Good luck!



Loading the MusicBrainz Data into MySQL
---------------------------------------

Although the MusicBrainz server is intended to run on Postgres, it is possible
to load the MusicBrainz data into a MySQL database, and additionally it may be
possible to run a partial server (e.g. it maybe only suitable for read only
access) on top of that MySQL database.

"Mutiny" said on 2003-09-11
(http://chatlogs.musicbrainz.org/2003/2003-09/2003-09-11.html#T22-07-49):

  Importing the data into a mysql database was actually insanely easy.  All I
  did (exactly) was:

    mysqladmin create musicbrainz
    mysql musicbrainz < CreateTables.sql
    mysqlimport musicbrainz mbdump/*

So apparently it's that easy!



Robert Kaye
Mayhem & Chaos Coordinator
rob@eorbit.net

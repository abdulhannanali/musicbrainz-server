Install instructions for the MusicBrainz Server:
------------------------------------------------

These instructions are general instructions for setting up MusicBrainz server.
There are three different types of MusicBrainz server setups that you could install:

1. Master server - Currently there is only one master server and that is musicbrainz.org
   itself. Unless you are testing/playing with the replication system, you will never need
	to setup a master replication server.
2. Slave server - If you want to install a MusicBrainz slave server, follow these 
   instructions and whenever replication is mentioned, make sure to follow the instructions
	for setting up a slave. If you want to set up a database only slave (without the
   web site portions), you will still need to install most of the perl modules. You can
	skip the Apache (and related) and Mason modules for a database only slave. There is
	also a special section for replicated servers at the bottom of this file that summarizes
	the changes needed to setup a slave server.
3. Independent/development server - If you want to tinker with your own server that does
   not get automatic data updates, then choose this option. If you're considering helping
	with server development, you'd want to choose this option.

Requirements:
=============

The MusicBrainz server requires the following items. Please note the
inline notes about which type of server you are setting up -- if there are no
specific notes about a server type, the instructions apply to all server types.

1) PostgreSQL 7.3 or later

   Postgres must have multi-byte support enabled.  In older versions
   this was doing with "./configure --enable-multibyte=UNICODE" , but
   since 7.3.0 this has been the default, so you probably don't have to
   worry about it.

   Locales

   When importing a data dump, some people report that some of the "create
   unique index" statements fail (because of non-unique data).  This appears
   to be locale-related, but at the time of writing the precise nature of the
   problem is not understood.

   Some people report that the installation works straight off, without
   considering locales at all.  Others report that "initdb --locale=C"
   is what's required.  Others report that "initdb --nolocale" is necessary.
   Your mileage may vary.

   Replication Master
   
   For replication we use the "dbmirror" code from the "contributed" part of
   the postgres codebase.  In particular you'll need the "pending.so" file
   (we've only tested this on Linux).  When you run "InitDb.pl", you'll need
   to add "--with-replication" and "--with-pending=/path/to/pending.so",
   to tell the database server where to find that file.  For example:

     ./admin/InitDb.pl \
	--echo \
	--createdb \
	--import \
	--with-replication \
	--with-pending=/usr/lib/postgresql/lib/pending.so \
	~/mbdump*.tar.bz2
   
   Be sure to run ExportAllTables regularly, otherwise your Pending and
   PendingData tables may grow out of control). Note, that this is mutually
   exclusive of being a replication slave (which is what most people will want
   to do).

   PostgreSQL authentication and Security
 
   (Read the Postgres documentation ("Client Authentication") for details).

   For normal operation, MusicBrainz only needs to connect from one or two OS
   users (whoever your web server / crontabs run as), to one database (the
   MusicBrainz database), as one Postgres user.  The Postgres database name
   and user name are given in DBDefs.pm (look for the "READWRITE" key).
   For example, if you run your web server and crontabs
   as "www-user", the following configuration recipe may prove useful:
	
	# in pg_hba.conf:
	local musicbrainz_db musicbrainz_user ident mb_map

	# in pg_ident.conf:
	mb_map www-user musicbrainz_user

   The only time any other connection is required is if the "InitDb.pl"
   installation script is invoked with "--createdb".  In this case it needs to
   connect as the "postgres" user, so something else will need to be done to
   allow that.  You could:
	
	a) configure Postgres to allow your MusicBrainz OS user to connect
	   as both "postgres" and "musicbrainz_user"; you can then run everything
	   from one user account, e.g.
	   
	   ./admin/InitDb.pl --createdb --import mbdump*.tar.bz2
	
   or
   
        b) Run the "--createdb" step separately, from someone who can
	   connect as "postgres" (e.g. the "postgres" OS user):

	   # as "postgres":
	   ./admin/InitDb.pl --createdb

	   # as your MusicBrainz OS user:
	   ./admin/InitDb.pl --import mbdump*.tar.bz2

2) A database dedicated to MusicBrainz.  Of course, the scripts can help you
   create this.

3) Perl 5.8 or later

   The MusicBrainz server now uses Perl 5.8, required for its Unicode
   capabilities and the "Encode" module.  Strange encoding problems were
   observed with Perl 5.6.1.

   If you're planning to install Perl somewhere other than your usual system
   location (e.g. not /usr/bin/perl), take care to ensure that when you
   perform the various Perl-related steps below (building mod_perl, adding
   modules from CPAN) you use the correct copy of Perl.  For example,
   "/path/to/my/perl Makefile.PL".

   The default location for mb_server is "/home/httpd/musicbrainz/mb_server"
   (see MB_SERVER_ROOT in cgi-bin/DBDefs.pm).  MusicBrainz expects to find
   Perl at "/home/httpd/musicbrainz/mb_server/cgi-bin/perl".  If you're using
   the default MB_SERVER_ROOT, then just add a symbolic link to "perl" into
   the cgi-bin directory.
   
   If you're using a different server root, you'll need to adjust the "#!"
   line of each script to tell it where to find Perl instead.  For example,
   if you're using a base path of /usr/local/mb_server, this command should
   make the required adjustments for you:

   perl -i -pwe 's[^#!/home/httpd/musicbrainz/mb_server/cgi-bin/perl][#!/usr/local/mb_server/cgi-bin/perl]' `grep -rl '^#!/home/httpd/musicbrainz/mb_server/cgi-bin/perl' .`

4) Apache with mod_perl and Mason installed. You can skip this step
   for a database only slave. See the following sites for more details on 
	each of these packages:

      Apache:   http://www.apache.org
      mod_perl: http://perl.apache.org for details.
      Mason:    http://www.masonhq.com

   NOTE: When configuring Apache, make sure to not include the built-in
         expat, since that will conflict with the SiRPAC RDF parser's use
         of the external expat module. Configure Apache with:

         mod_perl: perl Makefile.PL APACHE_SRC=../apache_1.3.19/src DO_HTTPD=1 USE_APACI=1 PREP_HTTPD=1 EVERYTHING=1
         apache: ./configure --enable-module=rewrite --disable-rule=expat --prefix=/usr/apache --activate-module=src/modules/perl/libperl.a

    Also NOTE: Red Hat is known to ship their Apache packages with the
               built-in expat support enabled, so you will have to build
               Apache from scratch on Red Hat systems.

    WARNING!  Don't compile Apache with mod_perl built as a DSO (Dynamic
              Shared Object).  Mason doesn't get along with a DSO mod_perl
              (though it's not alone). If you do build mod_perl as a DSO,
              Apache can (and probably will) segfault or die silently on
              startup.


5) Expat XML Parser library: http://sourceforge.net/projects/expat

6) Memcached: http://www.danga.com/memcached/
   This is optional, but strongly encourged if you are going to be running
   a MusicBrainz web site as well.

7) Required perl modules:

   CPAN Name
   ---------
   Apache::Session
   Apache::Session::File
   Bundle::Apache
   Cache::Memcached
   DBD::Pg
   DBI
   Digest::SHA1
   HTML::Mason
   HTTP::Negotiate
   Image::Info
   MIME-Base64
   MIME::Lite
   Net::Amazon
   RDFStore
   Storable
   String::CRC32
   String::Unicode::Similiarity (see notes below)
   Text::Unaccent (see notes below)
   UUID (requires e2fsprogs)
   Unicode::String
   XML::Parser

   These probably come standard with Perl:
   Carp
   IO::Socket
   Net::SMTP
   String::ShellQuote
   Tie::STDERR
   Time::HiRes
   URI::Escape

8) String::Unicode::Similarity

The server also uses a modified version of String::Similarity from CPAN,
patched to be able to deal with Unicode data.  Download both the original
code and the patch:

  http://search.cpan.org/CPAN/authors/id/M/ML/MLEHMANN/String-Similarity-0.02.tar.gz
  ftp://ftp.musicbrainz.org/pub/musicbrainz/misc/String-Unicode-Similarity.patch

then build with:

	tar zfx String-Similarity-0.02.tar.gz
	patch -p1 < String-Unicode-Similarity.patch
	cd String-Similarity-0.02
	perl Makefile.PL
	make
	make test
	make install

Since this patch was created, String-Similarity-1 has now been released
(http://search.cpan.org/~mlehmann/String-Similarity-1/).  This takes care of
comparing Unicode strings, which is what the patch was originally for.
However the "SearchEngine.pm" file uses the patched version of the module in
an "unofficial" way, which String-Similiarity-1 doesn't support - so for now,
we have to stick with the patched version of 0.02.

9) Text::Unaccent

The latest version of Text::Unaccent on CPAN is, at the time of writing, 1.01.
However, we need at least 1.05, which you can get from http://www.senga.org/
(http://www.senga.org/download/unac/).
   
Additionally, we also require that the "unac_string" routine it provides be
able to handle non-string values, like "undef".  There's a patch to achieve
this at http://www.musicbrainz.org/~dave/Text-Unaccent-1.07-svrok.patch

10) Other dependencies

Run ./admin/depend.pl to check for other requirements.



Installation:
=============

1) If you want to import the current live data into your database, you'll need
   the current live copy of the server codebase, not the latest CVS copy.
   Otherwise, the import may fail, possibly with an error like this:
     ERROR:  copy: line 1, Missing data for column "automodsaccepted" 
 
   How to get the live server code:

   i) Work out what CVS tag corresponds to the live server.  It should be of
      the form "RELEASE_yyyymmdd-BRANCH".  The date (yyyymmdd) in question
      will probably match the "server version" smallprint shown at the bottom
      of every MusicBrainz web page.  Alternatively, list the possible tags
      ("cvs status -v INSTALL | grep RELEASE_ | sort") and pick the one with
      the latest date.
      (Yes, I agree, that was too complicated.  It needs to be made simpler.)

   ii) Check out that version of the mb_server source code, e.g.
      cvs checkout -r RELEASE_20040724-BRANCH mb_server

2) Make sure you have all the prerequisite pieces of software installed.
   Installing perl modules using CPAN is easier than doing it by hand.
   To use CPAN, as root type 'perl -MCPAN -e shell'.

3) Decide on a name for your database (e.g. musicbrainz) and a database
   owner (e.g. musicbrainz).  Decide on a location for the mb_server code.
   Pick directories for storing Mason and session/lock data.  If you pick
   these values, you'll have less work to do in the next step:

   Database:
   - database name "musicbrainz_db"
   - database user "musicbrainz_user", with no password

   Directories:
   - mb_server code: /home/httpd/musicbrainz/mb_server
   - Mason data:     /home/httpd/musicbrainz/mason
   - session data:   /home/httpd/musicbrainz/sessions
   - session locks:  /home/httpd/musicbrainz/locks

   Make sure your "session data" and "session locks" directories exist.  (The
   "Mason data" directory will be created automatically if it doesn't exist).

4) Edit the following files (in mb_server) to match the choices you made in
   the previous step:

   cgi-bin/DBDefs.pm
     This just contains lots of configuration settings; read the comments
     in the file for more information.  There's at least one setting in there
     which MUST be changed for you to run a server (SMTP_SECRET_CHECKSUM);
     most of the settings you can probably leave unchanged if you wish.

	  If you are running a slave server, set the DB_IS_REPLICATED setting
	  to 1 and the READONLY setting in the register_all section to 1.
	  This indicates that you wish to run a database slave and that the
	  web site should be accessing the DB in a READONLY fashion to avoid
	  making changes to the database. The only changes applied to a database
	  should come from the replication packets downloaded from the main server.
	  More about that later!

   admin/startup.pl
     There's only one thing to change here, namely the "use lib" line,
     which is marked with a "TODO" comment.

   admin/vh_httpd.conf
     This contains many things to customize - look for the TODO comments,
     which point out things that you might need to change.

5) Assuming you want to start off with a fully-populated database, you'll
   want to download the database dump files from the FTP site:

   wget --mirror ftp://ftp.musicbrainz.org/pub/musicbrainz/data/*tar*

   (Please use a mirror site if you can - see
   http://musicbrainz.org/ftpmirror/pub/musicbrainz/data/ for a list).

	If you are setting up a development server you will probably want to
	import all of the database dumps. However, for a slave server, you will 
	want to download only the following dumps:

	   mbdump-artistrelation.tar.bz2    
		mbdump.tar.bz2
		mbdump-derived.tar.bz2

   Download the appropriate dump files, double-check your settings in 
	DBDefs.pm, make sure Postgres is running, then run the "InitDb.pl" script, 
	passing it the names of the "dump" files you just downloaded:

	./admin/InitDb.pl --createdb --echo --import mbdump*.tar.bz2

   (but see the above notes about Postgres authentication and security).

   When run in this way, the script should do everything, including creating
   the database for you.  As a rough guide, on my Athlon 2500+ box it takes
   about 90 minutes to run this step, creating and loading a full database.
   Recent tests suggest that on Postgres 7.4.1 it's MUCH faster - about 35
   minutes for me.  Of course, if you don't need to import all the data (say,
   only need the core tables), then that'll help too.

NOTE: Steps 6 - 8 are optional for database only slaves!
	
6) Configure Apache to use Mason.  In the admin directory you will find
   the vh_httpd.conf file, which is a VirtualHost fragment for Apache's
   httpd.conf file.  I suggest you run MusicBrainz as a virtual host.
   You should only have to import vh_httpd.conf into your virtualhosts section
   of your httpd.conf file.  In the admin directory you'll also find
   startup.pl, which is the mod_perl startup file.  You should have already
   customised these two files in step 3.

7) Copy all the files/subdirs in the htdocs directory into DocumentRoot
   directory that you specified in httpd.conf. Then copy all the files/subdirs
   from the cgi-bin dir into the ScriptAlias directory specified in httpd.conf

8) Now start Memcached and Apache and you should be set and ready to roll.
   Go the the selected URL and you should see a MusicBrainz site, complete
   with data.

9) Cron jobs (mostly optional, except for slaves)
   The admin/cron directory contains some scripts to run hourly, daily and
   weekly.  You might want to add these scripts to your server's crontab.
   These scripts use various settings from ./admin/config.sh, which you'll
   need to tweak to suit your installation before running them.  "daily.sh" in
   particular is heavily geared towards the configuration of the main
   MusicBrainz server; you probably will want to modify it in some way.

	For slave servers, you need to add an hourly cron job (that runs 
   about 15 - 20 minutes after each hour) that runs the admin/cron/slave.sh
	file to download and apply replication packets from the main server.

   This should be it and now you have your very own MusicBrainz server.

Good luck!



Setting up a replication slave
------------------------------

If you want to maintain an up-to-date copy of all the latest data from the
main MusicBrainz server, you can set up your MusicBrainz server to be a
"replication slave".  In this mode you can use your server to examine the
data using the usual web pages, but you won't be able to modify the data at
all - to do that, you go back to the main server and modify the data there.
Later on, that change will make its way back to your server as you retrieve
the latest data updates.

To do this you'll need a slightly different set-up.  Firstly you'll need two
Postgres users - one which has permission to write to the database (so it can
apply the data updates retrieved from the main server), and another user who
only read the data, not modify it.  For example, you might choose
"write_user" for the former and "read_user" for the latter.  In DBDefs.pm
you'll need to enter three sets of database connection details:

* READWRITE - the user who has permission to write to the database
* READONLY - the user who only has permission to read it
* SYSTEM - the "Postgres" user (only used by "InitDb.pl", when you're first
           creating the database)

The database name for READWRITE and READONLY should usually be the same.  For
SYSTEM, the database name should always be "template1".  Usually, the "host"
and "port" values for all three connections should be the same.

Finally, ensure that DB_IS_REPLICATED is set to "1".

For example:

	# How to connect when we need read-write access to the database
	READWRITE => {
	    database	=> "mydatabase",
	    username	=> "write_user",
	    password	=> "",
	    host	=> "",
	    port	=> "",
	},
	# How to connect for read-only access.  See "DB_IS_REPLICATED" (below)
	READONLY => {
	    database	=> "mydatabase",
	    username	=> "read_user",
	    password	=> "",
	    host	=> "",
	    port	=> "",
	},
	# How to connect for administrative access
	SYSTEM	=> {
	    database	=> "template1",
	    username	=> "postgres",
	    password	=> "",
	    host	=> "",
	    port	=> "",
	},

...

sub DB_IS_REPLICATED { 1 }



Loading the MusicBrainz Data into MySQL
---------------------------------------

Although the MusicBrainz server is intended to run on Postgres, it is possible
to load the MusicBrainz data into a MySQL database, and additionally it may be
possible to run a partial server (e.g. it maybe only suitable for read only
access) on top of that MySQL database.

"Mutiny" said on 2003-09-11
(http://chatlogs.musicbrainz.org/2003/2003-09/2003-09-11.html#T22-07-49):

  Importing the data into a mysql database was actually insanely easy.  All I
  did (exactly) was:

    mysqladmin create musicbrainz
    mysql musicbrainz < CreateTables.sql
    mysqlimport musicbrainz mbdump/*

So apparently it's that easy!



Robert Kaye
Mayhem & Chaos Coordinator
rob@eorbit.net

Install instructions for the MusicBrainz Server: 
------------------------------------------------

Requirements:
=============

The MusicBrainz server requires the following items:

1) A real SQL server, like postgres. MySQL won't work. 
   The scripts use the perl DBI interface to talk to the server. It should 
   work with other servers as well, but that has not been tested.

   You need at least version 7.2 of Postgres!

   PostgreSQL notes:
    
      - Configure the server with: configure --enable-multibyte=UNICODE
        to enable UTF-8 support. THIS IS IMPORTANT!!
      - if you've installed postgres via a package and have "pg_config"
        you can run:
            pg_config --configure
        to see what the source was compiles with to be sure it complies.
        If it doesn't return "--enable-multibyte" at all, you'll have to
        recompile it from source

2) A database dedicated to MusicBrainz. These scripts use
   the database name 'musicbrainz' and user name 'postgres'.
3) Apache with mod_perl and Mason installed. See the following sites for more
   details on each of these packages:
   
      Apache:   http://www.apache.org 
      mod_perl: http://perl.apache.org for details.
      Mason:    http://www.masonhq.com

   NOTE: When configuring Apache, make sure to not include the built-in
         expat, since that will conflict with the SiRPAC RDF parser's use
         of the external expat module. Configure Apache with:

         mod_perl: perl Makefile.PL APACHE_SRC=../apache_1.3.19/src DO_HTTPD=1 USE_APACI=1 PREP_HTTPD=1 EVERYTHING=1
         apache: ./configure --enable-module=rewrite --disable-rule=expat --prefix=/usr/apache --activate-module=src/modules/perl/libperl.a

    Also NOTE: Red Hat is known to ship their Apache packages with the
               built-in expat support enabled, so you will have to build
               Apache from scratch on Red Hat systems.

    WARNING!  Don't compile Apache with mod_perl built as a DSO (Dynamic
              Shared Object).  Mason doesn't get along with a DSO mod_perl
              (though it's not alone). If you do build mod_perl as a DSO,
              Apache can (and probably will) segfault or die silently on
              startup.


4) Expat XML Parser library: http://sourceforge.net/projects/expat

5) Perl 5.6.1 

   Perl 5.6.1 is the right perl to use. A lot of CPAN packages
   fail to compile under 5.8, so its best to wait for at least
   5.8.1.

6) Required perl modules: 
  
   CPAN Name
   ---------
   Bundle::Apache
   Apache::Session
   Apache::Session::File
   Storable
   DBI          
   DBD::Pg
   HTML::Mason (MB works only with version 1.05:
                http://www.masonhq.com/code/download/HTML-Mason-1.05.tar.gz)
   String::CRC32
   String::Similarity;
   Unicode::String
   XML::DOM   
   XML::Parser 
   XML::XQL  
   XML::XQL::DOM
   RDFStore
   Digest::SHA1
   UUID (requires e2fsprogs)
   Text::Unaccent (at least version 1.05:
         http://www.senga.org/download/unac/Text-Unaccent-1.05.tar.gz)

   These probably come standard with Perl:
   IO::Socket     
   URI::Escape
   Carp;
   Tie::STDERR
   Benchmark::Timer

Installation:
=============

1) Make sure you have all the prerequisite pieces of software installed.
   Installing perl modules using CPAN is easier than doing it by hand.
   To use CPAN, as root type 'perl -MCPAN -e shell'. 

   For the HTML::Mason install, there is a handler.pl script already
   included in the admin directory. You will probably need to review
   it and make sure that all the paths point to the right place. Check
   the file for TODO sections which point out things that might need to
   change. However, if you place all MusicBrainz related things into
   /home/httpd/musicbrainz/{htdocs|cgi-bin|mason|locks|sessions} you
   shouldn't have to make any changes.

   TODO sections mentioned:
     1) Set the lib path to point to the cgi-bin dir in this dist.
     2) Set the Mason comp_root (point it to the htdocs dir in this dist)
     3) Set the Mason data_dir (point it to an empty Mason dir where httpd
        has write access. To keep things in one place, choose 
        /home/httpd/musicbrainz/mason. httpd will place cache objects and 
        such in this dir)
     4) Set the session and lock directories where Apache can store the
        user session files. It defauls to /home/httpd/musicbrainz/sessions
        and /home/httpd/musicbrainz/locks. Make sure the selected
        directories exist before you start the server.

2) Create a UNICODE (!) database called 'musicbrainz'. 
   (postgres: createdb -E UNICODE musicbrainz)

3) In the cgi-bin directory, edit DBDefs.pm. This perl module will keep
   all the information for accesing the database. Follow the instructions
   in the module.

4) In the admin directory, run the script CreateTables.pl. This will log
   into the DB server and create all the necessary tables. If you want to
   create a blank database for testing, run CreateTables.pl with the 'all'
   option. However, if you plan to import the data from the MB website,
   then run 'CreateTables.pl views tables indexes' skipping the insertion
   of the default rows. The default rows are included in the data dump
   and would cause problems when trying to import the data dump.

5) Configure Apache to use Mason. In the admin directory you will find
   a prefab handler.pl to use with the Mason setup and the vh_httpd.conf
   file which is a VirtualHost fragment for Apache's httpd.conf file.
   I suggest you run MusicBrainz as a virtual host, and if you stash
   the htdocs files into /home/httpd/musicbrains/htdocs and the files
   from cgi-bin into /home/httpd/musicbrainz/cgi-bin you shouldn't have
   to modify handler.pl and you should only have to import vh_httpd.conf
   into your virtualhosts section of your httpd.conf file. In the admin
   directory you'll also find startup.pl which is the mod_perl startup
   file. Place both startup.pl and handler.pl into the conf directory
   of your apache install. Its probably wise to review each of these scripts
   and look for TODO comments. Each of the TODO comments indicates a
   path or setting that needs to be set for your configuration. 

6) Copy all the files/subdirs in the htdocs directory into DocumentRoot
   directory that you specified in httpd.conf. Then copy all the files/subdirs
   from the cgi-bin dir into the ScriptAlias directory specified in httpd.conf

7) Now start postgres (if its not already running), and then start Apache and
   you should be set and ready to roll. Go the the selected URL and you
   should see a MusicBrainz site without any data.

8) Finally, import some data into the system. Download the data dump from
       ftp://ftp.musicbrainz.org/pub/musicbrainz/data/mbdump.tar.bz2
   and then run the data import script in the admin dir:

       ./MBImport.pl mbdump.tar.bz2

   Then, to reset the Postgres sequence counters, run:

       ./SetSequences.pl

   Then, build the keyword indexes for the text searching:

       ./build_words.pl

   If you ever need to rebuild the text indexes after they have existed,
   make sure to drop the indexes before running build_words -- for some
   reason Postgress is painfully slow on old indexes. The admin/sql
   directory has two helper scripts to make this easy:

       psql musicbrainz < sql/DropTextIndexes.pl
       psql musicbrainz < sql/CreateTextIndexes.pl
       ./build_words.pl

   This should be it and now you have your very own MusicBrainz server.

Good luck!

Robert Kaye
Mayhem & Chaos Coordinator
rob@eorbit.net

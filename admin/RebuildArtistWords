#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 1998 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use FindBin;
use lib "$FindBin::Bin/../lib";

use strict;
$| = 1;

my $help = <<EOF;
Usage: RebuildArtistWords [options]

Options are:
     --artist[=RANGE] Process [only RANGE] artists
     --album[=RANGE]  Process [only RANGE] albums
     --track[=RANGE]  Process [only RANGE] tracks
     --label[=RANGE]  Process [only RANGE] labels
  -h --help           This help

RANGE specifies which artists (etc) to process.  RANGE can be:
  (missing)    - e.g. just "--artist" - process all of them
  # (a number) - start at ID "N", continue to the end
  #-#          - process a range of IDs

If you don't specify any options, then everything is processed.  Otherwise,
only the things you specify are processed.

EOF

my ($artist, $album, $track, $label);

sub do_range
{
	my ($ref, $opt, $value) = @_;

	$$ref = uc $value, return
		if $value =~ /
			\A
			(
							# empty == do all
				| \d+		# start
				| \d+-\d+	# start-end
			)
			\z
		/xi;

	print STDERR "Bad value for '--$opt'.  See '--help' for more.\n";
	exit 2;
}

$artist = $album = $track = $label = "";
$artist = $album = $track = $label = "NONE" if @ARGV;

use Getopt::Long;
GetOptions(
	"artist:s"	=> sub { do_range(\$artist, @_) },
	"album:s"	=> sub { do_range(\$album, @_) },
	"track:s"	=> sub { do_range(\$track, @_) },
	"label:s"	=> sub { do_range(\$label, @_) },
	"help"		=> sub { print $help; exit; },
) or exit 2;
print($help), exit 2 if @ARGV;
print($help), exit 2 unless grep { $_ ne "NONE" } ($artist, $album, $track, $label);

use MusicBrainz;
use Sql;

my $mb = MusicBrainz->new;
$mb->Login;

my $sql = Sql->new($mb->{dbh});

rebuild("artist", "Artist", $artist);
rebuild("album", "Album", $album);
rebuild("track", "Track", $track);
rebuild("label", "Label", $label);

sub rebuild
{
	my ($table, $class, $range) = @_;

	if ($range eq "NONE")
	{
		print localtime() . " : Not rebuilding $table words\n";
		return;
	}

	eval "require $class; 1" or die $@;

	my ($start, $end) = split /-/, $range;

	print localtime() . " : Processing all rows in $table\n"
		if not defined $start;
	print localtime() . " : Processing rows $start onwards in $table\n"
		if defined($start) and not defined($end);
	print localtime() . " : Processing rows $start-$end in $table\n"
		if defined $end;

	my $obj = $class->new($mb->{dbh});

	use Time::HiRes qw( gettimeofday tv_interval );
	$start ||= 0;
	my $iCount = 0;
	my $t0 = [ gettimeofday ];

	my $endwhere = "";
	$endwhere = " AND id <= $end" if defined $end;

	for (;;)
	{
		my $raiIDs = $sql->SelectSingleColumnArray(
			"SELECT id FROM $table WHERE id > ?$endwhere ORDER BY 1 LIMIT 50",
			$start,
		);
		@$raiIDs or last;

		printf "%s : %6d - %6d ...", scalar localtime, $raiIDs->[0], $raiIDs->[-1];
		$sql->Begin;

		for my $id (@$raiIDs)
		{
			$obj->SetId($id);
			$obj->LoadFromId;
			$obj->RebuildWordList;
			print ".";
			$start = $id;
			++$iCount;
		}

		$sql->Commit;

		my $nTime = tv_interval($t0);
		printf " %6d in %4d sec (%3d r/s)\n",
			$iCount,
			$nTime,
			$iCount/$nTime,
			;
	}

	print localtime() . " : Completed rebuild of $table\n";
}

# eof RebuildArtistWords

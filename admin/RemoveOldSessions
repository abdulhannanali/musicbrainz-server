#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 1998 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use FindBin;
use lib "$FindBin::Bin/../lib";

use DBDefs;
use MusicBrainz;
use Apache::Session::File ();
use Getopt::Long;
use File::Basename qw( dirname basename );

sub debug($)
{
	print $_[0] if -t STDOUT;
}

my $sessdir = &DBDefs::SESSION_DIR;
my $lockdir = &DBDefs::LOCK_DIR;

my $dump_all = 0;
my $expire = 1;
my $show_expired_sessions = -t;
my $show_alive_sessions = 0;
my $fForce = 0;

GetOptions(
	"dump-all!"				=> \$dump_all,
	"expire!"				=> \$expire,
	"show-expired-sessions!"=> \$show_expired_sessions,
	"show-alive-sessions!"	=> \$show_alive_sessions,
	"force"					=> \$fForce,
) or usage();

sub usage
{
	print <<EOF;
Usage: RemoveOldSessions [OPTIONS] [FILE]...

Allowable options are:

    --[no]dump-all  [don't] dump the contents of every session
                    (default is false)
    --[no]expire    [don't] delete expired sessions (default is true)
    --[no]show-expired-sessions
                    [don't] describe sessions which are being expired
                    (default is true at a terminal, false otherwise)
    --[no]show-alive-sessions
                    [don't] describe sessions which are still alive
                    (default is false)

If FILE is specified, then process only those files; otherwise, process all
files in the session directory ($sessdir).

EOF
	exit 1;
}

my $removed = 0;
my $failed = 0;

if (@ARGV)
{
	my ($ddev, $dinode) = (stat $sessdir)[0,1];

	for my $file (@ARGV)
	{
		my $dir = dirname($file);
		my ($fdev, $finode) = (stat $dir)[0,1];

		warn "File $file doesn't seem to be in the session directory ($sessdir)\n"
			unless $ddev == $fdev
			and $dinode == $finode;
		
		process_file($file);
	}
}
else
{
	opendir(DIR, $sessdir) or die $!;

	while (my $file = readdir DIR)
	{
		-f "$sessdir/$file" or next;

		process_file("$sessdir/$file");
	}

	closedir DIR;
}

printf "Removed:%d  Failed:%d\n", $removed, $failed if -t STDOUT;

remove_orphaned_locks();

exit;

sub process_file
{
	my $file = shift;
	my $sess = basename($file);
	my @stat = stat $file;

	my %session;
	my $has_expired = 0;

	debug("Opening $file ...");
	eval { 
	    tie %session,
		'Apache::Session::File',
		$sess,
		{
		    Directory => $sessdir,
		    LockDirectory => $lockdir,
		};
	} or debug("\n"), warn("tie $file: $@"), next;
	debug("\n");

	my %info = (
		file => $file,
		stat => \@stat,
		session => \%session,
	);

	use Data::Dumper;
	print Data::Dumper->Dump([
		\%info,
	],[
		"*session",
	]) if $dump_all;

	my $expiretime = $session{'expire'};

	if ($expiretime and time() >= $expiretime)
	{
		print "Session $sess has expired (expiretime)\n"
			if $show_expired_sessions;
		$has_expired = 1;
	} elsif (time() - $stat[9] >= &DBDefs::WEB_SESSION_SECONDS_TO_LIVE) {
		print "Session $sess has expired (stat)\n"
			if $show_expired_sessions;
		$has_expired = 1;
	} else {
		print "Session $sess has not expired\n"
			if $show_alive_sessions;
	}

	if ($has_expired and $expire)
	{
		my $ok = eval {
			tied(%session)->delete;
			1;
		};
		if (not $ok)
		{
			print "Failed to remove session $sess ($@)\n";
			unlink $file if $fForce;
		}
		$ok ? ++$removed : ++$failed;
		unlink "$lockdir/Apache-Session-$sess.lock" or $!{ENOENT}
			or warn "Failed to remove $sess lock file: $!\n";
	}

	untie %session;
}

sub remove_orphaned_locks
{
	chdir $lockdir or die $!;
	my ($inuse, $removed, $failed) = (0, 0, 0);

	for my $file (<Apache-Session-*.lock>)
	{
		(my $sess) = $file =~ /^Apache-Session-(\w+)\.lock$/
			or next;
		++$inuse, next if -f "$sessdir/$sess";
		push @remove, $file;
	}

	if (@remove and not $inuse)
	{
		warn "All locks are to be removed - maybe we're looking for the wrong filenames?\n";
		return;
	}

	for my $file (@remove)
	{
		if (unlink $file)
		{
			++$removed;
			next;
		}

		next if $!{ENOENT};

		warn "unlink $file: $!\n";
		++$failed;
	}

	printf "Removed:%d  Failed:%d\n", $removed, $failed if -t STDOUT;
}

# eof RemoveOldSessions

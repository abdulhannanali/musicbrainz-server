#!/home/httpd/musicbrainz/mb_server/cgi-bin/perl -w
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 1998 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use FindBin;
use lib "$FindBin::Bin/../cgi-bin";

use DBI;
use MusicBrainz;
use MusicBrainz::Server::Cache;

my $fix = 1;
my $fix_if_gt_than = 0;
my $polls = 100;
my $wait = 5;
my $verbose = -t;

use Getopt::Long;
GetOptions(
	"fix!"		=> \$fix,
	"polls=i"	=> \$polls,
	"wait=i"	=> \$wait,
	"verbose!"	=> \$verbose,
	"threshold=i"	=> \$fix_if_gt_than,
) or exit 2;
die if @ARGV;

$| = 1 if $verbose;

my $c = "MusicBrainz::Server::Cache";
my $lockfile = "/tmp/disable-trm-gateway";

# Do we need to reset it?
my $min = undef;
my $sent = 0;
while ($sent < $polls)
{
	my $value = $c->get("sigservers");
	++$sent;
	print "$value " if $verbose;
	defined($value) or next;
	$min = $value
		if not defined($min)
		or $value < $min;
	last if $min == 0; # < $fix_if_gt_than;
} continue {
	select(undef, undef, undef, 0.25);
}

print "\n" if $verbose;

printf "Min polled value over %d requests was %d\n", $sent, $min;

if ($min <= $fix_if_gt_than)
{
	print "Counter does not need resetting\n";
	exit;
}

if (not $fix)
{
	print "Not fixing\n";
	exit 1;
}

open(my $fh, ">$lockfile") or die "open: $!";
sleep $wait;
printf "After %d-second sleep, count was %s\n", $wait, $c->get("sigservers");
$c->set("sigservers", 0) or warn "failed to set memcached key\n";
unlink $lockfile or die "unlink: $!";

exit 1;

# eof

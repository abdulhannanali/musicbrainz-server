#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#	MusicBrainz -- the open music metadata database
#
#	Copyright (C) 2001 Robert Kaye
#
#	This program is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; either version 2 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program; if not, write to the Free Software
#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#	$id: $
#____________________________________________________________________________


use strict;

use FindBin;
use lib "$FindBin::Bin/../cgi-bin";

use MusicBrainz::Server::CollectionInfo;
use MusicBrainz::Server::Release;
use Data::Dumper;


# log in
require MusicBrainz;
my $mbraw = MusicBrainz->new();
$mbraw->Login(db => 'RAWDATA');
my $mbro = MusicBrainz->new();
$mbro->Login();


# set up SQL identifiers
my $sqlraw = Sql->new($mbraw->{DBH});
my $sqlro = Sql->new($mbro->{DBH});


# select all collections that shall receive notifications by e-mail
my $collections = $sqlraw->SelectSingleColumnArray('SELECT id FROM collection_info WHERE emailnotifications = TRUE');

print 'collections:'.Dumper($collections);

# iterate over all collections to be notified and send out e-mails(if any new releases)
foreach my $currentCollectionId (@$collections)
{
	use MusicBrainz::Server::CollectionPreference;
	my $currentPreferences = MusicBrainz::Server::CollectionPreference->new($mbro->{DBH}, $mbraw->{DBH}, MusicBrainz::Server::CollectionInfo::GetUserIdForCollection($currentCollectionId, $mbraw->{DBH}));
	
	my $currentCollection = MusicBrainz::Server::CollectionInfo->newFromCollectionId($currentCollectionId, $mbro->{DBH}, $mbraw->{DBH}, $currentPreferences);
	
	# get new releases
	my $newReleases = $currentCollection->GetNewReleases();
	
	# update the lastcheck attribute of the collection_info table
	$currentCollection->UpdateLastCheck();
	
	my $count = @{$newReleases};
	
	#print Dumper($newReleases);
	
	my $userId = $currentCollection->GetUserId();
	
	print "count: $count \n";
	
	if($count>0) # notifications should be sent
	{
		print 'SENDING NOTIFICATION';
		sendMail($currentCollection, $newReleases, $userId, $mbro->{DBH});
	}
}


exit 1;


sub sendMail
{
	my ($collectionId, $releaseIds, $userId, $rodbh) = @_;
	
	#my $user = UserStuff->newFromId();
	
	print Dumper(@$releaseIds);
	my $subject = 'New releases';
	my $message = '<html><body>The following releases are about to be released:<br/>';
	
	
	for my $releaseId (@{$releaseIds})
	{
		my $release = MusicBrainz::Server::Release->new($rodbh);
		$release->SetId($releaseId);
		$release->LoadFromId();
		
		
		print $release->GetName()."\n";
		
		$message = $message . '<a href="' . $release->GetInfoURL() . '">' . $release->GetName() . '</a><br/>';
	}
	
	
	# finish message
	$message = $message . '<br/><br/>This e-mail was automatically generated by test.musibrainz.org because you have subscribed to be notified on new releases of selected artists. If you want to unsubscribe go to <a href="http://test.musicbrainz.org/user/collectionpreferences.html">http://test.musicbrainz.org/user/collectionpreferences.html</a><br/></body></html>';
	
	
	require UserStuff;
	my $user = UserStuff->new($rodbh);
	$user = $user->newFromId($userId);
	


	require MusicBrainz::Server::Mail;
	my $mail = MusicBrainz::Server::Mail->new(
		# Sender: not required
		From		=> 'MusicBrainz Collection Robot <noreply@musicbrainz.org>',
		# To: $user (automatic)
		"Reply-To"	=> 'MusicBrainz Support <support@musicbrainz.org>',
		Subject		=> "New releases",
		Type		=> "text/html",
		Encoding	=> "quoted-printable",
		Data		=> $message,
	);
    $mail->attr("content-type.charset" => "utf-8");


	#$user->SendFormattedEmail(entity => $mail);
	
	
	print $message;
}


=head1 NAME
	SendReleaseNotifications - Send e-mail notifications about new releases
	
	=head1 DESCRIPTION
	Iterate over all users who have selected to have e-mail notifications sent and notify them by email about new releases.

	=cut
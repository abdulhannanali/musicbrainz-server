#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 2005 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use strict;

use FindBin;
use lib "$FindBin::Bin/../cgi-bin";

use MusicBrainz;
use Sql;
use MusicBrainz::Server::Language;

use constant MAX_TOP_LANGUAGES => 20;

# Always include the six official UN languages and the "Multiple languages"
# pseudo language.
# 
use constant PRESELECTED_LANGUAGES => qw (
	ara eng fra spa rus zho mul
);


my $mb = MusicBrainz->new();
$mb->Login();

my $sql = Sql->new($mb->{DBH});

#
# Set the frequency attribute of the language table.
#

my %languages = ( );

foreach my $code ( PRESELECTED_LANGUAGES )
{
	my $lang = MusicBrainz::Server::Language->newFromISOCode3T(
		$mb->{DBH}, $code);

	$languages{ $lang->GetId() } = 1;
}

#
# Calculate language frequencies
#

$sql->Select(<<'EOF', MAX_TOP_LANGUAGES + scalar(PRESELECTED_LANGUAGES));
	SELECT		language, COUNT(*)
	FROM		album
	WHERE NOT	language IS NULL
	GROUP BY	language
	ORDER BY	COUNT(*) DESC
	LIMIT		?;
EOF


# put at most MAX_TOP_LANGUAGES into %languages
while ( my ($language, $count) = $sql->NextRow() )
{
	last if keys(%languages) >= MAX_TOP_LANGUAGES;

	$languages{ $language } = 1;
}

$sql->Finish();

print 'New top languages: ', join(' ', keys %languages), "\n";

#
# Start transaction here. No strict isolation required up to now.
#

eval
{
	$sql->Begin;

	my $top_languages = join(',', grep { m/^\d+$/ } keys %languages);

	# ignore languages with a frequency of 0 (never displayed in the UI)

	# reset current top languages to frequency 1 (default frequency)
	$sql->Do('UPDATE language SET frequency = 1 WHERE frequency = 2');

	# set new top languages to 2 (displayed in the short list)
	$sql->Do("UPDATE language SET frequency = 2 WHERE id IN ($top_languages)");

	$sql->Commit;
};

if ($@)
{
	print "ERROR: Setting frequencies didn't work\n";
	$sql->Rollback();
	exit 1;
}


#
# TODO: Invalidate memcached entries to use the new values sooner.
#

# eof SetLanguageFrequencies

#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#	MusicBrainz -- the open internet music database
#
#	Copyright (C) 1998 Robert Kaye
#
#	This program is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; either version 2 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program; if not, write to the Free Software
#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#	$Id$
#____________________________________________________________________________

use FindBin;
use lib "$FindBin::Bin/../../cgi-bin";

use strict;
use DBDefs;
use Sql;
use Data::Dumper;
use MusicBrainz;
use TableBase;

my %tree;

sub insert
{
   my ($path, $tree, $name, $count, $desc) = @_;

   if (scalar(@$path) == 1)
   {
       $tree->{$path->[0]} = { _parent=>$tree, _name=>$name, _count=>$count, _desc=>$desc };
	   return;
   }
  
   my $off = shift @$path;
   insert($path, $tree->{$off}, $name, $count, $desc);
}

sub writeTree
{
	my ($sql, $tree, $level, $id, $parent) = @_;

	if ($level == -1)
	{
        $sql->Do("INSERT INTO link_attribute_type (id, parent, childorder, mbid, name, description) values (?, ?, ?, ?, ?, ?)",
      	     	 0, 0, 0, TableBase::CreateNewGlobalId(), 'ROOT', '');
	}

	my @s;
	foreach my $key (keys %$tree)
	{
		next if ($key =~ /^_/);
		push @s, $key;
	}

	my $childorder = 0;
    foreach my $key (sort { $tree->{$a}->{_count} <=> $tree->{$b}->{_count} } @s)
	{
		next if ($key =~ /^_/);

		my $desc = $tree->{$key}->{_desc};
        $sql->Do("INSERT INTO link_attribute_type (id, parent, childorder, mbid, name, description) values (?, ?, ?, ?, ?, ?)",
      	     	 $id, $parent, $childorder, TableBase::CreateNewGlobalId(), $key, $desc);
		$id++;
		$id = writeTree($sql, $tree->{$key}, $level+1, $id, $id - 1);
		$childorder++;
	}

	return $id;
}

my $line;
my $cur = \%tree;
my $level = -1;
my @path;
my $count = 0;
while(defined($line = <>))
{
	$line =~ s/\s*$//g;
	next if (!$line);
	next if ($line =~ /^#/);

	my $name = $line;
	my $desc = $line;
	if ($desc =~ /\[(.*?)\]/)
	{
		$desc = $1;
	}
	else
	{
	    $desc = "";
	}

	my $ind;
	$name =~ s/\s*\[.*\]\s*//g;
    if ($line =~ s/^(\s*)//)
	{
		$ind = length($1);
	}
	else
	{
		$ind = 0;
	}
	$ind /= 2;

	if ($ind == $level)
	{
	    pop @path;
	    push @path, $name;
	}
	elsif ($ind > $level)
	{
		$level++;
	    push @path, $name;
	} 
	elsif ($ind < $level)
	{
		for(0..($level - $ind))
		{
			pop @path;
			$level--;
		}
		push @path, $name;
		$level++;
	}

    #foreach (0..$level) { print "  "; };
    #print "Add: /" . join('/', @path) . "\n";

	print "$desc\n";
	insert([@path], \%tree, $name, $count++, $desc);
}

my $mb = MusicBrainz->new;
$mb->Login;
my $sql = Sql->new($mb->{DBH});

#use Data::Dumper;
#print Dumper(\%tree);

$sql->Begin();
writeTree($sql, \%tree, -1, 1, 0);
$sql->Commit();

#!/home/httpd/musicbrainz/mb_server/cgi-bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- The community music metadata project.
#
#   Copyright (C) 1998 Robert Kaye
#   Copyright (C) 2001 Luke Harless
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use 5.008;
use strict;

use FindBin;
use lib "$FindBin::Bin/../../cgi-bin";

use Encode qw( decode );
use Getopt::Long;

use DBDefs;
use MusicBrainz;
use Sql;
use TableBase;

my %do = map { $_=>1 } qw( artist album );
my $fVerbose = -t;
my $fFix = 1;
my $fHelp = 0;

GetOptions(
	"artist!"	=> \$do{'artist'},
	"album!"	=> \$do{'album'},
	"verbose!"	=> \$fVerbose,
	"fix!"		=> \$fFix,
	"help!"		=> \$fHelp,
) or exit 2;

$fHelp = 1 if @ARGV;
$fHelp = 1 unless grep {$_} values %do;
$fHelp = 1 unless $fVerbose or $fFix;

print(<<EOF), exit if $fHelp;
Usage: FixPageIndexValues [OPTIONS]

        --help            show this help
        --[no]artist      [don't] process artists
        --[no]album       [don't] process albums
        --[no]verbose     [don't] describe each change
        --[no]fix         [don't] fix incorrect values

Running with --noartist --noalbum is pointless.
Running with --noverbose --nofix is pointless.

EOF

my $mbRead = new MusicBrainz;
$mbRead->Login;
my $sqlRead = Sql->new($mbRead->{DBH});

my $mbWrite = new MusicBrainz;
$mbWrite->Login;
my $sqlWrite = Sql->new($mbWrite->{DBH});

my $tb = TableBase->new($mbRead->{DBH});

Process("album", "name") if $do{"album"};
Process("artist", "sortname") if $do{"artist"};

sub Process
{
	my ($table, $namecol) = @_;

	my ($ok, $wrong, $fixed, $failed) = (0, 0, 0, 0);
	$sqlRead->Select("SELECT id, $namecol, page FROM $table");

	while (my ($id, $name, $page) = $sqlRead->NextRow)
	{
		my $correctpage = $tb->CalculatePageIndex($name);
		++$ok, next if $page == $correctpage;

		printf "%s #%d '%s' : %s => %s\n",
			$table, $id, decode("utf-8", $name),
			page_index_to_string($page),
			page_index_to_string($correctpage),
			if $fVerbose;

		++$wrong;

		$fFix or next;

		eval {
			$sqlWrite->Begin;
			$sqlWrite->Do(
				"UPDATE $table SET page = ? WHERE id = ? AND page = ? AND $namecol = ?",
				$correctpage, $id, $page, $name,
			) or die "Failed to update $table #$id";
			$sqlWrite->Commit;
		};

		++$fixed, next unless $@;

		printf STDERR "Error fixing %s #%d: %s\n",
			$table, $id, $@;

		if (not $sqlWrite->{DBH}->{AutoCommit})
		{
			$sqlWrite->Rollback;
		}

		++$failed;
	}

	printf "%s: already ok = %d; wrong = %d; fixed = %d; failed = %d\n",
		$table, $ok, $wrong, $fixed, $failed;
}

sub page_index_to_string
{
	my $i = shift;
	my @n;

	while ($i > 0)
	{
		unshift @n, ($i & 0x1F);
		$i >>=5;
	}

	my @c = map {
		$_ == 0 ? "_" :
		$_ == 1 ? "*" :
		chr(ord('A')-2+$_)
	} @n;

	join "", @c;
}

# eof FixPageIndexValues

#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 1998 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use 5.008;
use strict;

use FindBin;
use lib "$FindBin::Bin/../../cgi-bin";

use Encode qw( encode decode FB_CROAK );
use Getopt::Long;

use DBI;
use DBDefs;
use MusicBrainz;
use Sql;
use ModDefs;
use UserStuff;

my $mb = MusicBrainz->new;
$mb->Login;
my $sql = Sql->new($mb->{DBH});

my $mb2 = MusicBrainz->new;
$mb2->Login;
my $sqlWrite = Sql->new($mb2->{DBH});

my $use_auto_mod = 1;
my $moderator = ModDefs::MODBOT_MODERATOR;
my $do_artist = 1;
my $do_artistalias = 1;
my $do_album = 1;
my $do_track = 1;
my $help = 0;
my $fixfile = undef;
my $debug = 0;

GetOptions(
	"automod!"		=> \$use_auto_mod,
	"moderator=s"	=> sub {
		my $user = $_[1];
		my $u = UserStuff->new($mb->{DBH});
		(undef, my $uid) = $u->GetUserPasswordAndId($user);
		$uid or die "No such moderator '$user'";
		$moderator = $uid;
	},
	"artist!"		=> \$do_artist,
	"artistalias!"	=> \$do_artistalias,
	"album!"		=> \$do_album,
	"track!"		=> \$do_track,
	"fixfile=s"		=> \$fixfile,
	"debug!"		=> \$debug,
	"help"			=> \$help,
) or $help = 1;

$help = 1 if @ARGV;

die <<EOF if $help;
Usage: SmartQuotes [OPTIONS]

Allowed options are:
        --[no]automod     [don't] automod the inserted moderations
                          (default is to automod)
        --moderator=NAME  insert the moderations as moderator NAME
                          (default is the 'ModBot')
        --[no]artist      [don't] process the artist table
        --[no]artistalias [don't] process the artistalias table
        --[no]album       [don't] process the album table
        --[no]track       [don't] process the track table
        --fixfile=FILE    fix the words named in FILE
        --help            show this help

Run SmartQuotes once without a 'fixfile' argument to produce a list of words
to fix.  Save and edit that list, then run SmartQuotes again, specifying
the saved list using --fixfile=FILE.

EOF

my $smartquote = chr(180);
my $smartquote_enc = encode "utf-8", $smartquote;
my $backtick = '`';

my %tofix;

if (defined $fixfile)
{
	@ARGV = ($fixfile);

	while (<>)
	{
		while (/\b(\w+(?:(?:$smartquote|$backtick)\w+)+)\b/g)
		{
			$tofix{$1} = 0;
		}
	}

	printf "Fixing %d distinct words\n", scalar keys %tofix;
}

my %words;
my %types;

my $privs = UserStuff::BOT_FLAG;
$privs |= UserStuff::AUTOMOD_FLAG if $use_auto_mod;

for (
	[ ModDefs::MOD_EDIT_ARTISTNAME, "artist.name.id" ],
	[ ModDefs::MOD_EDIT_ARTISTSORTNAME, "artist.sortname.id" ],
	[ undef, "artistalias.name.ref" ],
	[ ModDefs::MOD_EDIT_ALBUMNAME, "album.name.artist" ],
	[ ModDefs::MOD_EDIT_TRACKNAME, "track.name.artist" ],
) {
	my $modtype = $_->[0];
	my ($table, $column, $artistcol) = split /\./, $_->[1];

	{ no strict 'refs'; ${"do_$table"} or next; }

	$sql->Select(
		"SELECT id, $column, $artistcol FROM $table WHERE $column ~ ? OR $column ~ ?",
		$smartquote_enc,
		$backtick,
	);

	local $SIG{INT} = sub { die "SIGINT\n" };

	while (my ($id, $name, $artistid) = $sql->NextRow)
	{
		$name = decode "utf-8", $name, FB_CROAK;
		my $oname = $name;
		
		while ($name =~ /\b(\w+(?:(?:$smartquote|$backtick)\w+)+)\b/g)
		{
			my $word = $1;
			++$words{lc $word};

			if (exists $tofix{lc $word})
			{
				print "Fix $word\n" if $debug;
				(my $newword = $word) =~ s/(?:$smartquote|$backtick)/'/g;
				$name =~ s/\b$word\b/$newword/g;
			} else {
				print "Don't fix $word\n" if defined $fixfile and $debug;
			}
		}

		if ($oname ne $name)
		{
			$sqlWrite->Begin;
			
			unless ($table eq "artistalias")
			{
				use Moderation;
				my $m = Moderation->new($sqlWrite->{DBH});

				$m->SetType($modtype);
				$m->SetArtist($artistid);
				$m->SetTable(ucfirst $table);
				$m->SetColumn(ucfirst $column);
				$m->SetRowId($id);
				$m->SetPrev(encode "utf-8", $oname);
				$m->SetNew(encode "utf-8", $name);
				$m->SetModerator($moderator);
				$m->SetDepMod(0);

				my $modid = $m->InsertModeration($privs);
				print "Inserted mod #$modid ($oname => $name)\n";
				++$types{$modtype};
			}
			else
			{
				# Since MOD_REMOVE_ARTISTALIAS is never auto-moderated,
				# it's possible that one or both of these moderations already
				# exists for this artist.
				# Check that these mods aren't already present
				# before adding them.

				next if $sqlWrite->SelectSingleValue(
					"SELECT COUNT(*)
					FROM moderation
					WHERE artist = ?
					AND type IN (?,?)
					AND status = ?",
					$artistid,
					ModDefs::MOD_REMOVE_ARTISTALIAS,
					ModDefs::MOD_ADD_ARTISTALIAS,
					ModDefs::STATUS_OPEN,
				);

				my $m1 = Moderation->new($sqlWrite->{DBH});
				my $m2 = Moderation->new($sqlWrite->{DBH});

				$m1->SetType(ModDefs::MOD_REMOVE_ARTISTALIAS);
				$m1->SetArtist($artistid);
				$m1->SetTable(ucfirst $table);
				$m1->SetColumn(ucfirst $column);
				$m1->SetRowId($id);
				$m1->SetPrev(encode "utf-8", $oname);
				$m1->SetNew("");
				$m1->SetModerator($moderator);
				$m1->SetDepMod(0);
				my $modid1 = $m1->InsertModeration($privs);
				++$types{ModDefs::MOD_REMOVE_ARTISTALIAS};

				$m2->SetType(ModDefs::MOD_ADD_ARTISTALIAS);
				$m2->SetArtist($artistid);
				$m2->SetTable(ucfirst $table);
				$m2->SetColumn(ucfirst $column);
				$m2->SetRowId($artistid);
				$m2->SetPrev("");
				$m2->SetNew(encode "utf-8", $name);
				$m2->SetModerator($moderator);
				$m2->SetDepMod($modid1);

				my $modid2 = $m2->InsertModeration($privs);
				++$types{ModDefs::MOD_ADD_ARTISTALIAS};

				print "Inserted mods #$modid1 and #$modid2 ($oname => $name)\n";
			}

			$sqlWrite->Commit;
		}
	}

	$sql->Finish;
}

if (%types)
{
	print "Entered the following moderations:\n";
	printf "  Type %2d : %d\n", $_, $types{$_}
		for sort { $a <=> $b } keys %types;
}

if (not defined $fixfile)
{
	printf "%12d  %s\n", $words{$_}, $_
		for sort { $words{$a} <=> $words{$b} } keys %words;
}

# eof SmartQuotes

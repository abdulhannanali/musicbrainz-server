#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 1998 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

use 5.008;
use strict;

use FindBin;
use lib "$FindBin::Bin/../../cgi-bin";

use DBI;
use DBDefs;
use ModDefs;
use MusicBrainz;
use Sql;

use Getopt::Long;
my $verbose = -t;
my $dir;
GetOptions(
	"output-dir=s"	=> \$dir,
	"verbose!"		=> \$verbose,
) or exit 2;
die "Bad options\n" if @ARGV;
die "Bad options\n" if not defined $dir;

$verbose
	? open(LOG, ">&STDOUT")
	: open(LOG, ">/dev/null");

#
# Try to fix the track name. Returns the track name that was passed in if
# none of the heuristics worked.
#
sub rewrite_name($)
{
	my $oldname = shift;
	my $newname = $oldname;

	#
	# Check the most simple cases:
	# 	"track name (featuring artist)",
	#	"track name [ft artist]" and the like
	#
	$newname =~ s/^
			(.*?)				# track name
			\s+				# space
			[[(]\s*
			(?:featuring|feat|ft|with)\.?\s+
			(.*?)				# artist name
			[])]
			(.*)$				# mix info etc.
		/
			"$1 (feat. $2)$3"
		/xoie;

	return $newname if $newname ne $oldname;		# change done


	#
	# So far for the trivial case. There is more we can change
	# using a simple heuristic. But first we have to get rid of
	# track names that are too complicated or broken.
	#

	# If the track name contains a slash, colon or hyphen that is
	# not followed by a featuring artist, we probably found
	# something that needs to be converted to VA.
	# Believe me, it's a lot.
	#
	return $newname if $oldname =~ m@ [-:/] (?!(featuring|feat|ft)\.?\s+)@i;


	# The next ugly thing:
	# 	track name (remix info feat. artist)
	# 	track name (main artist feat. artist)
	#
	# We can't handle this automatically.
	#
	return $newname if $oldname =~ m@\([^)]+?(featuring|feat|ft)\.?\s+@i;

	# If there's remix or version information in the track, our
	# simple heuristic below won't work. We have to leave these
	# tracks for manual conversion. Few entries are caught by
	# this one.
	#
	return $newname if $oldname =~ m/\W(remix|mix|rmx|version)\W/i;

	#
	# The heuristic catches the following
	#	Track name featuring
	#	Track name - featuring ...
	#
	$newname =~ s/^
			(.*?)				# track name
			(?:\s+-)?
			\s+
			(?:featuring|feat|ft)
			(?:\.\s*|\s+)
			(.*)				# artist
		$
		/
			 "$1 (feat. $2)"
		/xoie;

	return $newname if $newname ne $oldname;		# change done

	#
	# Add more ...
	#

	return $newname;
}

#
# MAIN
#

my $mb = MusicBrainz->new;
$mb->Login;
my $sql = Sql->new($mb->{DBH});

print LOG localtime() . " : Opening report file\n";
use MusicBrainz::Server::PagedReport;
my $report = MusicBrainz::Server::PagedReport->Save(
	"$dir/report"
);

print LOG localtime() . " : Querying database\n";
$sql->Select(<<EOF, &ModDefs::STATUS_OPEN, &ModDefs::MOD_EDIT_TRACKNAME) or die;
        SELECT t.id, t.name, aj.album, ar.id, ar.name
	FROM track t, artist ar, albumjoin aj
        WHERE t.artist = ar.id AND aj.track = t.id AND NOT EXISTS (
                SELECT id FROM moderation m
                WHERE m.rowid = t.id AND m.status = ? AND m.type = ?
        )
          AND ( t.name ~* '[[(]feat[^.]' OR t.name ~* ' feat'
			OR t.name ~* '[[( ]ft' OR t.name ~* '[[(]with ' )
	ORDER BY ar.sortname, t.name
EOF

print LOG localtime() . " : Saving results\n";
while (my @row = $sql->NextRow)
{
	my ($track_id, $track_name, $album_id, $artist_id, $artist_name) = @row;

	# Remove false positives.
	#
	next if $track_name !~ m/\b(ft|feat|featuring|with)\b/i;

	my $newname = rewrite_name $track_name;
	$newname = undef if $newname eq $track_name;

	$report->Print(
		+{
			artist_id	=> $artist_id,
			artist_name	=> $artist_name,
			album_id	=> $album_id,
			track_id	=> $track_id,
			track_name	=> $track_name,
			new_name	=> $newname,
		},
	);
}

print LOG localtime() . " : Finishing\n";
$sql->Finish;
$report->End;

print LOG localtime() . " : Copying Mason file\n";
use File::Copy qw( copy );
copy("$FindBin::Bin/FeaturingArtists.inc", "$dir/index.html")
	or die $!;

print LOG localtime() . " : Done\n";

# eof FeaturingArtists

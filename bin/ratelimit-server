#!/usr/bin/perl
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 1998 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#	This script originally by Dave Evans.
#____________________________________________________________________________

use warnings;
use strict;

=pod

There is no hash size management (auto-deletion of expired data) in this
server.  I suggest you run this with an appropriate memory limit, and set
it to respawn when it runs out of memory and terminates.

Also note that there is NO SECURITY built into this system (e.g. this server
neither knows nor cares who is making the requests) - which is why its use is
disabled by default.

=cut

@ARGV == 1 or die "Usage: $0 PORT\n";
my ($port) = @ARGV;

my $verbose = $ENV{VERBOSE};

use IO::Socket::INET;
my $sock = IO::Socket::INET->new(
	Proto => 'udp',
	LocalPort => $port,
	LocalAddr => 'localhost',
);

my $stop = 0;
$SIG{TERM} = sub { $stop = 1 };
$SIG{INT} = $SIG{TERM} if -t;

$| = 1;
print "starting\n";

for (;;)
{
	last if $stop;

	my $request;
	my $peer = recv($sock, $request, 1000, 0);
	if (not defined $peer)
	{
		next if $!{EINTR};
		die "recv: $!";
	}

	print ">> $request\n"
		if $verbose;
	my $reply = process_request($request, $peer);
	if (not defined $reply)
	{
		print "no reply\n";
		next;
	}
	print "<< $reply (>> $request)\n";

	my $r = send($sock, $reply, 0, $peer);
	defined($r) or die "send: $!";
}

print "exiting\n";

exit;

sub process_request
{
	my ($request, $peer) = @_;

	my $id;
	if ($request =~ /\A(\d+) (.*)/s)
	{
		$id = $1;
		$request = $2;
	}

	my $response = process_request_2($request, $peer);

	$response = "$id $response" if defined $id;

	return $response;
}

sub process_request_2
{
	my ($request, $peer) = @_;

	if ($request =~ /^over_limit (.*)$/)
	{
		my $key = $1;

		# The server - that's us - gets to decide what limits to impose for
		# each key.  The idea is that this makes it easier to adjust the
		# limits on the fly - simply tweak this script and restart it.

		my ($over_limit, $rate, $limit, $period, $strict);

		{
			# MusicBrainz::Server::Mason
			($limit, $period, $strict) = (13, 10, 1), last
				if $key =~ /^mason ip=(\d+\.\d+\.\d+\.\d+)$/;

			# MusicBrainz::Server::Handlers::WS::1::Common
			($limit, $period, $strict) = (13, 10, 1), last
				if $key =~ /^ws ip=(\d+\.\d+\.\d+\.\d+)$/;

			# MusicBrainz::Server::Handlers::WS::1::Common
			($limit, $period, $strict) = (500, 10, 0), last
				if $key =~ /^ws global$/;

			# Default is to allow everything
			($over_limit, $rate, $limit, $period) = (0, 0, 1, 1);
		}

		($over_limit, $rate) = do_ratelimit($limit, $period, $key, 1, $strict)
			if not defined $over_limit;

		return sprintf "ok %s %.1f %.1f %d",
			($over_limit ? "Y" : "N"), $rate, $limit, $period;
	}
	elsif ($request =~ /^get_size$/)
	{
		return get_size();
	}

	return undef;
}

use Carp qw( croak );

# At the moment the data store is all in memory, though this could easily be
# changed to something DBM-ish if that proves necessary.
my %hash;

sub get_size
{
	sprintf "size=%s keys=%d", scalar(%hash), scalar(keys %hash);
}

# Idea and logic stolen from exim4 (acl.c, acl_ratelimit)
sub do_ratelimit
{
	my ($limit, $period, $key, $use, $strict) = @_;
	$use = 1 if not defined $use;
	$period > 0 or croak "Bad period";

	printf "ratelimit condition limit=%.0f period=%.0f key=%s\n",
		$limit, $period, $key,
		if $verbose;

	use Time::HiRes qw( time );
	my $now = time();

	my $dbd_time;
	my $dbd_rate;

	if (not(my $data = $hash{$key}))
	{
		printf "ratelimit initializing new key's data\n"
			if $verbose;
		$dbd_time = $now;
		$dbd_rate = 0;
	}
	else
	{
		($dbd_time, $dbd_rate) = @$data;

		my $interval = $now - $dbd_time;
		$interval = 1E-9 if $interval <= 0;

		my $i_over_p = $interval / $period;
		my $a = exp(-$i_over_p);

		$dbd_time = $now;
		$dbd_rate = $use * (1 - $a) / $i_over_p + $a * $dbd_rate;
	}

	my $over_limit = ($dbd_rate >= $limit);

	if (not $over_limit or $strict)
	{
		$hash{$key} = [ $dbd_time, $dbd_rate ];
	}

	printf "ratelimit computed rate=%s key=%s\n", $dbd_rate, $key
		if $verbose;

	return(wantarray ? ($over_limit, $dbd_rate) : $over_limit);
}

# eof ratelimit-server

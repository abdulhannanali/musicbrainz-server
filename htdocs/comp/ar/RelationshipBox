<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Shows the box of relationships
	#
	# $Id$
	#
</%perl>
<%args>

	$id
	$type
	$name
	$modlinks => 0
	$isrelpage => 0
	$expanded => 0
    $release => 0

</%args>

%# RAK: Is this still being called?? Looks like it got superceded by /comp/relationship/outputentity
<%def .OutputEntity>
<%perl>
	my ($item, $index, $name, $release) = @_;

	my $prefix = "link" . $index . "_";

	$m->out('<span class="mp">')
		if $item->{modpending};

    my $text = "";
	if ($item->{$prefix . "type"} eq 'url')
	{
		if ($item->{"link_name"} eq 'amazon asin' && $prefix eq 'link1_')
		{
		    ($text,, ) = Album->ParseAmazonURL($item->{link1_name});
			$m->out("<b>");
		}
		else
		{
			use Encode;
			my $url = $item->{$prefix . "name"};
			$text = $url;
			if ($item->{"link_name"} eq 'wikipedia' && $prefix eq 'link1_')
			{
				$text =~ s/^http:\/\/(\w{2,})\.wikipedia\.org\/wiki\/(.*)$/$1: $2/o;
				$text =~ tr/_/ /;
			}
			# decode the URL
			my $decoded_text = $text;
			$decoded_text =~ s/\%([\dA-Fa-f]{2})/pack('C', hex($1))/oeg;
			eval { Encode::decode_utf8($decoded_text, Encode::FB_CROAK); };
			$text = $decoded_text if !$@;
			$m->out('<b><a href="'.$url.'" title="'.encode_entities($text).'" rel="nofollow">');
			# shorten url's that are longer than ~75 chars
			$text = (length($text) > 75
					 ? encode_entities(substr($text, 0, 72)) . "&#8230;"
					 : encode_entities($text));
		}
	}
	else
	{
		$m->out('<b><a href="/show'.
				$item->{$prefix . "type"} . '.html?'.
				$item->{$prefix . "type"} . 'id=' .
				$item->{$prefix . "id"}.'">');
	}
	$text = encode_entities($item->{$prefix . "name"} eq '' ? $name : $item->{$prefix . "name"}) unless $text;

	$m->out($text);
	$m->out("</a></b>");

	$m->out('</span>')
		if $item->{modpending};
</%perl>
</%def>

<div class="RelationshipBox">

<%perl>

my $_isEqual = sub {
	my ($a, $b) = @_;

	return ($a->{link_phrase} eq $b->{link_phrase} &&
			$a->{begindate} eq $b->{begindate} &&
			$a->{enddate} eq $b->{enddate});
};

my $mb = $m->comp("/comp/dblogin");
my @links = MusicBrainz::Server::Link->FindLinkedEntities($mb->{DBH}, $id, $type);

if (@links == 0)
{
	$m->out("This $type has no relationships.<br />");
}
else
{
	my $max = scalar(@links);
	my (@coll, $item, $i, $count, $lines);

	for($i = 0; $i < $max; $i++)
	{
		$item = $links[$i];
		if ($item->{link0_type} ne $type || $item->{link0_id} != $id)
		{
			@$item{qw(
				link0_type		link1_type
				link0_id		link1_id
				link0_name		link1_name
				link_phrase		rlink_phrase
			)} = @$item{qw(
				link1_type		link0_type
				link1_id		link0_id
				link1_name		link0_name
				rlink_phrase	link_phrase
			)};
		}
	}

	@links = sort
	{
		my $c = $a->{link_phrase} cmp $b->{link_phrase};
		return $c if ($c);
		$c = $a->{enddate} cmp $b->{enddate};
		return $c if ($c);
		$c = $a->{begindate} cmp $b->{begindate};
		return $c if ($c);
		return $a->{link1_name} cmp $b->{link1_name};
	} @links;

	$item = $links[0];
	$m->out('<span class="mp">')
		if ($max == 1 && $item->{modpending});

	# output current entity.
	$m->comp("/comp/relationship/outputentity", item => $item, index => 0, name => $name, release => $release);

	# output linked entities
	$m->out(($max > 1) ? ':<table width="100%">' : ' ');
	for($i = 0, $count = 0, $lines = 0; $i < $max; $i++, $lines++)
	{
	    my $itemsperline = 0;
		if ($lines >= 3 && !$isrelpage)
		{
			$m->out(qq!<tr><td colspan="3">!);
			$m->out(($max - $count) . " relationships not shown. ");

			my $typeshow = $type eq "album" ? "release" : $type;
			$m->out(sprintf qq!<a href="/show/%s/relationships.html?%sid=$id">View all relationships...</a>!,
					$typeshow,
					$typeshow);

			$m->out(qq!</td></tr>!);
			last;
		}
		$item = $links[$i];
		$m->out('<tr><td valign="top" align="center" width="5%">&bull;</td><td width="99%">') if ($max > 1);
		$m->out($item->{link_phrase} . " ");
		$m->comp("/comp/relationship/outputentity", item => $item, index => 1, name => $name, release => $release);
		$count++;

		if (!$expanded)
		{
			for(my $j = $i + 1; $j < $max; $j++)
			{
				my $nextitem = $links[$j];
				if (&$_isEqual($item, $nextitem))
				{
					if ($itemsperline <= 4 || $isrelpage)
					{
						my $and = 1;
						if ($j < $max - 1)
						{
							my $nextnextitem = $links[$j + 1];
							$and = 0 if (&$_isEqual($nextitem, $nextnextitem));
						}
						$and ? $m->out(' and ') : $m->out(', ');
						$m->comp("/comp/relationship/outputentity", item => $nextitem, index => 1, name => $name, release => $release);
						$m->out(" &#8230;") if ($itemsperline == 4) && !$and && !$isrelpage;
						$itemsperline++;
					}
					$i = $j;
					$count++;
				}
			}
		}

		if ($item->{begindate} =~ /\S/ || $item->{enddate} =~ /\S/)
		{
			my ($begindate, $has_begindate) = ($item->{begindate}, $item->{begindate} =~ /\S/);
			my ($enddate, $has_enddate) = ($item->{enddate}, $item->{enddate} =~ /\S/);

			if ($has_begindate && $has_enddate && $begindate eq $enddate)
			{
				# if we have a full date, including day, use "on", else
				# use range "during/in"
				$m->out($begindate =~ /\d+-\d+-\d+/ ? " on " : " during/in ");
				$m->out($begindate);
			}
			else
			{
				$m->out(" from $begindate") if ($has_begindate);
				$m->out($has_enddate ? " until $enddate" : " to present");
			}
		}
		$m->out('</span>')
			if ($max == 1 && $item->{modpending});
		if ($session{uid} && $modlinks && $expanded)
		{
			$m->out(($max > 1) ? '</td><td align="right" valign="top">' : '');
			$m->out('[&nbsp;<a href="/edit/relationship/remove.html?type=' . $item->{link0_type} . '-' .
					$item->{link1_type} . '&amp;id='.$item->{link_id}.'">Remove</a>&nbsp;');
			$m->out('|&nbsp;<a href="/edit/relationship/edit.html?type=' . $item->{link0_type} . '-' .
					$item->{link1_type} . '&amp;id='.$item->{link_id}.'">Edit</a>&nbsp;]');
		}
		$m->out(($max > 1) ? '</td></tr>' : '<br />');
	}
	$m->out('</table>') if ($max > 1);
	$m->out('<br />');
}
$m->comp('/comp/ar/ShowARLinks', id => $id, type => $type, isrelpage => $isrelpage,
								 expanded => $expanded, count => scalar(@links),
								 name => $name);

my $recent_links = ($session{recent_links} ||= []);
if (scalar(@$recent_links) == 0)
{
}
elsif (scalar(@$recent_links) == 1)
{
	</%perl>
	<hr>
	<p>
		Create a relationship with:
	</p>
	<ul>
		<li><& /comp/ar/ShowEntityLink, simple => 0,
			id => $recent_links->[0][1],
			type => $recent_links->[0][0],
			name => $recent_links->[0][2] &>
		 [ <& /comp/ar/ShowRemoveLink,
			targetid => $id,
			targettype => $type,
			id => $recent_links->[0][1],
			type => $recent_links->[0][0],
			name => $recent_links->[0][2],
			isrelpage => $isrelpage&> ]</li>
	</ul>

	<p>
	You have only selected one element.&nbsp; Please select another element
	that you want to relate to <b><% $recent_links->[0][2] %></b> by navigating to
	its page, then clicking on the <em>Use this ... in a relationship</em> link.
	</p>

	<p>
		[
% unless ($type eq "url") {
		<a href="/edit/relationship/addurl.html?id=<% $recent_links->[0][1] %>&amp;type=<% $recent_links->[0][0]
			%>&amp;name=<% uri_escape($recent_links->[0][2]) %>">Relate to URL</a> |
% }
% unless ($type eq $recent_links->[0][0] && $id == $recent_links->[0][1]) {
%		my $typename = ($type eq "url" ? "URL" : $type);
		<a href="/edit/relationship/add.html?link0=<%
			$type %>=<% $id %>&amp;link1=<%
			$recent_links->[0][0] %>=<% $recent_links->[0][1] %>">Create relationship with this <% $typename %></a> |
% }
		<& /comp/ar/ShowCancelLink, targetid => $id, targettype => $type, isrelpage => $isrelpage &>
		| <a href="/edit/artist/add.html">Add new artist</a>
		]

		<%perl>
}
elsif (scalar(@$recent_links) == 2)
{
	</%perl>
	<hr>
	<p>
		Create a relationship between:
	</p>
	<ul>
		<li><& /comp/ar/ShowEntityLink, simple => 0,
			id => $recent_links->[1][1],
			type => $recent_links->[1][0],
			name => $recent_links->[1][2] &>
			[ <& /comp/ar/ShowRemoveLink,
				targetid => $id,
				targettype => $type,
				id => $recent_links->[1][1],
				type => $recent_links->[1][0],
				name => $recent_links->[1][2],
				isrelpage => $isrelpage &> ]</li>
		<li><& /comp/ar/ShowEntityLink, simple => 0,
			id => $recent_links->[0][1],
			type => $recent_links->[0][0],
			name => $recent_links->[0][2] &>
			[ <& /comp/ar/ShowRemoveLink,
				targetid => $id,
				targettype => $type,
				id => $recent_links->[0][1],
				type => $recent_links->[0][0],
				name => $recent_links->[0][2],
				isrelpage => $isrelpage &> ]</li>
	</ul>

	<p>
		[ <a href="/edit/relationship/add.html?link0=<%
			$recent_links->[1][0] %>=<% $recent_links->[1][1] %>&amp;link1=<%
			$recent_links->[0][0] %>=<% $recent_links->[0][1] %>">Create relationship</a>
		| <& /comp/ar/ShowCancelLink, targetid => $id, targettype => $type, isrelpage => $isrelpage &>
%	if (UserStuff->IsLinkModerator($session{privs})) {
		| <a href="/edit/relationships/link_type_roots.html">Edit link types</a>
%	}
		| <a href="/edit/artist/add.html">Add new artist</a>
		]
	</p>
	<%perl>
}
else
{
	my $hi = @$recent_links - 1;
	</%perl>
	<hr>
	<p>
		You have selected more than two elements. The last two elements are:
	</p>
	<ul>
		<li><& /comp/ar/ShowEntityLink, simple => 0,
			id => $recent_links->[1][1],
			type => $recent_links->[1][0],
			name => $recent_links->[1][2] &>
			[ <& /comp/ar/ShowRemoveLink,
				targetid => $id,
				targettype => $type,
				id => $recent_links->[1][1],
				type => $recent_links->[1][0],
				name => $recent_links->[1][2],
				isrelpage => $isrelpage &> ]</li>
		<li><& /comp/ar/ShowEntityLink, simple => 0,
			id => $recent_links->[0][1],
			type => $recent_links->[0][0],
			name => $recent_links->[0][2] &>
			[ <& /comp/ar/ShowRemoveLink,
				targetid => $id,
				targettype => $type,
				id => $recent_links->[0][1],
				type => $recent_links->[0][0],
				name => $recent_links->[0][2],
				isrelpage => $isrelpage &> ]</li>
	</ul>

	<p>
		[ <a href="/edit/relationship/add.html?link0=<%
			$recent_links->[1][0] %>=<% $recent_links->[1][1] %>&amp;link1=<%
			$recent_links->[0][0] %>=<% $recent_links->[0][1] %>">Create relationship</a>
		| <a href="/edit/relationship/showelements.html">Show all elements</a>
		| <& /comp/ar/ShowCancelLink, targetid => $id, targettype => $type, isrelpage => $isrelpage &>
%	if (UserStuff->IsLinkModerator($session{privs})) {
		 | <a href="/edit/relationships/link_type_roots.html">Edit link types</a>
%	}
		| <a href="/edit/artist/add.html">Add new artist</a>
		]
	</p>
	<%perl>
}

</%perl>
</div>

%# vi: set ts=4 sw=4 ft=mason :

<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Render the artist title box.$
	#
	# $Id$
	#
</%perl>
<%args>

	$artist
	$link => 1				# -- deprecated

	$showlinks => undef		# show info links
	$showmodlinks => 1		# show editing links.
							# -- TODO: rename to showeditlinks

</%args>
<%perl>
	# Log on to the read only and raw databases
	my $mbro = $m->comp("/comp/dblogin");
	my $mbraw = MusicBrainz->new();
	$mbraw->Login(db => 'RAWDATA');

	# preferred way of calling this component,
	# backwards compability.
	$showlinks = defined $showlinks ? $showlinks : $link;

	my $id = $artist->GetId;
	my $mbid = $artist->GetMBId;
	my $name = $artist->GetName;
	my $sortname = $artist->GetSortName;
	my $type = $artist->GetType;
	my $type_name = MusicBrainz::Server::Artist::GetTypeName($type) || '';
	my $begin = $artist->GetBeginDate;
	my $end = $artist->GetEndDate;
	my $resolution = $artist->GetResolution;
	my $quality = ModDefs::GetQualityText($artist->GetQuality);
    $artist->LoadLastUpdate();
	my $lastupdate = "(updated " . MusicBrainz::Server::DateTime::format_datetime_since($artist->GetLastUpdate()) . ")";

	# compile begin- and end dates
	$begin = MusicBrainz::Server::Validation::MakeDisplayDateStr($begin);
	$end = MusicBrainz::Server::Validation::MakeDisplayDateStr($end);
	my $date_str = '';
	if ( $begin and $end )
	{
		$date_str = "$begin - $end";
	}
	elsif ( $begin )
	{
		$date_str = "Begin: $begin";
		$date_str = "Born: $begin" if $type == &MusicBrainz::Server::Artist::ARTIST_TYPE_PERSON;
		$date_str = "Founded: $begin" if $type == &MusicBrainz::Server::Artist::ARTIST_TYPE_GROUP;
	}
	elsif ( $end )
	{
		$date_str = "End: $end";
		$date_str = "Deceased: $end" if $type == &MusicBrainz::Server::Artist::ARTIST_TYPE_PERSON;
		$date_str = "Dissolved: $end" if $type == &MusicBrainz::Server::Artist::ARTIST_TYPE_GROUP;
	}

	$m->out(qq!<script type="text/javascript" src="/scripts/ratings.js"></script>!);

	$m->out(qq!<table class="artisttitle">!);

	# Row 1: the artist name (link) and sortname
	$m->out(qq!<tr valign="top">!);
	$m->out(qq!<td class="icon" rowspan="2">!);
	$m->out(qq!  <a href="/artist/$mbid.html" title="Go to the artist page"><img src="/images/aicon_lg.png" alt="" /></a></td>!);
	$m->out(qq!<td class="title">!);
	$m->out(qq!  <a href="/artist/$mbid.html" title="Go to the artist page">!);
	$m->out(qq!  <span class="mp">!) if ($artist->GetModPending);
	$m->out($m->interp->apply_escapes($name, 'h'));
	$m->out(qq!  </span>!) if ($artist->GetModPending);
	$m->out(qq!</a>!);
	$m->comp("/comp/ratingsbox", entity_type => "artist", entity_id => $id, detailled => 1);
	$m->out(qq!</td></tr>!);

	# Info box, a) resolution b) start-end date c) artist-type d) sortname
	$m->out('<tr><td class="info">');
	$m->out($m->interp->apply_escapes($resolution, 'h') . '<br />') if ($resolution);

	my @info;
    my $qtxt;
	push @info, "$date_str"
		if $date_str;
	push @info, "Type: $type_name"
		if $type;
	$qtxt = qq!<span class="mp">! 
        if ($artist->GetQualityModPending);
	$qtxt .= ucfirst($quality) . " data quality";
	$qtxt .= qq!</span>! 
        if ($artist->GetQualityModPending);


    push @info, $qtxt;
	$m->out(join(', ', @info));
	$m->out('<br />')
		if @info;

	$m->out($m->interp->apply_escapes($sortname, 'h'))
		if ($name ne $sortname);
	$m->out('</td></tr>');

	# Row 2: non-editing links
	if ($showlinks)
	{
		$m->out(qq!<tr>!);
		$m->out(qq!<td colspan="2" class="links">!);
		$m->out(qq!Info: [ !);

#		$m->out(qq!<a href="!);
#		$m->comp("/comp/copyable-link",
#			id => $mbid, name => $name,
#			type => "artist", style => "url");
#		$m->out(qq!">Permanent link</a> | !);

		$m->out(sprintf qq!<a href="/show/permlink.html?id=$mbid&amp;type=artist" title="Link to this artist">Link to this</a>!, uri_escape($name));
		$m->out(qq! | <a href="/show/artist/details.html?artistid=$id" title="Artist details">Details</a>!);
		$m->out(qq! | <a href="/show/artist/aliases.html?artistid=$id" title="Artist aliases">Aliases</a>!);
		$m->out(qq! | <a href="/show/artist/tags.html?id=$id">Tags</a>!);
		if ($id != &ModDefs::VARTIST_ID)
		{
			$m->out(qq! | <a href="/show/artist/?artistid=$id" title="Releases of this artist">Releases</a>!);
			$m->out(qq! | <a href="/show/artist/appears-on.html?artistid=$id" title="All releases this artist appears on">Appears on</a>!);
		}
		else
		{
			$m->out(qq! | <a href="/browsevarious.html">Browse&nbsp;releases</a>!);
		}
		if ($id != &ModDefs::VARTIST_ID)
		{
			$m->out(qq! | <a href="/show/artist/similar.html?artistid=$id" title="Similar Artists">Similar&nbsp;artists</a> | !);
			$m->comp("/comp/googlelink", search => $name, text => "Search&nbsp;google", raw => 1);
		}
		if ($session{uid})
		{
			$m->out(qq! | <a href="/mod/search/pre/artist.html?artistid=$id" title="View edits made against this artist">View artist edits</a>!);
		}
		$m->out(qq! ]</td></tr>!);
	}

	
	# Row 3: editing links
	if ($showmodlinks)
	{
		$m->out(qq!<tr>!);
		$m->out(qq!<td colspan="2" class="editlinks">!);
		$m->out(qq!Edit: [ !);
		if ($session{uid})
		{
			if ($id != &ModDefs::VARTIST_ID
				and $name !~ /^\[(unknown|data track|silence|no artist)\]$/)
			{
				$m->out(qq!<a href="/edit/artist/edit.html?artistid=$id">Edit artist</a>!);
				$m->out(qq! | <a href="/edit/artist/merge.html?artistid=$id">Merge into ...</a> | !);
			}
			if ($id != &ModDefs::VARTIST_ID)
			{
				$m->out(qq!<a href="/user/subscribe.html?artistid=$id">Subscribe</a> | !);
			}
			$m->out(qq!<a href="/edit/album/add.html?artistid=$id">Add release</a>!);

			if ($id == &ModDefs::VARTIST_ID)
			{
				$m->out(qq! | <a href="/freedb/freedb.html">Import release</a>!);
			}
			else
			{
				$m->out(sprintf qq! | <a href="/freedb/freedb.html?search=%s">Import release</a>!, uri_escape($name));

				require MusicBrainz::Server::Release;
				#my $mb = $m->comp("/comp/dblogin");
				my $al = MusicBrainz::Server::Release->new($mbro->{DBH});
				if (my @non = $al->FindNonAlbum($id))
				{
					my $nonid = $non[0]->GetMBId;
					$m->out(qq! | <a href="/show/release/?mbid=$nonid">Non-album tracks</a>!);

				} else {
					$m->out(qq! | <a href="/edit/track/addnonalbum.html?artistid=$id">Add non-album tracks</a>!);
				}
			}
			if ($id != &ModDefs::VARTIST_ID)
			{
				$m->out(qq! | <a href="/edit/artist/quality.html?artistid=$id">Change quality</a>!);
			}
		}
		else
		{
			$m->out(qq!<a href="/login.html">Log in</a> to edit this!);
		}
		$m->out(" ] " . $lastupdate);
		$m->out(qq!</td></tr>!);
	}

	# Row 4: relationship links
	if (0 && $showmodlinks && $session{uid})
	{
		$m->out(qq!<tr>!);
		$m->out(qq!<td colspan="2" class="relationshiplinks">!);
		$m->out(qq!Relationships: [ !);
		$m->out(qq!<a href="/show/artist/?artistid=$id&addrel=1">Use this artist in a relationship</a>!);
		$m->out(qq! | <a href="/edit/relationship/addurl.html?type=artist&id=$id&name=! . uri_escape($name) . qq!">Relate to URL</a>!);
		$m->out(qq! ]</td></tr>!);
	}
	
	# Row 5: Collection links
	
	
	if($session{uid})
	{
		$m->out(qq!<tr>!);
		$m->out(qq!<td colspan="2" class="collection">!);
		$m->out(qq!Collection: [ !);
		if(MusicBrainz::Server::CollectionInfo::NotifyUserAboutNewFromArtist($id, $session{uid}, $mbraw->{DBH}))
		{
			$m->out(qq!<a href="/artist/$mbid.html?artistid=$id&notify=0">Do not notify me on new releases</a> | !);
		}
		else
		{
			$m->out(qq!<a href="/artist/$mbid.html?artistid=$id&notify=1">Notify me on new releases</a> | !);
		}
		
		if(MusicBrainz::Server::CollectionInfo::ShowMissingOfArtistToUser($id, $session{uid}, $mbraw->{DBH}))
		{
			$m->out(qq!<a href="/artist/$mbid.html?artistid=$id&dispmissing=0">Do not display missing releases</a>!);
		}
		else
		{
			$m->out(qq!<a href="/artist/$mbid.html?artistid=$id&dispmissing=1">Display missing releases</a>!);
		}
		$m->out(qq! ]</td></tr>!);
	}

	$m->out(qq!</table>!);

</%perl>

%# vi: set ts=4 sw=4 ft=mason :

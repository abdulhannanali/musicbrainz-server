<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Prepare the menu structure for the MusicBrainz site.
	#
	# $Id$
	#
</%perl>
<%args>

	$uri => $r->uri
	$args => $r->args

</%args>
<%once>

	use vars qw( @topmenu_tree %urlmap %urlmap2 );
	use Scalar::Util qw( reftype weaken );

	@topmenu_tree = (
		{ name => "About",					url => "/doc/AboutMusicBrainz" },
		[
			{ name => "About MusicBrainz",		url => "/doc/AboutMusicBrainz" },
			{ name => "Privacy",				url => "/privacy" },
			[
				{ url => "/docs/20040922-1.html" },
			],
			{ name => "History",				url => "/doc/MusicBrainzHistory" },
			{ name => "People",					url => "/doc/MusicBrainzBio" },
			{ name => "Licenses",				url => "/about/licenses.html" },
			{ name => "Social Contract",		url => "/contract.html" },
			{ name => "Software",				url => "/doc/MusicBrainzEnabledApplications" },
			{ name => "Logos",					url => "/about/logos.html" },
			{ name => "Statistics",				url => "/about/stats.html" },
			{ name => "Mirrors",				url => "/about/mirrors.html" },
			{ name => "Elections",				url => "/user/election/" },
			[
				{ url => "/user/election/cancel.html" },
				{ url => "/user/election/index.html" },
				{ url => "/user/election/propose.html" },
				{ url => "/user/election/second.html" },
				{ url => "/user/election/show.html" },
				{ url => "/user/election/vote.html" },
			],
		],
		{ name => "News",					url => "/news/index.html" },
		[
			{ name => "General News",			url => "/news/index.html" },
			{ name => "Blog",					url => "http://blog.musicbrainz.org/" },
			{ name => "Server",					url => "/news/server.html" },
			{ name => "libmusicbrainz",			url => "/news/client.html" },
			{ name => "libtunepimp",			url => "/news/tunepimp.html" },
			{ name => "WindowsTagger",			url => "/news/tagger.html" },
			{ name => "Picard",					url => "/news/picard.html" },
			{ name => "In the Press",			url => "/doc/MusicBrainzPress" },
		],
		{ name => "Download",				url => "/download.html" },
		[
			{ name => "Download",				url => "/download.html" },
			{ name => "Tagger",					url => "/tagger/index.html" },
			[
				{ url => "/tagger/download.html" },
				{ url => "/tagger/tutorial.html" },
				{ url => "/tagger/intro.html" },
			],
			{ name => "Client / SDK",			url => "/products/client/index.html" },
			[
				{ url => "/products/client/download.html" },
			],
			{ name => "TunePimp",				url => "/products/tunepimp/index.html" },
			[
				{ url => "/products/tunepimp/download.html" },
			],
			{ name => "Server / Data",			url => "/products/server/index.html" },
			[
				{ url => "/products/server/download.html" },
				{ url => "/db_structure.html" },
				{ url => "/products/server/import_howto.html" },
				{ url => "/products/server/docs/20030820-1/index.html" },
				{ url => "/products/server/docs/20040215-1.html" },
			],
			{ name => "Picard",					url => "/doc/PicardDownload" },
		],
		{ name => "Search",					url => "/search.html" },
		[
			{ name => "Search",					url => "/search.html" },
			{ name => "Search Links",			url => "/search/external.html" },
			{ name => "Browse Artists",			url => "/browseartists.html" },
			{ name => "Browse Releases",		url => "/browsevarious.html" },
			{ name => "Firefox Plugins",		url => "/search/plugins/firefox/install.html" },
			[
				{ url => "/search/plugins/firefox/error.html" },
			],
			{ url => "/newsearch.html" },
			{ url => "/oldsearch.html" },
			{ url => "/search/textsearch.html" },
			{ url => "/search/oldsearch.html" },

			# annotations
			{ url => "/edit/annotation/show.html" },

			{ url => "/showalbum.html" },
			{ url => "/show/release/index.html" },
			{ url => "/show/release/details.html" },

			{ url => "/showartist.html" },
			{ url => "/show/artist/index.html" },
			{ url => "/show/artist/details.html" },
			{ url => "/show/artist/aliases.html" },


			{ url => "/showcdtoc.html" },
			{ url => "/show/cdtoc/index.html" },

			{ url => "/showtrack.html" },
			{ url => "/show/track/index.html" },

			{ url => "/showtrm.html" },
			{ url => "/show/trm/index.html" },

			{ url => "/showpuid.html" },
			{ url => "/show/puid/index.html" },

			{ url => "/show/url/index.html" },

			{ url => "/showrel.html" },
			{ url => "/show/release/relationships.html" },
			{ url => "/show/artist/relationships.html" },
			{ url => "/show/track/relationships.html" },
			{ url => "/show/url/relationships.html" },

			{ url => "/show/permlink.html" }, # permanent links rendering page


		],
		{ name => "Edit",					url => "/mod_intro.html" },
		[
			{ name => "About Editing",			url => "/mod_intro.html" },
			{ name => "Editing Suggestions",	url => "/reports/index.html" },
			(&DBDefs::REPLICATION_TYPE != RT_SLAVE) ? [
				{ url => "/reports/generated/SuspectTrackCharacters/index.html" },
				{ url => "/reports/generated/TooManyCapitals/index.html" },
				{ url => "/reports/generated/NoUpperCase/index.html" },
				{ url => "/reports/generated/TracksCalledUnknown/index.html" },
				{ url => "/reports/generated/WrongCharset/index.html" },
				{ url => "/reports/generated/DuplicateArtists/index.html" },
				{ url => "/reports/generated/FeaturingArtists/index.html" },
				{ url => "/reports/generated/AlbumsToConvert/index.html" },
				{ url => "/reports/generated/TRMsWithManyTracks/index.html" },
				{ url => "/reports/generated/TracksWithManyTRMs/index.html" },
				{ url => "/reports/generated/TracksNamedWithSequence/index.html" },
				{ url => "/reports/generated/DuplicateTrackNumbers/index.html" },
				{ url => "/reports/generated/BrokenDiscIDs/index.html" },
				{ url => "/reports/generated/BadWin32CDTOCs/index.html" },
				{ url => "/reports/generated/SuperfluousDataTracks/index.html" },
				{ url => "/reports/generated/DuplicateAlbums/index.html" },
				{ url => "/reports/generated/DuplicateArtists2/index.html" },
			] : [],
			{ name => "Show Edits",				url => "/mod/search/select-filter.html" },
			[
				{ url => "/mod/search/pre/new.html" },
				{ url => "/mod/search/pre/subscriptions.html" },
				{ url => "/mod/search/pre/freedb.html" },
				{ url => "/mod/search/pre/annotations.html" },
				{ url => "/mod/search/pre/moderator.html" },
				{ url => "/mod/search/pre/since-login.html" },
				{ url => "/mod/search/pre/moderator-failed.html" },
				{ url => "/mod/search/pre/voted.html" },
				{ url => "/mod/search/index.html" },
				[
					{ url => "/mod/search/select-artist.html" },
					{ url => "/mod/search/select-moderator.html" },
				],
				{ url => "/mod/jump.html" },
				[
					{ url => "/showmod.html" },
					{ url => "/show/edit/index.html" },
				],
				{ url => "/mod/search/results.html" },
			],

			{ name => "Add Artist",				url => "/edit/artist/add.html" },
			{ name => "Add Release",			url => "/edit/album/add.html?artistid=0" },
			[
				{ url => "/edit/album/add.html" },
				{ url => "/cdi/album.html" },
				{ url => "/cdi/artist.html" },
				{ url => "/cdi/done.html" },
				{ url => "/cdi/enter.html" },
				{ url => "/cdi/found.html" },
				{ url => "/cdi/selectattr.html" },
				{ url => "/cdi/submit.html" },
			],
			{ name => "Add Release (VA)",		url => "/edit/album/add.html?artistid=1" },
			[
				{ url => "/cdi/malbum.html" },
				{ url => "/cdi/menter.html" },
			],
			{ name => "Add CC License",			url => "/edit/relationship/addcc.html" },
			[
				{ url => "/edit/relationship/addcc.html" },
			],

			# freedb import
			{ name => "FreeDB Import",			url => "/freedb/freedb.html" },
			[
				{ url => "/freedb/final.html" },
				{ url => "/freedb/charset.html" },
				{ url => "/freedb/import.html" },
				{ url => "/freedb/mac-check-similar.html" },
				{ url => "/freedb/mac-confirm.html" },
				{ url => "/freedb/mac-edittrack.html" },
				{ url => "/freedb/mac-edittracks.html" },
				{ url => "/freedb/mac-selecttrackartist.html" },
				{ url => "/freedb/sac-check-similar.html" },
				{ url => "/freedb/sac-confirm.html" },
				{ url => "/freedb/sac-edittracks.html" },
				{ url => "/freedb/select-artist.html" },
				{ url => "/freedb/select-macsac.html" },
			],

			# edit relationship
			{ url => "/edit/relationship/add.html" },
			{ url => "/edit/relationship/addurl.html" },
			{ url => "/edit/relationship/edit.html" },
			{ url => "/edit/relationship/remove.html" },
			{ url => "/edit/relationship/showelements.html" },

			# edit annotations
			{ url => "/edit/annotation/artist/edit.html" },
			{ url => "/edit/annotation/album/edit.html" },
			{ url => "/edit/annotation/diff.html" },
			{ url => "/edit/annotation/artist/history.html" },
			{ url => "/edit/annotation/album/history.html" },

			# add mods
			{ url => "/edit/artistalias/add.html" },
			{ url => "/edit/track/addnonalbum.html" },
			{ url => "/edit/track/add.html" },

			# change track artist mods
			{ url => "/edit/track/change.html" },
			{ url => "/edit/track/changeartist.html" },

			# edit mods
			{ url => "/edit/album/editattributes.html" },
			{ url => "/edit/album/edit.html" },
			{ url => "/edit/album/editall.html" },
			{ url => "/edit/artist/edit.html" },
			{ url => "/edit/artistalias/edit.html" },
			{ url => "/edit/track/edit.html" },

			# merge mods
			{ url => "/edit/artist/merge.html" },
			{ url => "/edit/album/move.html" },
			{ url => "/edit/discid/move.html" },

			# removal mods
			{ url => "/edit/album/remove.html" },
			{ url => "/edit/artistalias/remove.html" },
			{ url => "/edit/artist/remove.html" },
			{ url => "/edit/discid/remove.html" },
			{ url => "/mod/remove.html" },
			{ url => "/edit/track/remove.html" },
			{ url => "/edit/trm/remove.html" },
			{ url => "/edit/puid/remove.html" },

			# single- and multiartist conversion
			{ url => "/edit/album/mac.html" },
			{ url => "/edit/album/sac.html" },

			# release dates editor.
			{ url => "/edit/albumreleases/index.html" },
			{ url => "/edit/albumreleases/editreleases.html" },
			{ url => "/edit/albumreleases/review.html" },
			{ url => "/edit/albumreleases/cancel.html" },
			{ url => "/edit/albumreleases/enter.html" },

			# release language/script editor.
			{ url => "/edit/albumlanguage/edit.html" },

			# release batch edits (attributes, language, merge etc.)
			{ url => "/edit/albumbatch/cancel.html" },
			{ url => "/edit/albumbatch/done.html" },
			{ url => "/edit/albumbatch/merge.html" },
			{ url => "/edit/albumbatch/remove.html" },
		],

		{ name => "Account",			url => "/show/user/index.html" },
		[
			{ name => "Edit Account",		url => "/user/edit.html",					login => 1 },
			{ name => "Change Password",	url => "/user/change-password.html",	 	login => 1 },
			{ name => "Preferences",		url => "/prefs.html",						login => 1 },
			{ name => "Moderate",			url => "/mod/search/select-filter.html", 	login => 1 },
			{ name => "Subscriptions",		url => "/user/subscriptions.html", 			login => 1 },
			{ name => "Logout",				url => "/logout.html",						login => 1 },

			{ name => "Create Account",		url => "/user/register.html", 				login => 0 },
			{ name => "Login",				url => "/login.html",						login => 0 },
			{ name => "Forgot Password",	url => "/user/forgot-password.html",	 	login => 0 },
		],

		{ name => "Contribute",				url => "/doc/Contribute" },
		[
			{ name => "How to Contribute",		url => "/doc/Contribute" },
			{ name => "Sponsors",				url => "/doc/CorporateSponsors" },
			{ name => "Help Wanted",			url => "/about/helpwanted.html" },
			{ name => "Development",			url => "/development/index.html" },
			{ name => "Docs",					url => "/documentation.html" },
			[
				{ url => "/doc/HowMusicBrainzWorks" },
				{ url => "/client_howto.html" },
				{ url => "/docs/mb_client/2.1.0" },
				{ url => "/docs/tunepimp/index.html" },
				{ url => "/products/server/docs/index.html" },
				{ url => "/cd_submission.html" },
				{ url => "/docs/20031108-2.html" },
				{ url => "/docs/20031108-1.html" },
				{ url => "/tagger/id-intro.html" },
				{ url => "/disc.html" },
				{ url => "/docs/specs/metadata_tags.html" },
			],
			{ name => "Metadata 2.1",			url => "/MM/index.html" },
			{ name => "CVS Access",				url => "/development/cvs.html" },
			{ name => "CVS Modules",			url => "/development/cvs-modules.html" },
			{ name => "CVS Viewer",				url => "http://cvs.musicbrainz.org/" },
		],
		{ name => "Help",					url => "/doc/ContactUs" },
		[
			{ name => "Contact Us",				url => "/doc/ContactUs" },
			{ name => "FAQs",					url => "/doc/FrequentlyAskedQuestions" },
			[
				{ url => "/doc/GeneralFAQ" },
				{ url => "/doc/AccountFAQ" },
				{ url => "/doc/TaggerFAQ" },
				{ url => "/doc/ClassicalMusicFAQ" },
				{ url => "/doc/AnnotationFAQ" },
			],
			{ name => "Editing FAQ",			url => "/doc/ModerationFAQ" },
			{ name => "Editing Style",			url => "/style.html" },
			{ name => "Mailing Lists",			url => "/list.html" },
			{ name => "Bugs / RFEs",			url => "http://musicbrainz.org/bugs" },
		],
	);

	%urlmap = ();
	%urlmap2 = ();

	my $transform;
	$transform = sub
	{
		my ($rarhMenu, $riNextIndex, $rhParentItem) = @_;

		for (my $i = 0; $i < @$rarhMenu; ++$i)
		{
			my $rhItem = $rarhMenu->[$i];

			next if (!defined $rhItem);

			$rhItem->{expand} = 0;
			$rhItem->{id} = "sitemenu" . (++$$riNextIndex);
			weaken($rhItem->{parent} = $rhParentItem);

			my $u = $rhItem->{url};
			$urlmap{$u} = $rhItem
				unless $urlmap{$u} and $urlmap{$u}{preferred};
			push @{ $urlmap2{$u} }, $rhItem;

			my $raNext = $rarhMenu->[$i+1];
			if ($raNext and reftype($raNext) eq "ARRAY")
			{
				$rhItem->{children} = $raNext;
				splice(@$rarhMenu, $i+1, 1);
				&$transform($rhItem->{children}, $riNextIndex, $rhItem);
			}
		}
	};
	&$transform(\@topmenu_tree, \(my $tmp = 0));

</%once>



<%def .drawmainmenu>
<%perl>

	# draw the main menu buttons.
	# - javascript support
	# - static menu for browsers with disabled javascript
	my ($rarhMenu) = @_;

	my $selName = '';
	my $noscriptmenu = '<tr>';
	my @mm_items;

	my @named_children = grep { defined $_->{'name'} } @$rarhMenu;

	# FIXME dummy JS string encoding
	my $js_string = sub { return '"' . $_[0] . '"' };

	for my $i (0 .. $#named_children)
	{
		my $rhItem = $named_children[$i];
		my $is_first = ($i == 0);
		my $is_last = ($i == $#named_children);

		my $rarhChildren = $rhItem->{children};
		my $fSel = $rhItem->{expand};
		$selName = $rhItem->{id} if $fSel;

		push @mm_items, [ $rhItem->{id}, $rhItem->{url}, $rhItem->{name} ];

		# compile css class (none, selected, right)
		my $css = "";
		$css .= " selected" if $fSel;
		$css =~ s/^ (.*)$/ class="$1"/;

		$noscriptmenu .=
			sprintf qq!<td%s><a href="%s">%s</a></td>\n!,
				$css,
			 	encode_entities($rhItem->{url}),
			 	encode_entities($rhItem->{name})
	}
	$noscriptmenu .= qq!<td class="mainmenuright">&nbsp;</td></tr>\n!;

	@mm_items = map {
		"["
		. &$js_string($_->[0])
		. ","
		. &$js_string($_->[1])
		. ","
		. &$js_string($_->[2])
		. "]"
	} @mm_items;
	my $mm_items = "[" . join(",", @mm_items) . "]";


	$m->out(qq!<script type="text/javascript">\n!);
	$m->out(qq!  mb.topmenu.init(\n!);
	$m->out(sprintf qq!    '%s', \n!, UserPreference::get('topmenu_submenu_types'));
	$m->out(sprintf qq!    '%s', \n!, UserPreference::get('topmenu_dropdown_trigger'));
	$m->out(sprintf qq!    %s); \n!, $mm_items);
	$m->out(qq!  mb.topmenu.writeUI('$selName');\n!);
	$m->out(qq!</script>\n!);

	$m->out(qq!<noscript>\n!);
	$m->out(qq!<table cellspacing="0" cellpadding="0" border="0">\n!);
	$m->out($noscriptmenu);
	$m->out(qq!</table>\n!);
	$m->out(qq!</noscript>\n!);

</%perl>
</%def>



<%def .drawsubmenus>
<%perl>

	my ($rarhMenu) = @_;

	for my $rhItem (@$rarhMenu)
	{
		defined($rhItem->{name}) or next;

		my $rarhChildren = $rhItem->{children};
		$rarhChildren = undef
			if $rarhChildren
			and not grep { defined $_->{name} } @$rarhChildren;

		if ($rarhChildren)
		{
			$m->out(sprintf qq!<div id="%s.submenu" style="display: none" class="submenu">\n!, $rhItem->{id});
			$m->out(qq!<table border="0" cellspacing="0" cellpadding="0">\n!);

			# get all named children, which either are not
			# user session dependent, or correspond to the
			# session state.
			my @display_children = grep {
				defined $_->{'name'} &&
				(
				 	not defined $_->{login} or
					($_->{login} xor !$session{uid})
				)
			} @$rarhChildren;

			for my $i (0 .. $#display_children)
			{
				my $c = $display_children[$i];
				my $is_last = ($i == $#display_children);
				my $css = ($is_last ? qq! class="bottom"! : "");

				$m->out(sprintf qq!<tr><td><a href="%s"%s>%s</a></td></tr>\n!,
					 encode_entities($c->{url}),
					 $css,
					 encode_entities($c->{name})
				);
			}
			$m->out("</table>\n");
			$m->out("</div>\n");
		}
	}

</%perl>
</%def>

<%def .drawstatic>
<%perl>

	(my $top) = grep { $_->{'expand'} } @topmenu_tree;
	$top or return;

	# get all named children, which either are not
	# user session dependent, or correspond to the
	# session state.
	my @display_children = grep {
		defined $_->{'name'} &&
		(
			not defined $_->{login} or
			($_->{login} xor !$session{uid})
		)
	}  @{ $top->{children} };

	for my $i (0 .. $#display_children)
	{
		my $c = $display_children[$i];
		my $is_first = ($i == 0);
		my $is_last = ($i == $#display_children);

		my $css = "";
		$css .= " left" if $is_first;
		$css .= " right" if $is_last;
		$css =~ s/^ (.*)$/ class="$1"/;

		if (not defined $c->{login} or
			!$c->{login} && !$session{uid} or
			$c->{login} && $session{uid})
		{
			$m->out(sprintf qq!<a href="%s"%s>%s</a>%s\n!,
				 encode_entities($c->{url}),
				 $css,
				 encode_entities($c->{name}),
				 ($is_last ? "" : " | ")
			);
		}
	}

</%perl>
</%def>



<%perl>

	# Work out which items are "selected"
	my @sel;
	{
		my $rhSelItem = $urlmap{$uri . "?" . $args};
		$rhSelItem ||= $urlmap{$uri};

		if (not $rhSelItem and $uri eq $r->uri)
		{
			# Odd: it seems that sometimes a RewriteRule causes $r->uri to
			# return the original URI, and sometimes the rewritten URI.  In
			# the latter case, REQUEST_URI can be used to find the original.
			# On Zim this hack doesn't seem to be necessary; on our dev boxes,
			# it is.  mod_rewrite versions maybe?  <shrug>
			$uri = $r->subprocess_env('REQUEST_URI') || "";
			$rhSelItem = $urlmap{$uri . "?" . $args};
			$rhSelItem ||= $urlmap{$uri};
		}
		while ($rhSelItem)
		{
			$rhSelItem->{expand} = 1;
			unshift @sel, $rhSelItem;
			$rhSelItem = $rhSelItem->{parent};
		}
	}

	# prepare variables with the main-, static- and submenu html content
	$mainmenuHTML = $m->scomp(".drawmainmenu", \@topmenu_tree);
	$staticmenuHTML = $m->scomp(".drawstatic");
	$popupmenuHTML = $m->scomp(".drawsubmenus", \@topmenu_tree);

	# trim newlines from the string (appended by the scomp routine)
	$mainmenuHTML =~ s/\n$//;
	$staticmenuHTML =~ s/\n$//;
	$staticmenuHTML =~ s/\n$//;

	# De-select selected things
	delete $_->{expand} for @sel;

</%perl>

%# vi: set ts=4 sw=4 ft=mason :
<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Link to a release. Either a release object, or id, and name arguments
	# are used to create the url.
	#
	# $Id$
	#
</%perl>
<%args>

	# preferred way of calling - provide Album object
	$release => undef

	# specific arguments can be provided, too
	$id => undef
	$mbid => undef
	$name => undef

	# this is used from Moderation.pm, to be able to display the rowid of deleted
	# releases as a tooltip.
	$title => undef

	# rendering options
	$icon => 1
	$strong => 1

</%args>
<%perl>

	if (defined $release)
	{
		$id = $release->GetId;
		$mbid = $release->GetMBId;
		$name = $release->GetName;
	}
	die ("\$id and \$name are required") if (not defined $id || not defined $name);

	# enclose the value in title in proper attribute tag,
	# if it was set.
	$title = defined $title
		? ' title="' . $m->interp->apply_escapes($title, 'h').'"'
		: "";

	# use span with the background image set to render the release icon.
	$m->out(sprintf qq!<span class="linkrelease%s"%s>!,
					0 && $icon ? "-icon" : "",
					$title);

	# icon was cut off sometimes, we'll rather do it the classic way.
	if ($icon && !UserPreference::get("css_noentityicons"))
	{
		$m->out(qq!<img src="/images/entity/release_small.gif" alt="Release" class="entityicon" />!);
	}



	# if the id not negative, show a link, else show the name only
	if (MusicBrainz::IsNonNegInteger($id))
	{
		# if the MBID is defined, use the "preferred" way of displaying release links.
		$m->out(sprintf qq!<a href="%s" class="linkentity%s">%s</a>!,
						defined $mbid ? "/album/$mbid.html" : "/show/release/?releaseid=$id",
						$strong ? "-strong" : "",
						$m->interp->apply_escapes($name, 'h'));
	}
	else
	{
		# use the deletedentity span to visualize a deleted entity.
		$m->out(sprintf qq!<span class="deletedentity">%s</span>!,
						$m->interp->apply_escapes($name, 'h'));
	}

	$m->out("</span>");

</%perl>
%# -- no empty line here, else an additional space will be
%#    inserted before the dot at the end of sentences.
%# vi: set ts=4 sw=4 ft=mason :
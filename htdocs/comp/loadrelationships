<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Loads the relationships for a given entity (type=artist|release|track)
	# with id=(rowid) from the database. Returns a list of relationship
	# hashes, each with the following keys:
	#
	# link0_type, link1_type, link0_id, link1_id
	# link0_name, link1_name, link_phrase, rlink_phrase
	#
	# Usage
	# -----------------------------------------------------------------------------
	# my @relationships = $m->comp("/comp/loadrelationships", $mb, $id, $type);
	#
	# $URL$
	# $Id$
	#
</%perl>
<%perl>

	# get passed-in arguments
	my ($mb, $id, $type) = @_;

	if (not defined $mb or
		not defined $id or
		not defined $type)
	{
		$m->comp("/comp/badargs");
		die();
	}

	my @links = MusicBrainz::Server::Link->FindLinkedEntities($mb->{DBH}, $id, $type);

	# output relationships.
	if (@links != 0)
	{
		my $max = scalar(@links);
		my ($item, $i, $count, $lines);

		for($i = 0; $i < $max; $i++)
		{
			$item = $links[$i];
			if ($item->{link0_type} ne $type || $item->{link0_id} != $id)
			{
				@$item{qw(
					link0_type		link1_type
					link0_id		link1_id
					link0_name		link1_name
					link_phrase		rlink_phrase
				)} = @$item{qw(
					link1_type		link0_type
					link1_id		link0_id
					link1_name		link0_name
					rlink_phrase	link_phrase
				)};
			}
		}

		@links = sort
		{
			my $c = $a->{link_phrase} cmp $b->{link_phrase};
			return $c if ($c);

			$c = $a->{enddate} cmp $b->{enddate};
			return $c if ($c);

			$c = $a->{begindate} cmp $b->{begindate};
			return $c if ($c);

			return $a->{link1_name} cmp $b->{link1_name};

		} @links;
	}

	return \@links;
</%perl>
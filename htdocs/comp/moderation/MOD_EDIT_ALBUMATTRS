<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# This component provides the display facilities for
	# the MOD_EDIT_ALBUMATTRS edit type.
	#
	# $Id$
	#
</%perl>
<%method ShowPreviousValue>
<%perl>
	my $this = shift;
	my $releases = $this->{'new_albums'};

	$m->out(qq!<table class="editfields">!);
	for my $release (@$releases)
	{
		$m->out(qq!<tr><td>!);
		$m->comp("/comp/linkrelease", id => $release->{'id'}, name => $release->{'name'});

		my ($type, $status) = map {
			Album->GetAttributeName($_) || "#$_"
		} split ',', $release->{prev};
		$type = "Not set" if not defined($type);
		$status = "Not set" if not defined($status);

		$m->out(qq!<div class="attrlist">!);
		$m->out(qq!<span class="explain" title="Type">$type</span>, !);
		$m->out(qq!<span class="explain" title="Status">$status</span></div>!);
		$m->out(qq!</td></tr>!);
	}
	$m->out(qq!</table>!);

</%perl>
</%method>

<%method ShowNewValue>
<%perl>
 	my $this = shift;
 	my $new = $this->{'new_unpacked'};

	my ($type, $status) = map {
		Album->GetAttributeName($_) || "#$_"
	} split ',', $new->{Attributes};

%	$type = "?" if (not defined $type);
%	$status = "?" if (not defined $status);

	<table class="editfields">
		<tr>
			<td class="lbl">New:</td>
			<td class="field">Type: <% $type %>, Status: <% $status %></td>
		</tr>
		<tr>
			<td class="lbl">Was:</td>
			<td>
				<table class="editlisting">

%	for my $release (@$releases)
%	{

					<tr>
						<td>
							<& /comp/linkrelease, id => $release->{'id'}, name => $release->{'name'}, strong => 0 &>

%		my ($type, $status) = map {
%			Album->GetAttributeName($_) || "#$_"
%		} split ',', $release->{prev};
%		$type = "?" if not defined($type);
%		$status = "?" if not defined($status);

						</td>
						<td>
							(<span class="explain" title="Type"><% $type %></span>,
							 <span class="explain" title="Status"><% $status %></span>)
						</td>
					</tr>

%	}

				</table>
			</td>
		</tr>

	</table>

</%method>

%# vi: set ts=4 sw=4 ft=mason :

<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# This component provides the display facilities for
	# the MOD_EDIT_ARTIST edit type.
	#
	# $Id$
	#
</%perl>
<%method ShowPreviousValue>
<%perl>

 	my $self = shift;
 	my $prev = $self->{'prev_unpacked'};

	return;

</%perl>


	<table class="editdiff">

	$m->out(qq!<table class="editdiff">!);

	if (defined $name)
	{
		$m->out(qq!<tr><td class="lbl">Name:</td><td class="diff" id="ov::artistname$id">!);
		$m->out($m->interp->apply_escapes($name, "h"));
		$m->out(qq!</td></tr>!);
	}

	if (defined $sortname)
	{
		$m->out(qq!<tr><td class="lbl">Sortname:</td><td class="diff" id="ov::artistsortname$id">!);
		$m->out($m->interp->apply_escapes($sortname, "h"));
		$m->out(qq!</td></tr>!);
	}

	if (defined $resolution)
	{
		$m->out(qq!<tr><td class="lbl">Comment:</td><td class="diff" id="ov::artistresolution$id">!);
		$m->out($m->interp->apply_escapes($resolution, "h"));
		$m->out(qq!</td></tr>!);
	}

	if (defined $type)
	{
		my $type_str = Artist::GetTypeName($type);
		$m->out(qq!<tr><td class="lbl">Type:</td><td class="diff" id="ov::artisttype$id">!);
		$m->out($m->interp->apply_escapes($type_str, "h"));
		$m->out(qq!</td></tr>!);
	}

	if (defined $begin)
	{
		$begin = MusicBrainz::Server::Validation::MakeDisplayDateStr($begin);
		my $datestr = $m->interp->apply_escapes(Artist::GetBeginDateName($type), "h");
		$datestr =~ s/ /&nbsp;/g;

		$m->out(qq!<tr><td class="lbl">&nbsp;</td><td class="diff" id="ov::artistbegindate$id">$datestr: !);
		$m->out($m->interp->apply_escapes($begin, "h"));
		$m->out(qq!</td></tr>!);
	}

	if (defined $end)
	{
		$begin = MusicBrainz::Server::Validation::MakeDisplayDateStr($end);
		my $datestr = $m->interp->apply_escapes(Artist::GetEndDateName($type), "h");
		$datestr =~ s/ /&nbsp;/g;

		$m->out(qq!<tr><td class="lbl">&nbsp;</td><td id="ov::artistenddate$id">$datestr: !);
		$m->out($m->interp->apply_escapes($end, "h"));
		$m->out(qq!</td></tr>!);
	}

	$m->out(qq!</table>!);

</%perl>
</%method>


<%method ShowNewValue>
<%perl>

 	my $self = shift;
 	my $new = $self->{'new_unpacked'};

	my $name = $new->{'ArtistName'};
	my $sortname = $new->{'SortName'};
	my $resolution = $new->{'Resolution'};

	my $begin = $new->{'BeginDate'};
	my $end = $new->{'EndDate'};
	my $type = $new->{'Type'};

	my $id = $self->GetId;

		<tr class="top">
			<td class="lbl" rowspan="2">Name:</td>
			<td class="diff" id="ov::artistname<% $id %>">
				<% $prev->{'ArtistName'} %>
			</td>
		</tr>
		<tr>
			<td class="diff" id="nv::artistname<% $id %>">
				<% $new->{"ArtistName"} %>
			</td>
		</tr>

	if (defined $name)
	{
		$m->out(qq!<tr><td class="lbl">Name:</td><td class="diff" id="nv::artistname$id">!);
		$m->out($m->interp->apply_escapes($name, "h"));
		$m->out(qq!</td></tr>!);
	}

	if (defined $sortname)
	{
		$m->out(qq!<tr><td class="lbl">Sortname:</td><td class="diff" id="nv::artistsortname$id">!);
		$m->out($m->interp->apply_escapes($sortname, "h"));
		$m->out(qq!</td></tr>!);
	}

		<tr class="top">
			<td class="lbl" rowspan="2">Sortname:</td>
			<td class="diff" id="ov::artistsortname<% $id %>">
				<% $prev->{'SortName'} %>
			</td>
		</tr>
		<tr>
			<td class="diff" id="nv::artistsortname<% $id %>">
				<% $new->{"SortName"} %>
			</td>
		</tr>

	if (defined $type)
	{
		my $type_str = Artist::GetTypeName($type) || "(Unset)";

		$m->out(qq!<tr><td class="lbl">Type:</td><td class="diff" id="nv::artisttype$id">!);
		$m->out($m->interp->apply_escapes($type_str, "h"));
		$m->out(qq!</td></tr>!);
	}

		<tr class="top">
			<td class="lbl" rowspan="2">Comment:</td>
			<td class="diff" id="ov::artistresolution<% $id %>">
				<% $prev->{'Resolution'} %>
			</td>
		</tr>
		<tr>
			<td class="diff" id="nv::artistresolution<% $id %>">
				<% $resolution |n %>
			</td>
		</tr>

		$m->out(qq!<tr><td class="lbl">&nbsp;</td><td class="diff" id="nv::artistbegindate$id">$datestr: !);
		$m->out($m->interp->apply_escapes($begin, "h"));
		$m->out(qq!</td></tr>!);
	}

%	if ($prev->{"Type"} ne $new->{"Type"})
%	{
%		my $prevtype = Artist::GetTypeName($prev->{"Type"});
%		my $newtype = Artist::GetTypeName($new->{"Type"}) || "?";


		<tr class="top">
			<td class="lbl" rowspan="2">Type:</td>
			<td class="diff" id="ov::artisttype<% $id %>">
				<% $prevtype |n %>
			</td>
		</tr>
		<tr>
			<td class="diff" id="nv::artisttype<% $id %>">
				<% $newtype |n %>
			</td>
		</tr>

	$m->out(qq!</table>!);

<%perl>

	if ($prev->{"BeginDate"} ne $new->{"BeginDate"})
	{
		my $prevbegin = MusicBrainz::Server::Validation::MakeDisplayDateStr($prev->{'BeginDate'});
		$prevbegin = "?" if ($prevbegin eq "");

		my $newbegin = $new->{"BeginDate"};
		$newbegin = $newbegin ? MusicBrainz::Server::Validation::MakeDisplayDateStr($newbegin) : "?";

</%perl>

		<tr class="top">
			<td class="lbl" rowspan="2">Begin:</td>
			<td class="diff" id="ov::artistbegindate<% $id %>">
				<% $prevbegin |n %>
			</td>
		</tr>
		<tr>
			<td class="diff" id="nv::artistbegindate<% $id %>">
				<% $newbegin |n %>
			</td>
		</tr>

%	}

<%perl>

	if ($prev->{"EndDate"} ne $new->{"EndDate"})
	{
		my $prevend = MusicBrainz::Server::Validation::MakeDisplayDateStr($prev->{'EndDate'});
		$prevend = "?" if ($prevend eq "");

		my $newend = $new->{"EndDate"};
		$newend = $newend ? MusicBrainz::Server::Validation::MakeDisplayDateStr($newend) : "?";

</%perl>

		<tr class="top">
			<td class="lbl" rowspan="2">End:</td>
			<td class="diff" id="ov::artistenddate<% $id %>">
				<% $prevend |n %>
			</td>
		</tr>
		<tr>
			<td class="diff" id="nv::artistenddate<% $id %>">
				<% $newend |n %>
			</td>
		</tr>

%	}

	</table>

</%perl>
</%method>

%# vi: set ts=4 sw=4 ft=mason :

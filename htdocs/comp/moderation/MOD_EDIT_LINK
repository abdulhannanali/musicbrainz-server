<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# This component provides the display facilities for
	# the MOD_EDIT_LINK edit type.
	#
	# $URL$
	# $Id$
	#
</%perl>
<%method ShowPreviousValue>
%	my $self = shift;
%	my $new = $self->{'new_unpacked'};

%	if ($new->{oldentity1type} ne 'url')
%	{

		<& /comp/ar/ShowEntityLink,
			id => $new->{oldentity0id},
			type => $new->{oldentity0type},
			name => $new->{oldentity0name},
			linktypeid => $new->{oldlinktypeid},
			simple => 1 &>

		<% $new->{oldlinktypephrase} %>

		<& /comp/ar/ShowEntityLink,
			id => $new->{oldentity1id},
			type => $new->{oldentity1type},
			name => $new->{oldentity1name},
			linktypeid => $new->{oldlinktypeid},
			simple => 1 &>

%		if ($new->{oldbegindate} =~ /\S/ || $new->{oldenddate} =~ /\S/)
%		{
%			$m->out(sprintf "%s%s",
%					($new->{oldbegindate} =~ /\S/) ? "from ".$new->{oldbegindate} : "",
%					($new->{oldenddate} =~ /\S/) ? " until ".$new->{oldenddate} : " to present");
%		}
%	}
%	else
%	{

		<& /comp/ar/ShowEntityLink,
			id => $new->{oldentity0id},
			type => $new->{oldentity0type},
			name => $new->{oldentity0name},
			linktypeid => $new->{oldlinktypeid},
			simple => 1 &>

		<% $new->{oldlinktypephrase} %>

%		my ($url, $name) = ($new->{oldentity1name}, "");
%		if ($new->{oldlinktypeid} == Album->GetAsinLinkTypeId($self->{DBH}))
%		{
%			($name, ) = Album->ParseAmazonURL($new->{oldentity1name});
%		}

		<& /comp/ar/ShowEntityLink,
			id => $new->{oldentity1id},
			type => $new->{oldentity1type},
			name => $name,
			url => $url,
			simple => 1 &>

%	}

</%method>

<%method ShowNewValue>
%	my $self = shift;
%	my $new = $self->{'new_unpacked'};

%	if ($new->{newentity1type} ne "url")
%	{

		<& /comp/ar/ShowEntityLink,
			id => $new->{newentity0id},
			type => $new->{newentity0type},
			name => $new->{newentity0name},
			linktypeid => $new->{newlinktypeid},
			simple => 1 &>

		<% $new->{newlinktypephrase} %>

		<& /comp/ar/ShowEntityLink,
			id => $new->{newentity1id},
			type => $new->{newentity1type},
			name => $new->{newentity1name},
			linktypeid => $new->{newlinktypeid},
			simple => 1 &>

%		if ($new->{newbegindate} =~ /\S/ || $new->{newenddate} =~ /\S/)
%		{
%			$m->out(sprintf "%s%s",
%					($new->{newbegindate} =~ /\S/) ? "from ".$new->{newbegindate} : "",
%					($new->{newenddate} =~ /\S/) ? " until ".$new->{newenddate} : " to present");
%		}
%	}
%	else
%	{

		<& /comp/ar/ShowEntityLink,
			id => $new->{newentity0id},
			type => $new->{newentity0type},
			name => $new->{newentity0name},
			linktypeid => $new->{newlinktypeid},
			simple => 1 &>

		<% $new->{newlinktypephrase} %>

		<& /comp/ar/ShowEntityLink,
			id => $new->{newentity1id},
			type => $new->{newentity1type},
			name => $new->{newentity1name},
			url => $new->{newentity1name},
			simple => 1 &>

%	}

</%method>

%# eof

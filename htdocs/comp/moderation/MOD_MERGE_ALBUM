<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# This component provides the display facilities for
	# the MOD_MERGE_ALBUM and MOD_MERGE_ALBUM_MAC edit types.
	#
	# $Id$
	#
</%perl>%#

<%method ShowPreviousValue>
<%perl>
 	my $this = shift;

 	my $s = $this->GetStatus;
 	my $i = 0;
	my $releases = $this->{'new_albums'};

</%perl>

	<table class="editfields">

<%perl>


	my $first = 1;
	for my $releasehash (@$releases)
	{
		my ($releaseexists, $artistexists) = (0, 0);
		my ($release, $artist) = (Album->new($this->{DBH}), Artist->new($this->{DBH}));

		$release->SetId($releasehash->{'id'});
		if ($releaseexists = $release->LoadFromId())
		{
			$artist->SetId($release->GetArtist);
			$artistexists = $artist->LoadFromId();
		}
		$m->out(qq!<tr><td>!);
		$m->comp("/comp/linkrelease", id => $id, name => $name, title => $title, strong => $strong);
		$m->out(qq!</td></tr>!);
	}
	$m->out(qq!</table>!);

</%perl>
</%method>

		<tr>
			<td class="lbl"><% $first ? "Merge:" : "" %></td>
			<td>

%		if ($releaseexists)
%		{

				<& /comp/linkrelease, release => $release, strong => 0 &>

%		}
%		else
%		{

				<& /comp/linkrelease, id => -1, name => $releasehash->{'name'}, strong => 0 &>

%		}

%		if ($artistexists)
%		{

				(By:&nbsp;<& /comp/linkartist, artist => $artist, strong => 0 &>)

%		}
%		$first = 0;

			</td>
		</tr>

%	}

<%perl>

	my ($releaseexists, $artistexists) = (0, 0);
	my ($release, $artist) = (Album->new($this->{DBH}), Artist->new($this->{DBH}));
	$release->SetId($into->{'id'});
	if ($releaseexists = $release->LoadFromId())
	{
		$artist->SetId($release->GetArtist);
		$artistexists = $artist->LoadFromId();
	}

</%perl>

		<tr>
			<td class="lbl">Into:</td>
			<td>

%		if ($releaseexists)
%		{

				<& /comp/linkrelease, release => $release, strong => 0 &>

%		}
%		else
%		{

				<& /comp/linkrelease, id => -1, name => $into->{'name'}, strong => 0 &>

%		}
%		if ($artistexists)
%		{

				(By:&nbsp;<& /comp/linkartist, artist => $artist, strong => 0 &>)

%		}

			</td>
		</tr>
		<tr>
			<td class="lbl">Options:</td>
			<td>
				Merge attributes: <% $this->{'merge_attributes'} ? "yes" : "no" %> <br />
				Merge language/script: <% $this->{'merge_attributes'} ? "yes" : "no" %>
			</td>
		</tr>
	</table>
	<div class="attrlist">
		Merge attributes: <% $this->{'merge_attributes'} ? "yes" : "no" %><br />
		Merge language/script: <% $this->{'merge_langscript'} ? "yes" : "no" %>
	</div>

</%method>

%# vi: set ts=4 sw=4 ft=mason :

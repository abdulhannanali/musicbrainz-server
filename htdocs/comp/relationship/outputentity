<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Renders a relationship entity. If there is a pending edit on this
	# relationship, the output is highlighted using the "mp" css class.
	#
	# $URL$
	# $Id$
	#
</%perl>
<%args>
	$item
	$index
	$name
</%args>
<%perl>

	my $prefix = "link" . $index . "_";
	my $mp = $item->{modpending};

	my $type = $item->{$prefix . "type"};
	my $id = $item->{$prefix . "id"};
	$name = $item->{$prefix . "name"};

	my $url = $item->{$prefix . "name"};
	my $asin = undef;

	$m->out(qq!<span class="mp">!) if ($mp);

	my $typeshow = ($type eq "album" ? "release" : $type);
	if ($typeshow eq "artist" or
		$typeshow eq "release" or
		$typeshow eq "track")
	{
		$m->comp("/comp/link$typeshow", id => $id, name => $name);
	}
	elsif ($type eq "url")
	{
		if ($item->{"link_name"} eq "amazon asin" && $prefix eq "link1_")
		{
			($asin, ) = Album->ParseAmazonURL($item->{link1_name});
		}
		elsif ($item->{"link_name"} eq "wikipedia" && $prefix eq "link1_")
		{
			$url =~ s/^http:\/\/(\w{2,})\.wikipedia\.org\/wiki\/(.*)$/$1: $2/o;
			$url =~ tr/_/ /;
		}

		# decode the URL
		use Encode;
		my $decoded_url = $url;
		$decoded_url =~ s/\%([\dA-Fa-f]{2})/pack('C', hex($1))/oeg;
		$url = $decoded_url
			if (Encode::decode_utf8($decoded_url));

		# shorten url's that are longer than ~75 chars
		my $shorturl = $asin ||= (length($url) > 75
				 ? encode_entities(substr($url, 0, 72)) . "&#8230;"
				 : encode_entities($url));

		$m->comp("/comp/linkurl", id => $id, name => $shorturl, href => $url);
	}

	$m->out("</span>") if ($mp);

</%perl>

<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Renders a relationship entity. If there is a pending edit on this
	# relationship, the output is highlighted using the "mp" css class.
	#
	# $URL$
	# $Id$
	#
</%perl>
<%args>
	$item
	$index
	$name
</%args>
<%perl>

	my $prefix = "link" . $index . "_";
	my $mp = $item->{modpending};

	$m->out('<span class="mp">') if ($mp);

    my $text = "";
	if ($item->{$prefix . "type"} eq 'url')
	{
		if ($item->{"link_name"} eq 'amazon asin' && $prefix eq 'link1_')
		{
			($text, ) = Album->ParseAmazonURL($item->{link1_name});
			$m->out("<b>");
		}
		else
		{
			use Encode;
			my $url = $item->{$prefix . "name"};
			$text = $url;
			if ($item->{"link_name"} eq 'wikipedia' && $prefix eq 'link1_')
			{
				$text =~ s/^http:\/\/(\w{2,})\.wikipedia\.org\/wiki\/(.*)$/$1: $2/o;
				$text =~ tr/_/ /;
			}
			# decode the URL
			my $decoded_text = $text;
			$decoded_text =~ s/\%([\dA-Fa-f]{2})/pack('C', hex($1))/oeg;
			$text = $decoded_text
				if (Encode::decode_utf8($decoded_text));
			$m->out('<b><a href="'.$url.'" title="'.encode_entities($text).'" rel="nofollow">');
			# shorten url's that are longer than ~75 chars
			$text = (length($text) > 75
					 ? encode_entities(substr($text, 0, 72)) . "&#8230;"
					 : encode_entities($text));
		}
	}
	else
	{
		$m->out('<b><a href="/show'.
				$item->{$prefix . "type"} . '.html?'.
				$item->{$prefix . "type"} . 'id=' .
				$item->{$prefix . "id"}.'">');
	}
	$text = encode_entities($item->{$prefix . "name"} eq '' ? $name : $item->{$prefix . "name"}) unless $text;

	$m->out($text);
	$m->out("</a></b>");

	$m->out('</span>') if ($mp);

</%perl>

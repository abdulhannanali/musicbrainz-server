<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Renders the relationships of a track.
	#
	# $Id: track_relationships 8548 2006-10-19 07:41:02Z dave $
	#
</%perl>
<%args>

	$id
	$type
	$name => ""
	$relationships
	$max_lines => 4
	$max_links_per_line => 4
	$track => 0
	$expanded => 0
	$modlinks => 0
	$returnto => 0
	$release => undef

</%args>
<%perl>

	sub ConvertToLines
	{
		my ($links, $expanded) = @_;
		my @lines;

		my $i = 0;
		my $num_links = scalar(@$links);

		while ($i < $num_links)
		{
			my @line;
		
			my $a = $links->[$i];
			push @line, $a;
			$i++;

			if (!$expanded)
			{
				while ($i < $num_links) {
					my $b = $links->[$i];
					last if ($a->{link_phrase} ne $b->{link_phrase} ||
				         	$a->{begindate} ne $b->{begindate} ||
				         	$a->{enddate} ne $b->{enddate});
					push @line, $b;
					$i++;
				}
			}

			push @lines, \@line;
		}

		return \@lines;
	}

	my $lines = ConvertToLines($relationships, $expanded);

	my $num_lines = scalar(@$lines);
	my $missing = 0;
	if ($num_lines)
	{
		if ($num_lines > 1 || $track || ($modlinks && $expanded))
		{
			$m->comp("/comp/relationship/outputentity", item => $relationships->[0], index => 0, name => $name)
				if !$track;
			$m->out($track ? '<table class="relationships">' : ':<table width="100%">');
		}
		else
		{
			$m->out('<div>');
			$m->comp("/comp/relationship/outputentity", item => $relationships->[0], index => 0, name => $name)
				if !$track;
		}

		my $i = 0;
		while ($i < $num_lines) 
		{
		
			if ($i + 1 == $max_lines && ($missing > 0 || $num_lines > $max_lines))
			{
				while ($i < $num_lines)
				{
					$missing += scalar(@{$lines->[$i]});
					$i++;
				}
				last;
			}

			my $line = $lines->[$i];
			my $num_links = scalar(@$line);
			if ($num_links)
			{
				my $item = $line->[0];
				if ($num_lines > 1 || $track || ($modlinks && $expanded))
				{
					$m->out($track ? '<tr><td class="small">' : '<tr><td valign="top" style="text-align:center;width:1em;">&bull;</td><td>')
				}
				$m->out(' ' . $item->{link_phrase} . ' ');

				my $j = 0;
				while ($j < $num_links)
				{
					if ($j == $max_links_per_line)
					{
						$missing += $num_links - $j;
						$m->out(" &#8230;");
						last;
					}
					if ($j != 0)
					{
						if ($j + 1 == $num_links)
						{
							$m->out(' and ');
						}
						else
						{
							$m->out(', ');
						}
					}
					$m->comp("/comp/relationship/outputentity", item => $line->[$j], index => 1, name => $name, release => $release);
					$j++;
				}

				my ($begindate, $has_begindate) = ($item->{begindate}, $item->{begindate} =~ /\S/);
				my ($enddate, $has_enddate) = ($item->{enddate}, $item->{enddate} =~ /\S/);
				if ($has_begindate || $has_enddate)
				{
					if ($has_begindate && $has_enddate && $begindate eq $enddate)
					{
						# if we have a full date, including day, use "on", else
						# use range "in"
						$m->out($begindate =~ /\d+-\d+-\d+/ ? " on " : " in ");
						$m->out($begindate);
					}
					else
					{
						$m->out(" from $begindate") if ($has_begindate);
						$m->out($has_enddate ? " until $enddate" : " to present");
					}
				}

				if ($modlinks && $expanded)
				{
					$m->out('</td><td align="right" valign="top">');
					$m->out('[&nbsp;<a href="/edit/relationship/remove.html?type=' . $item->{link0_type} . '-' .
							$item->{link1_type} . '&amp;id='.$item->{link_id}.'&amp;returnto='.
							$returnto.'">Remove</a>&nbsp;');
					$m->out('|&nbsp;<a href="/edit/relationship/edit.html?type=' . $item->{link0_type} . '-' .
							$item->{link1_type} . '&amp;id='.$item->{link_id}.'&amp;returnto='.
							$returnto.'">Edit</a>&nbsp;]');
				}

				if ($num_lines > 1 || $track || ($modlinks && $expanded))
				{
					$m->out('</td></tr>');
				}
				$i++;
			}
			
		}

		if ($missing > 0)
		{
			$m->out(qq!<tr><td colspan="3">!);
			$m->out("$missing relationship" . ($missing > 1 ? "s" : '') . " not shown. ");
			$m->out(qq!<a href="/show/$type/relationships.html?${type}id=$id">View all relationships &#8230;</a></td></tr>!);
		}

		if ($num_lines > 1 || $track || ($modlinks && $expanded))
		{
			$m->out('</table>');
		}
		else
		{
			$m->out('</div>');
		}
	}

</%perl>

%# vi: set ts=4 sw=4 ft=mason :

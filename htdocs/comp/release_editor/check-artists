<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Check if all the artists have been set correctly. For all the missing
	# present the artistfilter such that the user can choose the artist.
	#
	# $Id$
	#
</%perl>
<%args>

	$mb
	$tracks => 0

</%args>
<%perl>

	# default = not checked.
	$ARGS{"v::checkedartists"} = 0;

	# prepare lists of missing/edit artists
	my @missing_artists;
	my %edit_artists;
	my $labelfor;
	my %args;

	# returns the full name of the given track field
	# in the ARGS hash.
	sub getField {
		my ($i, $name) = @_;
		return sprintf("tr%d_%s", $i, $name);
    }

	# loop through all the tracks and check their tr{t}_artistid
	# and tr{t}_artistname.
	my $t;
	for $t (0 .. $tracks-1)
	{
		if ($ARGS{getField($t, "artistedit")})
		{
			# if user choose to edit the artist, add the current track
			# index $t to the missing_artists list. We'll keep the artistid
			# associated with the track if the users chooses to
			# cancel the Change Track/Release Artist process...
			$edit_artists{$t} = 1;
			push @missing_artists, $t
		}
		else
		{
			# if the tr{t}_artistid of the current track is not set,
			# mark it as a missing artist
			push @missing_artists, $t
				if not $ARGS{getField($t, "artistid")};
		}
	}

	# if we have no missing artists, every field has an tr{t}_artistid
	if (!@missing_artists)
	{
		$ARGS{"v::checkedartists"} = 1;
		return %ARGS;
	}

	# lets see what we got.
	$m->out("edit_artists: ".join (",", keys %edit_artists)."<br/>");
	$m->out("missing_artists: ".join (",", @missing_artists)."<br/>");

	# loop thorugh all the missing artists, if they are
	# a single hit, update the arguments, else show the form
	if (@missing_artists)
	{
		my ($curr_trackname,
		    $field_artistname, $curr_artistname,
		    $field_artistid, $curr_artistid,
		    $artistfilter_search);

		my @resolved_artists;

		my $artist = Artist->new($mb->{DBH});
		my @artists;
		my $last_artistname;

		foreach $t (@missing_artists)
		{
			$field_artistid = getField($t, "artistid");
			$field_artistname = getField($t, "artistname");
			$curr_artistid = $ARGS{$field_artistid};
			$curr_artistname = $ARGS{$field_artistname};
			$curr_trackname = $ARGS{"track$t"};
			$artistfilter_search = $ARGS{"artistfilter_search"};

			# find new list of artists if the artistname has changed.
			@artists = @{ $artist->GetArtistsFromName($curr_artistname) }
				if ($curr_artistname ne $last_artistname);

			# if a single item was found, set it and redirect
			# back to the form.
			if (@artists == 1 and
				$artists[0]->GetName eq $curr_artistname and
				!$edit_artists{$t})
			{
				$ARGS{getField($t, "artistid")} = $artists[0]->GetId;
				$ARGS{getField($t, "artistname")} = $artists[0]->GetName;
				$ARGS{getField($t, "artistresolution")} = $artists[0]->GetName;
				push @resolved_artists, $t;
				$last_artistname = $curr_artistname;
				next;
			}

			# Use the Search Engine to get a list of artists matching
			# the query $curr_artistname. This takes the alias' into
			# account, too.
			my $engine = SearchEngine->new($mb->{DBH}, "artist");
			$engine->Search(

				# search for the value of the search field, else
				# for the existing name.
				query => $artistfilter_search || $curr_artistname,
				limit => 0,
			);

</%perl>

			<form method="post" action="<% $ARGS{"v::action"} %>" >

%			# delete the current tr{t}_artistname from the arguments,
%			# this will be the new query string.
%			my %args = $m->comp("/comp/form/args-strip-editsuitefields", %ARGS);
%			delete $args{"submitvalue"};

%			$m->comp("/comp/args-to-hidden-fields.inc", %args);

				<& /comp/tablebegin, title => "Select Artist for current track" &>

					<table class="formstyle">

						<tr>
							<td class="label">Track:</td>
							<td><% $curr_trackname %>
						</tr>
						<tr>
							<td class="label">Track #:</td>
							<td><% $t+1 %>
						</tr>

						<& /comp/artistfilter,

							# hand-in the SearchEngine to the artistfilter.
							# This will prevent it from carrying out an own search.
							engine => $engine,
							search => $artistfilter_search || $curr_artistname,
							searchfieldname => "artistfilter_search",

							# which field we're currently selecting.
							# if the new artist is set, we'll set the
							# field corresponding to artistfilter_field with
							# the new value.
							artistfilter_selectedfield => "artistfilter_newartistid",
							artistfilter_field => $field_artistid, # release:artistid / track: tr0_artistid

							# button values which drive the form handling
							# in the page using this component.
							cancelbutton => $ARGS{"SUBMIT_BACKTOFORM"},
							addartistbutton => $ARGS{"SUBMIT_ADDARTIST"},

							selectbutton => $ARGS{"SUBMIT_TRACKARTIST_SELECT"},
							searchbutton => $ARGS{"SUBMIT_TRACKARTIST_SEARCH"},
							searchagainbutton => $ARGS{"SUBMIT_TRACKARTIST_SEARCH"},

							submitvalue => $ARGS{"submitvalue"},

						&>

					</table>

%					# add hidden field to allow selection dblclick
%					# handler on radiobutton to submit a submitvalue
%					# -- value of the select button is not transmitted in this case.
					<& /comp/form/hiddenfield, "submitvalue", $ARGS{"SUBMIT_TRACKARTIST_SELECT"} &>

				<& /comp/tableend &>

			</form>

<%perl>

			# we're selecting an artist, don't show main form.
			$ARGS{"v::validate"} = 0;
			$ARGS{"v::showform"} = 0;
			last;
		}

		# if we have no missing artists, every field has an tr{t}_artistid
		$ARGS{"v::checkedartists"} =
			(@missing_artists == @resolved_artists ? 1 : 0)
	}
	return %ARGS;

</%perl>

%# vi: set ts=4 sw=4 ft=mason :

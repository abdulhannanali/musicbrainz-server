<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Check track sequence, title and length fields
	#
	# $Id$
	#
</%perl>
<%args>

	$tracks

</%args>
<%init>

	# returns the full name of the given track field
	# in the ARGS hash.
	sub getField {
		my ($i, $name) = @_;
		return sprintf("tr%d_%s", $i, $name);
    }

	# Check everything's been entered which should have been.
	# This is sort of already carried out client-side, but of course
	# you can't rely on that.
	# If all OK, return true.
	my $canedit = $ARGS{"v::edit_track_data"} || 0;

	my (%h, $i);
	$h{"releasename"} = 1
		if $ARGS{"releasename"} eq "";

	# default true (if not editable, nothing can be wrong)
	my $checkedsequence = 1;

	# if editing of track features (except trackname) is allowed
	# -> no discid, no toc

	if ($canedit)
	{
		my %seqnumbers;
		my @seqlist;
		for $i (0 .. $tracks-1)
		{
			# check if the track sequence is ok and if they are all distinct
			# disallow invalid tracktimes
			my @error;

			# only count tracks which are not choosen to be deleted.
			if (!$ARGS{"trackdel$i"})
			{
				$h{"track$i"} = 1
					if $ARGS{"track$i"} eq "";

				$h{"track${i}_artistname"} = 1
					if defined $ARGS{"track${i}_artistname"} && $ARGS{"track${i}_artistname"} eq "";

				my $seq = $ARGS{"trackseq$i"};
				my $len = $ARGS{"tracklength$i"};
				push @seqlist, $seq;

				if (not MusicBrainz::Server::Validation::IsNonNegInteger($seq))
				{
					$h{"trackseq$i"} = 1;
					push @error, "Enter a non-negative number";
				}
				if ($seqnumbers{$seq})
				{
					$h{"trackseq$i"} = 1;
					push @error, "Duplicate sequence numbers are not allowed";
				}
				$seqnumbers{$seq} = 1;

				if ($len ne "?:??" and
					Track::UnformatTrackLength($len) < 0)
				{
					$h{"tracklength$i"} = 1;
					push @error, "Invalid time format, use ?:?? for unknown time or
								  minutes and seconds, separated by a colon \":\"";
				}
				$ARGS{"v::track$i"} = join "|", @error
			}
		}

		# check if we have a continous list of sequence numbers,
		# e.g. the highest sequence must be equal to the number
		# of tracks
		my @topseq = sort { $b > $a } @seqlist;
		$checkedsequence = (($topseq[0] == @seqlist) and
						    (keys %seqnumbers == @seqlist)
						    ? 1 : 0);

		# debug output:
		# $m->out("seqlist (".@seqlist.") :: ".(join ",", @seqlist)."<br/>");
		# $m->out("topseq (".@topseq.") :: ".(join ",", @topseq)."<br/>");
		# $m->out("seqnumbers (".(keys %seqnumbers).") :: ".(join ",", sort { $a lt $b } keys %seqnumbers)."<br/>");

		# let's see if we have to swap some tracks
		# only do this if we have a continous list of numbers,
		# without duplicates
		# my %args = %ARGS;
		#
		# if ($checkedsequence)
		# {
		# 	for $i (0 .. $tracks-1)
		# 	{
		# 		my $ni = $ARGS{"trackseq$i"}-1;
		# 		if ($ni != $i)
		# 		{
		# 			$args{"track$ni"} = $ARGS{"track$i"};
		# 			$args{"trackseq$ni"} = $ARGS{"trackseq$i"};
		# 			$args{"trackid$ni"} = $ARGS{"trackid$i"};
		# 			$args{"tracklength$ni"} = $ARGS{"tracklength$i"};
		#
		# 			$args{sprintf "tr%d_artistid", $ni} = $ARGS{sprintf "tr%d_artistid", $i};
		# 			$args{sprintf "tr%d_artistname", $ni} = $ARGS{sprintf "tr%d_artistid", $i};
		# 			$args{sprintf "tr%d_artistresolution", $ni} = $ARGS{sprintf "tr%d_artistid", $i};
		# 			# TODO: what to do with AR's
		# 		}
		# 	}
		# }
		#%ARGS = %args;

	}

	$h{"badsequence"} = 1
		if not $checkedsequence;

	# put the encountered problems into the Arguments hash.
	$ARGS{"v::fields"} = \%h;
	return %ARGS;

</%init>

%# vi: set ts=4 sw=4 ft=mason :

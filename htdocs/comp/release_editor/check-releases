<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Check the release events
	#
	# $Id$
	#
</%perl>
<%init>

	my %h;
	$h{"num"} = 0;

	my $bad_country = 0;
	my $bad_date = 0;
	my %badseq;
	my %allseq;

	my @errors = ();

	my @items = sort map { /^rev_year-(\d+)$/ ? ($1) : () } keys %ARGS;
	for my $j (@items)
	{
		$ARGS{"rev_year-$j"} = "" if ($ARGS{"rev_year-$j"} eq "yyyy");
		$ARGS{"rev_month-$j"} = "" if ($ARGS{"rev_month-$j"} eq "mm");
		$ARGS{"rev_day-$j"} = "" if ($ARGS{"rev_day-$j"} eq "dd");

		my $rev_year = $ARGS{"rev_year-$j"};
		my $rev_month = $ARGS{"rev_month-$j"};
		my $rev_day = $ARGS{"rev_day-$j"};
		my $rev_country = $ARGS{"rev_country-$j"};
		my $rev_id = $ARGS{"rev_id-$j"};
		my $rev_clear = $ARGS{"rev_clear-$j"} || 0;
		my $rev_barcode = $ARGS{"rev_barcode-$j"};

		if (!$rev_clear)
		{
			# Do not validate if all fields are blank, or the
			# fields are blank and the release country is set to the default one.
			MusicBrainz::Server::Validation::TrimInPlace($rev_year, $rev_month, $rev_day, $rev_country, $rev_id);

			if (!($rev_year eq "" and $rev_month eq "" and $rev_day eq "" and
				 ($rev_country eq "" or $rev_country eq UserPreference::get("default_country"))))
			{

				# flag a bad country if it has not been set.
				MusicBrainz::Server::Validation::IsNonNegInteger($rev_country)
					or $h{"badcountry$j"} = 1;

				if (MusicBrainz::Server::Validation::IsValidBarcode($rev_barcode)) {
					push @errors, 'Barcode "' . $rev_barcode . '" should contain only numbers, please remove all non-numeric characters.';
					$h{"badbarcode$j"} = 1;
				}
				else {
					if ($rev_barcode && !MusicBrainz::Server::Validation::IsValidEAN($rev_barcode)) {
						push @errors, 'Barcode "' . $rev_barcode . '" is not a valid EAN barcode.';
						$h{"badbarcode$j"} = 1;
					}
				}

				# flag a bad date if the validation returns false
				my @ymd = MusicBrainz::Server::Validation::IsValidDate($rev_year, $rev_month, $rev_day)
					or $h{"baddate$j"} = 1;
			}
			
		}

	}

	# remember the number of valid release events
	$h{"num"} = @items;

	# put the encountered problems into the Arguments hash.
	$ARGS{"v::releases_errors"} = \@errors;
	$ARGS{"v::releases"} = \%h;
	return %ARGS;

</%init>

%# vi: set ts=4 sw=4 ft=mason :

<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Change the ReleaseArtist to a SingleArtistRelease
	#
	# $Id$
	#
</%perl>
<%args>

	$mb

	$artistfilter_search => ""
	$tracks
	$guessfromtrackartist => 1

</%args>
<%perl>

	# returns the full name of the given track field
	# in the ARGS hash.
	sub getField {
		my ($i, $name) = @_;
		return sprintf("tr%d_%s", $i, $name);
    }

	# start the search
	my $curr_artistname = "";
	my $field_artistid = "artistid";

	# cleanout args array
	my %args = $m->comp("/comp/form/args-strip-editsuitefields", %ARGS);
	delete $args{"submitvalue"};

	if ($guessfromtrackartist)
	{
		# use release artist, else artist of track '
		$curr_artistname = $ARGS{"artistname"} || "";
		$curr_artistname = $ARGS{"tr0_artistname"} || "" if ($curr_artistname eq "");

		$curr_artistname = $ARGS{"sacartist"} if ($ARGS{"sacartist"} ne "");
		delete $ARGS{"sacartist"};

		# if a single item was found, set it and redirect
		# back to the form.
		my @dupes;
		if ($curr_artistname ne "")
		{
			my $artist = Artist->new($mb->{DBH});
			my $artistlist = $artist->GetArtistsFromName($curr_artistname);
			if (@$artistlist == 1 and @$artistlist[0]->GetName eq $curr_artistname)
			{
				# clear the VA-fields
				$artist = @$artistlist[0];
				for (my $t = 0; $t < $tracks; $t++)
				{
					$ARGS{getField($t, "artistid")} = $artist->GetId;
					$ARGS{getField($t, "artistname")} = $artist->GetName;
					$ARGS{getField($t, "artistresolution")} = $artist->GetResolution;
				}
				$ARGS{"v::showform"} = 1;
				$ARGS{"hasmultipletrackartists"} = ($artist->GetId == &ModDefs::VARTIST_ID ? 1 : 0);
				$ARGS{"artistid"} = $artist->GetId;
				$ARGS{"artistname"} = $artist->GetName;
				$ARGS{"artistresolution"} = $artist->GetResolution;

				delete $ARGS{"force_macsac"};
				return %ARGS;
			}

			# get identical names artists
			my $norm_name = MusicBrainz::NormaliseSortText($curr_artistname);
			@dupes = grep {
				MusicBrainz::NormaliseSortText($_->GetName) eq $norm_name
			} @$artistlist;

			my $engine = SearchEngine->new($mb->{DBH}, "artist");
			$engine->Search(
				query => $curr_artistname,
				limit => 0,
			);

			# exclude the various artists artist
			# from the list of selectable artists.
			my @dontshow = ( &ModDefs::VARTIST_ID );
			my @r = do {
				my %dontshow = map { $_=>1 } @dontshow;
				my @r;
				while (my $row = $engine->NextRow)
				{
					next if $dontshow{ $row->{'artistid'} };
					push @r, $row;
				}
				@r;
			};

</%perl>
			<form method="post" action="<% $ARGS{"v::action"} %>" >

				<& /comp/tablebegin, title => "Select Release Artist" &>
					<table class="formstyle">
						<& /comp/artistfilter,

							# hand-in the SearchEngine to the artistfilter.
							# This will prevent it from carrying out an own search.
							engine => $engine,
							search => $artistfilter_search || $curr_artistname,
							searchfieldname => "artistfilter_search",

							# which field we're currently selecting.
							# if the new artist is set, we'll set the
							# field corresponding to artistfilter_field with
							# the new value.
							artistfilter_selectedfield => "artistfilter_newartistid",
							artistfilter_field => $field_artistid, # artistid

							# button values which drive the form handling
							# in the page using this component.
							selectbutton => $ARGS{"SUBMIT_SACARTIST_SELECT"},
							searchbutton => $ARGS{"SUBMIT_SACARTIST_SEARCH"},
							searchagainbutton => $ARGS{"SUBMIT_SACARTIST_SEARCH"},

							cancelbutton => $ARGS{"SUBMIT_BACKTOFORM"},
							addartistbutton => $ARGS{"SUBMIT_ADDARTIST"},

							submitvalue => $ARGS{"submitvalue"},
						&>
					</table>

%				# delete the current tr{t}_artistname from the arguments,
%				# this will be the new query string.
%				my %args = $m->comp("/comp/form/args-strip-editsuitefields", %ARGS);
%				$args{"hasmultipletrackartists"} = 0;

%				delete $args{"artistid"};

%				$m->comp("/comp/args-to-hidden-fields.inc", %args);

%				# add hidden field to allow selection dblclick
%				# handler on radiobutton to submit a submitvalue
%				# -- value of the select button is not transmitted in this case.
				<& /comp/form/hiddenfield, "submitvalue", $ARGS{"SUBMIT_SACARTIST_SELECT"} &>

				<& /comp/tableend &>

			</form>

<%perl>

				# we're selecting an artist, don't show main form.
				$ARGS{"v::validate"} = 0;
				$ARGS{"v::showform"} = 0;
		}
	}

	# do not show form, we're showing the SAC-artist list.
	$ARGS{"v::showform"} = 0;
	$ARGS{"v::validate"} = 0;
	return %ARGS;

</%perl>

%# vi: set ts=4 sw=4 ft=mason :

<%perl>
	# -----------------------------------------------------------------------------
	#                               Musicbrainz.org
	#                        Copyright (c) 2001 Robert Kaye
	# -----------------------------------------------------------------------------
	#  This software is provided "as is", without warranty of any kind, express or
	#  implied, including  but not limited  to the warranties of  merchantability,
	#  fitness for a particular purpose and noninfringement. In no event shall the
	#  authors or  copyright  holders be  liable for any claim,  damages or  other
	#  liability, whether  in an  action of  contract, tort  or otherwise, arising
	#  from,  out of  or in  connection with  the software or  the  use  or  other
	#  dealings in the software.
	#
	#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
	#  Permits anyone the right to use and modify the software without limitations
	#  as long as proper  credits are given  and the original  and modified source
	#  code are included. Requires  that the final product, software derivate from
	#  the original  source or any  software  utilizing a GPL  component, such  as
	#  this, is also licensed under the GPL license.
	# -----------------------------------------------------------------------------
	#
	# Summary:
	# -----------------------------------------------------------------------------
	# Dump all values of the %ARGS hash
	#
	# $Id$
	#
</%perl>
<%args>

	$tracks => 0
	$hasmultipletrackartists => 0

</%args>
<%perl>

	# output debug information
	$m->out("<hr>");

	$m->out("v::formsubmitted = $ARGS{'v::formsubmitted'}<br/>");
	$m->out("v::checkedartists = $ARGS{'v::checkedartists'}<br/>");
	$m->out("v::checkedsimilar = $ARGS{'v::checkedsimilar'}<br/>");
	$m->out("v::showform = $ARGS{'v::showform'}<br/>");
	$m->out("v::validate = $ARGS{'v::validate'}<br/>");
	$m->out("v::action = $ARGS{'v::action'}<br/>");
	$m->out("v::isva = $ARGS{'v::isva'}<br/>");
	$m->out("submitvalue = $ARGS{'submitvalue'}<br/>");

	$m->out("<hr>");
	$m->out("<b>Tracks:</b><br/>");
	$m->out("tracks = $ARGS{'tracks'}<br/>");
	$m->out("v::edit_track_data = $ARGS{'v::edit_track_data'}<br/>");
	$m->comp(".dumpHash", "v::fields", %ARGS);
	$m->out("<hr>");
	$m->out("<b>Release Attributes:</b><br/>");
	$m->comp(".dumpHash", "v::language", %ARGS);
	$m->comp(".dumpHash", "v::attributes", %ARGS);
	$m->comp(".dumpHash", "v::releases", %ARGS);
	$m->out("<hr>");
	$m->out("<b>MAC/SAC:</b><br/>");
	$m->out("v::checkedmacsac = $ARGS{'v::checkedmacsac'}<br/>");
	$m->comp(".dumpHash", "v::macsac", %ARGS);
	$m->out("<hr>");

	$m->out("<table border='1'><tr>");
	$m->out("<th>id</th>");
	$m->out("<th>seq</th>");
	$m->out("<th>name</th>");
	$m->out("<th>length</th>");
	$m->out("<th>delete</th>");
	$m->out("<th>mp</th>");
	$m->out("<th>artistid</th>");
	$m->out("<th>artistname</th>");
	$m->out("<th>artistresolution</th>");
	$m->out("</tr>");

	my $field;
	my %args = $m->comp("/comp/form/args-strip-editsuitefields", %ARGS);
	foreach my $i (0 .. $ARGS{"tracks"}-1) {
		$m->out("<tr>");

		$field = "trackid$i"; $m->out(sprintf "<td>%s</td>", $ARGS{$field}); delete $args{$field};
		$field = "trackseq$i"; $m->out(sprintf "<td>%s</td>", $ARGS{$field}); delete $args{$field};
		$field = "track$i"; $m->out(sprintf "<td>%s</td>", $ARGS{$field}); delete $args{$field};
		$field = "tracklength$i"; $m->out(sprintf "<td>%s</td>", $ARGS{$field}); delete $args{$field};
		$field = "trackdel$i"; $m->out(sprintf "<td>%s</td>", $ARGS{$field}); delete $args{$field};
		$field = "trackmp$i"; $m->out(sprintf "<td>%s</td>", $ARGS{$field}); delete $args{$field};

		$field = sprintf "tr%d_artistid", $i;
		$m->out(sprintf "<td>%s</td>", $ARGS{$field});
		delete $args{$field};

		$field = sprintf "tr%d_artistname", $i;
		$m->out(sprintf "<td>%s</td>", $ARGS{$field});
		delete $args{$field};

		$field = sprintf "tr%d_artistresolution", $i;
		$m->out(sprintf "<td>%s</td>", $ARGS{$field});
		delete $args{$field};

		$m->out("</tr>");


		# -------------------------------------------------------------------------
		# ADVANCED RELATIONSHIPS
		# -------------------------------------------------------------------------
		my @trackrel = sort map { /^tr${i}_rel(\d+)_typeid$/ ? ($1) : () } keys %args;

		if (@trackrel)
		{
			$m->out(qq(<tr>));
			$m->out(qq(<td colspan="2"></td>));
			$m->out(qq(<td colspan="6">));
			$m->out(qq(<table border="1">));

			# list the existing attributes
			for my $j (@trackrel)
			{
				$m->out(qq(<tr>));

				# relationship details

				$field = sprintf "tr%d_rel%d_nodeid", $i, $j;
				$m->out(sprintf "<td>%s</td>", $args{$field});
				delete $args{$field};

				$field = sprintf "tr%d_rel%d_typeid", $i, $j;
				$m->out(sprintf "<td>%s</td>", $args{$field});
				delete $args{$field};

				$field = sprintf "tr%d_rel%d_begindate", $i, $j;
				$m->out(sprintf "<td>%s</td>", $args{$field});
				delete $args{$field};

				$field = sprintf "tr%d_rel%d_enddate", $i, $j;
				$m->out(sprintf "<td>%s</td>", $args{$field});
				delete $args{$field};

				# linked entity
				$field = sprintf "tr%d_rel%d_e_type", $i, $j;
				$m->out(sprintf "<td>%s</td>", $args{$field});
				delete $args{$field};

				$field = sprintf "tr%d_rel%d_e_id", $i, $j;
				$m->out(sprintf "<td>%s</td>", $args{$field});
				delete $args{$field};

				$field = sprintf "tr%d_rel%d_e_name", $i, $j;
				$m->out(sprintf "<td>%s</td>", $args{$field});
				delete $args{$field};

				$field = sprintf "tr%d_rel%d_e_resolution", $i, $j;
				$m->out(sprintf "<td>%s</td>", $args{$field});
				delete $args{$field};

				# retrieve array of attributes
				my @relattrs = sort map { /^tr${i}_rel${j}_attr(\d+)$/ ? ($1) : () } keys %ARGS;
				my @attrlist;
				for my $k (@relattrs)
				{
					$field = sprintf "tr%d_rel%d_attr%d", $i, $j, $k;
					push @attrlist, $args{$field};
					delete $args{$field};
				}
				$m->out(sprintf "<td>%s</td>", join ",", @attrlist);
				$m->out(qq(</tr>));
			}
			$m->out(qq(</table>));
			$m->out(qq(</td></tr>));
		}
	}
	$m->out("</table>");

	foreach my $key (sort keys %args)
	{
		$m->out("$key => $ARGS{$key}<br/>");
	}

</%perl>

<%def .dumpHash>
<%perl>

	my ($name, %args) = @_;

	$m->out($name);
	if (not defined $args{$name})
	{
		$m->out(" => undef");
	}
	else
	{
		my %h = %{ $args{$name} };
		$m->out(" (");
		$m->out(int (keys %h));
		$m->out(") => ");
		my ($k,$v);
		while (($k, $v) = each(%h))
		{
			$m->out("$k=$v, ");
		}
	}
	$m->out("<br/>");

</%perl>
</%def>

%# vi: set ts=4 sw=4 ft=mason :
<%perl>
# -----------------------------------------------------------------------------
#                               Musicbrainz.org
#                        Copyright (c) 2001 Robert Kaye
# -----------------------------------------------------------------------------
#  This software is provided "as is", without warranty of any kind, express or
#  implied, including  but not limited  to the warranties of  merchantability,
#  fitness for a particular purpose and noninfringement. In no event shall the
#  authors or  copyright  holders be  liable for any claim,  damages or  other
#  liability, whether  in an  action of  contract, tort  or otherwise, arising
#  from,  out of  or in  connection with  the software or  the  use  or  other
#  dealings in the software.
#
#  GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt
#  Permits anyone the right to use and modify the software without limitations
#  as long as proper  credits are given  and the original  and modified source
#  code are included. Requires  that the final product, software derivate from
#  the original  source or any  software  utilizing a GPL  component, such  as
#  this, is also licensed under the GPL license.
# -----------------------------------------------------------------------------
#
# Summary:
# -----------------------------------------------------------------------------
# Enter the edits of the Add Release process
#
# $Id$
#
</%perl>
<%args>

	$mb

	# artist
	$artistid => undef
	$artistname => undef
	$sortname => undef

	# release
	$releasename => undef
	$attr_status => undef
	$attr_type => undef
	$attr_language => undef
	$attr_script => undef

	# tracks
	$tracks => undef
	$hasmultipletrackartists => undef

	# cd lookup
	$discid => ""
	$toc => ""

	# freedb
	$freedbid => ""
	$freedbcat => ""

	# moderation note
	$notetext => ""

</%args>
<%perl>

	$m->comp("/comp/checkloggedin", 1, 1)
		or return;

	$m->comp("/comp/sidebar-notitle", pagetitle => "Add Release");

	use DebugLog;
	if (my $d = DebugLog->open)
	{
		$d->stamp("cdi/done.html");
		$d->dumper([\%ARGS], ['*ARGS']);
		$d->dumpstring($toc, '$toc') if $toc;
		$d->close;
	}

	# verify that the needed fields are set
	my @errors;
	push @errors, "Release artist not set" if (not defined $artistid or !$artistid);
	push @errors, "Release artist cannot be set to the 'Deleted Artist'" if ($artistid == &ModDefs::DARTIST_ID);
	push @errors, "Release title not set" if (not defined $releasename or $releasename eq "");
	push @errors, "Number of tracks must be greater than 0" if (!$tracks);
	push @errors, "hasmultipletrackartists is not set" if (not defined $hasmultipletrackartists);

	for (my $i = 0; $i < $tracks; $i++)
	{
		next if $ARGS{"trackdel$i"};

		my $trackartist = $ARGS{sprintf "tr%d_artistid", $i};
		my $trackname = $ARGS{sprintf "track%d", $i};
		my $trackseq = $ARGS{sprintf "trackseq%d", $i};

		push @errors, "Track $i: Track artist is not set" if (not defined $trackartist or !$trackartist);
		push @errors, "Track $i: Track artist cannot be set to 'Deleted Artist'" if ($trackartist == &ModDefs::DARTIST_ID);
		push @errors, "Track $i: Track title is not set" if (not defined $trackname or $trackname eq "");
		push @errors, "Track $i: Track number is not set" if (not defined $trackseq or !$trackseq);
	}

	push @errors, "Release status not set" if (not defined $attr_status);
	push @errors, "Release type not set" if (not defined $attr_type);
	push @errors, "Release language not set" if (not defined $attr_language);
	push @errors, "Release script not set" if (not defined $attr_script);

	push @errors, "Internal error: Got freedbid, but no freedbcat" if ($freedbid eq "" and $freedbcat ne "");
	push @errors, "Internal error: Got no freedbid, but freedbcat" if ($freedbid ne "" and $freedbcat eq "");
	push @errors, "Internal error: Got toc, but no discid" if ($toc ne "" and $discid eq "");
	push @errors, "Internal error: Got no toc, but discid" if ($toc eq "" and $discid ne "");


	if (@errors)
	{
		$m->comp("/comp/form/feedbackbox",
			"warning", "Oops",
			qq!Oops, some of the required are missing from your form submission, but they should have been
			   checked by the review page before. Please press the Back button in your browser and try again.
			   If that does not help, please enter a bug report on <a href="http://bugs.musicbrainz.org/newticket">
			   our bug tracker</a>. Thanks\!<ul><li>!
			 . join ("</li><li>", @errors)
			 . "</li></ul>");
	}
	else
	{
		my (@offsets);
		if ($toc ne "")
		{
			@offsets = split / /, $toc;
			shift @offsets; # first
			shift @offsets; # last
			my $leadout = shift @offsets;
			push @offsets, $leadout;
		}
		my $new = "";

		# retrieve 0..n tracks from the arguments
		my $trackdata = "";

		# skip deleted tracks, and use internal counter ($realtracks) to
		# handle track offsets. Insert.pm expects the tracks to be
		# numbered from a startindex of 1.
		my $realtracks = 1;
		for (my $i = 0; $i < $tracks; $i++)
		{

			if (!$ARGS{"trackdel$i"})
			{
				MusicBrainz::Server::Validation::TrimInPlace($ARGS{"track$i"});
				$trackdata .= "Track" . ($realtracks) . "=" . $ARGS{"track$i"} . "\n";
				if ($toc ne "")
				{
					my $dur = int((($offsets[$i+1] - $offsets[$i])*1000)/75);
					$trackdata .= "TrackDur" . ($realtracks) . "=" . $dur . "\n";
				}
				else
				{
					my $length = Track::UnformatTrackLength($ARGS{"tracklength$i"});
					$length = 0 if $length < 0;
					$trackdata .= "TrackDur" . ($realtracks) . "=" . $length . "\n";
				}

				if ($hasmultipletrackartists)
				{
					my $new_artistid = $ARGS{sprintf "tr%d_artistid", $i};
					$trackdata .= "ArtistID" . ($realtracks) . "=" . $new_artistid . "\n";
				}

				# handled this track, increment non-deleted tracks counter
				$realtracks++;
			}
		}

		# update $tracks variable with real number of tracks
		# ($tracks-number of deleted tracks)
		$tracks = $realtracks;

		MusicBrainz::Server::Validation::TrimInPlace($releasename);

		# build release data.
		$new .= "AlbumName=$releasename\nNumTracks=$tracks\n";
		$new .= "HasMultipleTrackArtists=$hasmultipletrackartists\n";
		$new .= "Attributes=$attr_type,$attr_status\n";
		$new .= "Language=$attr_language,$attr_script\n";
		$new .= "CDIndexId=$discid\n" if ($discid ne "");
		$new .= "TOC=$toc\n" if ($toc ne "");
		$new .= "FreedbId=$freedbid\n" if ($freedbid ne "");
		$new .= "FreedbCat=$freedbcat\n" if ($freedbcat ne "");
		$new .= $trackdata;

		sub _EncodeText
		{
			my $t = $_[0];
			$t =~ s/\$/\$26/g;
			$t =~ s/,/\$2C/g;
			return $t;
		}

		# retrieve the release-dates and countries from the arguments
		for my $j (sort map { /^rev_year-(\d+)$/ ? ($1) : () } keys %ARGS)
		{
			my $rev_year = $ARGS{"rev_year-$j"};
			my $rev_month = $ARGS{"rev_month-$j"};
			my $rev_day = $ARGS{"rev_day-$j"};
			my $rev_country = $ARGS{"rev_country-$j"};
			my $rev_label = $ARGS{"rev_label-$j"};
			my $rev_catno = $ARGS{"rev_catno-$j"};
			my $rev_barcode = $ARGS{"rev_barcode-$j"};
			my $rev_clear = $ARGS{"rev_clear-$j"} || 0;

			$rev_year = "" if ($rev_year eq "yyyy");
			$rev_month = "" if ($rev_month eq "mm");
			$rev_day = "" if ($rev_day eq "dd");

			if (!$rev_clear)
			{
				# Do not validate if all fields are blank, or the
				# fields are blank and the release country is set to the default one.
				MusicBrainz::Server::Validation::TrimInPlace($rev_year, $rev_month, $rev_day, $rev_country, $rev_label, $rev_catno, $rev_barcode);
				if (!($rev_year eq "" and $rev_month eq "" and $rev_day eq "" and
					 ($rev_country eq "" or $rev_country eq UserPreference::get("default_country"))))
				{
					# we insist on a valid country
					MusicBrainz::Server::Validation::IsNonNegInteger($rev_country)
						or return $m->comp("/comp/error",
							"Error: invalid release country entered",
							0, 1,
						);

					# we insist on a valid date
					my @ymd = MusicBrainz::Server::Validation::IsValidDate($rev_year, $rev_month, $rev_day)
						or return $m->comp("/comp/error",
							"Error: invalid release date",
							0, 1,
						);

					no warnings;
					$new .= sprintf("Release%d=%d,%s-%s-%s,%s,%s,%s\n", $j, $rev_country, @ymd, $rev_label, _EncodeText($rev_catno), _EncodeText($rev_barcode));
				}
			}
		}

		#$m->out("<pre>");
		#$m->out($new);
		#$m->out("</pre>");
		#exit;

		# Insert the release moderation.
		# -- Returns the id of the artist (if the artist was created the
		# new artistid of this artist, the releaseid of the created release
		# and the list of moderations that were entered.
		my $in = Insert->new($mb->{DBH});
		my ($newartistid, $releaseid, $mods) = $in->InsertAlbumModeration(
			$new, $session{uid}, $session{privs}, $artistid,
		);

		# TODO no error checking yet on adding the mod note
		if ($mods and @$mods and $notetext =~ /\S/)
		{
			my $sql = Sql->new($mb->{DBH});
			eval {
				$sql->Begin;
				$mods->[0]->InsertNote($session{'uid'}, $notetext);
				$sql->Commit;
			};
			eval { $sql->Rollback } if $@ ne "";
		}

		# TODO no error checking yet on adding the mod note
		if (defined $newartistid && defined $releaseid)
		{
			$m->comp("/comp/redirect",
				sprintf("/show/release/?releaseid=%s&new=1", $releaseid)
			);
		}
		else
		{
			$m->out("An error occurred during the data insertion:<br>");
			my $msg = $in->GetError() || "(no error message returned)";
			$m->out("<pre>" . encode_entities($msg) . "</pre>"); # TODO: test
		}
	}

</%perl>

<& /comp/footer &>

%# vi: set ts=4 sw=4 ft=mason :

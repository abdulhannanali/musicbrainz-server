MusicBrainz Database Replication
================================================================================

There are three different types of MusicBrainz server setup, controlled by
the REPLICATION_TYPE setting in DBDefs.pm.

1. Master server (RT_MASTER) - Changes to the database (e.g. via the web
   interface) are allowed; any changes made cause replication data to be
   exported.  Currently there is only one master server, and that is
   http://www.musicbrainz.org/ itself.

2. Slave server (RT_SLAVE) - Changes to the database (e.g. via the web
   interface) are not allowed.  The only way that the data is changed is by
   importing replication data (as produced by a Master server).

3. Independent server (RT_STANDALONE) - Changes to the database (e.g. via the
   web interface) are allowed.  This type of server neither exports nor imports
   replication data.

The default type of server setup is RT_STANDALONE.  If you want to set up
one of the other types, please read the relevant section below.



Setting up a Master Replication Server (RT_MASTER)
--------------------------------------------------------------------------------

For replication we use the "dbmirror" code from the "contributed" part of
the postgres codebase.  In particular you'll need the "pending.so" file
(we've only tested this on Linux).

Before you run InitDb.pl, set the following in DBDefs.pm:

	sub REPLICATION_TYPE { RT_MASTER }

When you run "InitDb.pl", you'll need to specify the location of the
"pending.so" file:

	./admin/InitDb.pl \
		--echo \
		--createdb \
		--with-pending=/usr/lib/postgresql/lib/pending.so \
		--import \
		~/mbdump*.tar.bz2

The main difference between a master server and a standalone server is that
the master server adds replication triggers to each table, so that any
changes to the data get exported as replication data.

To export replication data, simply run ExportAllTables with the
"--with-replication" option (and do this regularly, so that each replication
packet isn't too large).



Setting up a Slave Replication Server (RT_SLAVE)
--------------------------------------------------------------------------------

If you want to maintain an up-to-date copy of all the latest data from the
main MusicBrainz server, you can set up your MusicBrainz server to be a
"replication slave".  In this mode you can use your server to examine the
data using the usual web pages, but you won't be able to modify the data at
all - to do that, you go back to the main server and modify the data there.
Later on, that change will make its way back to your server as you retrieve
the latest data updates.

To do this you'll need a slightly different set-up.  Firstly, in DBDefs.pm
set REPLICATION_TYPE to RT_SLAVE like so:

	sub REPLICATION_TYPE { RT_SLAVE }

Also, you'll need two Postgres users instead of just one.  One user will have
permission to write to the database (so it can apply the data updates
retrieved from the main server), and the other user will only have permission
to read the data, not modify it.  For example, you might choose
"write_user" for the former and "read_user" for the latter.  In DBDefs.pm
you'll need to enter three sets of database connection details:

* READWRITE - the user who has permission to write to the database
* READONLY - the user who only has permission to read it
* SYSTEM - the "Postgres" user (only used by "InitDb.pl", when you're first
           creating the database)

The database name for READWRITE and READONLY should usually be the same.  For
SYSTEM, the database name should always be "template1".  Usually, the "host"
and "port" values for all three connections should be the same.  For example:

	# How to connect when we need read-write access to the database
	READWRITE => {
	    database	=> "mydatabase",
	    username	=> "write_user",
	    password	=> "",
	    host	=> "",
	    port	=> "",
	},
	# How to connect for read-only access.  See "REPLICATION_TYPE" (below)
	READONLY => {
	    database	=> "mydatabase",
	    username	=> "read_user",
	    password	=> "",
	    host	=> "",
	    port	=> "",
	},
	# How to connect for administrative access
	SYSTEM	=> {
	    database	=> "template1",
	    username	=> "postgres",
	    password	=> "",
	    host	=> "",
	    port	=> "",
	},

To get going as replication slave, you'll then need to download a complete
MusicBrainz database export from a Master server (e.g.
http://www.musicbrainz.org/).  Then you can create and import that dataset:

	./admin/InitDb.pl --createdb --import ~/mbdump*.tar.bz2

To keep your database up-to-date with the data feed from the master, just
run ./admin/replication/LoadReplicationChanges from time to time (e.g. once
an hour).

Handling New Server Releases
--------------------------------------------------------------------------------
TODO: document the process required to cope with new server releases.


/***

    MochiKit.MochiKit 1.4 : PACKED VERSION

    THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please
    diff against the source tree, not this file.

    See <http://mochikit.com/> for documentation, downloads, license, etc.

    (c) 2005 Bob Ippolito.  All rights Reserved.

***/

if(typeof (MochiKit)=="undefined"){
MochiKit={};
}
if(typeof (MochiKit.MochiKit)=="undefined"){
MochiKit.MochiKit={};
}
MochiKit.MochiKit.NAME="MochiKit.MochiKit";
MochiKit.MochiKit.VERSION="1.4";
MochiKit.MochiKit.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
MochiKit.MochiKit.toString=function(){
return this.__repr__();
};
MochiKit.MochiKit.SUBMODULES=["Base","Iter","Logging","DateTime","Format","Async","DOM","Selector","Style","LoggingPane","Color","Signal","Position","Visual"];
if(typeof (JSAN)!="undefined"||typeof (dojo)!="undefined"){
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.MochiKit");
dojo.require("MochiKit.*");
}
if(typeof (JSAN)!="undefined"){
(function(_1){
for(var i=0;i<_1.length;i++){
JSAN.use("MochiKit."+_1[i],[]);
}
})(MochiKit.MochiKit.SUBMODULES);
}
(function(){
var _3=MochiKit.Base.extend;
var _4=MochiKit.MochiKit;
var _5=_4.SUBMODULES;
var _6=[];
var _7=[];
var _8={};
var i,k,m,_c;
for(i=0;i<_5.length;i++){
m=MochiKit[_5[i]];
_3(_6,m.EXPORT);
_3(_7,m.EXPORT_OK);
for(k in m.EXPORT_TAGS){
_8[k]=_3(_8[k],m.EXPORT_TAGS[k]);
}
_c=m.EXPORT_TAGS[":all"];
if(!_c){
_c=_3(null,m.EXPORT,m.EXPORT_OK);
}
var j;
for(j=0;j<_c.length;j++){
k=_c[j];
_4[k]=m[k];
}
}
_4.EXPORT=_6;
_4.EXPORT_OK=_7;
_4.EXPORT_TAGS=_8;
}());
}else{
if(typeof (MochiKit.__compat__)=="undefined"){
MochiKit.__compat__=true;
}
(function(){
if(typeof (document)=="undefined"){
return;
}
var _e=document.getElementsByTagName("script");
var _f="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
var _10=null;
var _11=null;
var _12={};
var i;
for(i=0;i<_e.length;i++){
var src=_e[i].getAttribute("src");
if(!src){
continue;
}
_12[src]=true;
if(src.match(/MochiKit.js$/)){
_10=src.substring(0,src.lastIndexOf("MochiKit.js"));
_11=_e[i];
}
}
if(_10===null){
return;
}
var _15=MochiKit.MochiKit.SUBMODULES;
for(var i=0;i<_15.length;i++){
if(MochiKit[_15[i]]){
continue;
}
var uri=_10+_15[i]+".js";
if(uri in _12){
continue;
}
if(document.documentElement&&document.documentElement.namespaceURI==_f){
var s=document.createElementNS(_f,"script");
s.setAttribute("id","MochiKit_"+_10+_15[i]);
s.setAttribute("src",uri);
s.setAttribute("type","application/x-javascript");
_11.parentNode.appendChild(s);
}else{
document.write("<script src=\""+uri+"\" type=\"text/javascript\"></script>");
}
}
})();
}
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.Base");
}
if(typeof (MochiKit)=="undefined"){
MochiKit={};
}
if(typeof (MochiKit.Base)=="undefined"){
MochiKit.Base={};
}
if(typeof (MochiKit.__export__)=="undefined"){
MochiKit.__export__=(MochiKit.__compat__||(typeof (JSAN)=="undefined"&&typeof (dojo)=="undefined"));
}
MochiKit.Base.VERSION="1.4";
MochiKit.Base.NAME="MochiKit.Base";
MochiKit.Base.update=function(_18,obj){
if(_18===null){
_18={};
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
if(typeof (o)!="undefined"&&o!==null){
for(var k in o){
_18[k]=o[k];
}
}
}
return _18;
};
MochiKit.Base.update(MochiKit.Base,{__repr__:function(){
return "["+this.NAME+" "+this.VERSION+"]";
},toString:function(){
return this.__repr__();
},camelize:function(_1d){
var arr=_1d.split("-");
var cc=arr[0];
for(var i=1;i<arr.length;i++){
cc+=arr[i].charAt(0).toUpperCase()+arr[i].substring(1);
}
return cc;
},counter:function(n){
if(arguments.length===0){
n=1;
}
return function(){
return n++;
};
},clone:function(obj){
var me=arguments.callee;
if(arguments.length==1){
me.prototype=obj;
return new me();
}
},_flattenArray:function(res,lst){
for(var i=0;i<lst.length;i++){
var o=lst[i];
if(o instanceof Array){
arguments.callee(res,o);
}else{
res.push(o);
}
}
return res;
},flattenArray:function(lst){
return MochiKit.Base._flattenArray([],lst);
},flattenArguments:function(lst){
var res=[];
var m=MochiKit.Base;
var _2c=m.extend(null,arguments);
while(_2c.length){
var o=_2c.shift();
if(o&&typeof (o)=="object"&&typeof (o.length)=="number"){
for(var i=o.length-1;i>=0;i--){
_2c.unshift(o[i]);
}
}else{
res.push(o);
}
}
return res;
},extend:function(_2f,obj,_31){
if(!_31){
_31=0;
}
if(obj){
var l=obj.length;
if(typeof (l)!="number"){
if(typeof (MochiKit.Iter)!="undefined"){
obj=MochiKit.Iter.list(obj);
l=obj.length;
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
if(!_2f){
_2f=[];
}
for(var i=_31;i<l;i++){
_2f.push(obj[i]);
}
}
return _2f;
},updatetree:function(_34,obj){
if(_34===null){
_34={};
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
if(typeof (o)!="undefined"&&o!==null){
for(var k in o){
var v=o[k];
if(typeof (_34[k])=="object"&&typeof (v)=="object"){
arguments.callee(_34[k],v);
}else{
_34[k]=v;
}
}
}
}
return _34;
},setdefault:function(_3a,obj){
if(_3a===null){
_3a={};
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
for(var k in o){
if(!(k in _3a)){
_3a[k]=o[k];
}
}
}
return _3a;
},keys:function(obj){
var _40=[];
for(var _41 in obj){
_40.push(_41);
}
return _40;
},values:function(obj){
var _43=[];
for(var _44 in obj){
_43.push(obj[_44]);
}
return _43;
},items:function(obj){
var _46=[];
var e;
for(var _48 in obj){
var v;
try{
v=obj[_48];
}
catch(e){
continue;
}
_46.push([_48,v]);
}
return _46;
},_newNamedError:function(_4a,_4b,_4c){
_4c.prototype=new MochiKit.Base.NamedError(_4a.NAME+"."+_4b);
_4a[_4b]=_4c;
},operator:{truth:function(a){
return !!a;
},lognot:function(a){
return !a;
},identity:function(a){
return a;
},not:function(a){
return ~a;
},neg:function(a){
return -a;
},add:function(a,b){
return a+b;
},sub:function(a,b){
return a-b;
},div:function(a,b){
return a/b;
},mod:function(a,b){
return a%b;
},mul:function(a,b){
return a*b;
},and:function(a,b){
return a&b;
},or:function(a,b){
return a|b;
},xor:function(a,b){
return a^b;
},lshift:function(a,b){
return a<<b;
},rshift:function(a,b){
return a>>b;
},zrshift:function(a,b){
return a>>>b;
},eq:function(a,b){
return a==b;
},ne:function(a,b){
return a!=b;
},gt:function(a,b){
return a>b;
},ge:function(a,b){
return a>=b;
},lt:function(a,b){
return a<b;
},le:function(a,b){
return a<=b;
},seq:function(a,b){
return a===b;
},sne:function(a,b){
return a!==b;
},ceq:function(a,b){
return MochiKit.Base.compare(a,b)===0;
},cne:function(a,b){
return MochiKit.Base.compare(a,b)!==0;
},cgt:function(a,b){
return MochiKit.Base.compare(a,b)==1;
},cge:function(a,b){
return MochiKit.Base.compare(a,b)!=-1;
},clt:function(a,b){
return MochiKit.Base.compare(a,b)==-1;
},cle:function(a,b){
return MochiKit.Base.compare(a,b)!=1;
},logand:function(a,b){
return a&&b;
},logor:function(a,b){
return a||b;
},contains:function(a,b){
return b in a;
}},forwardCall:function(_8a){
return function(){
return this[_8a].apply(this,arguments);
};
},itemgetter:function(_8b){
return function(arg){
return arg[_8b];
};
},typeMatcher:function(){
var _8d={};
for(var i=0;i<arguments.length;i++){
var typ=arguments[i];
_8d[typ]=typ;
}
return function(){
for(var i=0;i<arguments.length;i++){
if(!(typeof (arguments[i]) in _8d)){
return false;
}
}
return true;
};
},isNull:function(){
for(var i=0;i<arguments.length;i++){
if(arguments[i]!==null){
return false;
}
}
return true;
},isUndefinedOrNull:function(){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
if(!(typeof (o)=="undefined"||o===null)){
return false;
}
}
return true;
},isEmpty:function(obj){
return !MochiKit.Base.isNotEmpty.apply(this,arguments);
},isNotEmpty:function(obj){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
if(!(o&&o.length)){
return false;
}
}
return true;
},isArrayLike:function(){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
var typ=typeof (o);
if((typ!="object"&&!(typ=="function"&&typeof (o.item)=="function"))||o===null||typeof (o.length)!="number"||o.nodeType===3){
return false;
}
}
return true;
},isDateLike:function(){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
if(typeof (o)!="object"||o===null||typeof (o.getTime)!="function"){
return false;
}
}
return true;
},xmap:function(fn){
if(fn===null){
return MochiKit.Base.extend(null,arguments,1);
}
var _9e=[];
for(var i=1;i<arguments.length;i++){
_9e.push(fn(arguments[i]));
}
return _9e;
},map:function(fn,lst){
var m=MochiKit.Base;
var itr=MochiKit.Iter;
var _a4=m.isArrayLike;
if(arguments.length<=2){
if(!_a4(lst)){
if(itr){
lst=itr.list(lst);
if(fn===null){
return lst;
}
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
if(fn===null){
return m.extend(null,lst);
}
var _a5=[];
for(var i=0;i<lst.length;i++){
_a5.push(fn(lst[i]));
}
return _a5;
}else{
if(fn===null){
fn=Array;
}
var _a7=null;
for(i=1;i<arguments.length;i++){
if(!_a4(arguments[i])){
if(itr){
return itr.list(itr.imap.apply(null,arguments));
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
var l=arguments[i].length;
if(_a7===null||_a7>l){
_a7=l;
}
}
_a5=[];
for(i=0;i<_a7;i++){
var _a9=[];
for(var j=1;j<arguments.length;j++){
_a9.push(arguments[j][i]);
}
_a5.push(fn.apply(this,_a9));
}
return _a5;
}
},xfilter:function(fn){
var _ac=[];
if(fn===null){
fn=MochiKit.Base.operator.truth;
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
if(fn(o)){
_ac.push(o);
}
}
return _ac;
},filter:function(fn,lst,_b1){
var _b2=[];
var m=MochiKit.Base;
if(!m.isArrayLike(lst)){
if(MochiKit.Iter){
lst=MochiKit.Iter.list(lst);
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
if(fn===null){
fn=m.operator.truth;
}
if(typeof (Array.prototype.filter)=="function"){
return Array.prototype.filter.call(lst,fn,_b1);
}else{
if(typeof (_b1)=="undefined"||_b1===null){
for(var i=0;i<lst.length;i++){
var o=lst[i];
if(fn(o)){
_b2.push(o);
}
}
}else{
for(i=0;i<lst.length;i++){
o=lst[i];
if(fn.call(_b1,o)){
_b2.push(o);
}
}
}
}
return _b2;
},_wrapDumbFunction:function(_b6){
return function(){
switch(arguments.length){
case 0:
return _b6();
case 1:
return _b6(arguments[0]);
case 2:
return _b6(arguments[0],arguments[1]);
case 3:
return _b6(arguments[0],arguments[1],arguments[2]);
}
var _b7=[];
for(var i=0;i<arguments.length;i++){
_b7.push("arguments["+i+"]");
}
return eval("(func("+_b7.join(",")+"))");
};
},methodcaller:function(_b9){
var _ba=MochiKit.Base.extend(null,arguments,1);
if(typeof (_b9)=="function"){
return function(obj){
return _b9.apply(obj,_ba);
};
}else{
return function(obj){
return obj[_b9].apply(obj,_ba);
};
}
},method:function(_bd,_be){
var m=MochiKit.Base;
return m.bind.apply(this,m.extend([_be,_bd],arguments,2));
},compose:function(f1,f2){
var _c2=[];
var m=MochiKit.Base;
if(arguments.length===0){
throw new TypeError("compose() requires at least one argument");
}
for(var i=0;i<arguments.length;i++){
var fn=arguments[i];
if(typeof (fn)!="function"){
throw new TypeError(m.repr(fn)+" is not a function");
}
_c2.push(fn);
}
return function(){
var _c6=arguments;
for(var i=_c2.length-1;i>=0;i--){
_c6=[_c2[i].apply(this,_c6)];
}
return _c6[0];
};
},bind:function(_c8,_c9){
if(typeof (_c8)=="string"){
_c8=_c9[_c8];
}
var _ca=_c8.im_func;
var _cb=_c8.im_preargs;
var _cc=_c8.im_self;
var m=MochiKit.Base;
if(typeof (_c8)=="function"&&typeof (_c8.apply)=="undefined"){
_c8=m._wrapDumbFunction(_c8);
}
if(typeof (_ca)!="function"){
_ca=_c8;
}
if(typeof (_c9)!="undefined"){
_cc=_c9;
}
if(typeof (_cb)=="undefined"){
_cb=[];
}else{
_cb=_cb.slice();
}
m.extend(_cb,arguments,2);
var _ce=function(){
var _cf=arguments;
var me=arguments.callee;
if(me.im_preargs.length>0){
_cf=m.concat(me.im_preargs,_cf);
}
var _d1=me.im_self;
if(!_d1){
_d1=this;
}
return me.im_func.apply(_d1,_cf);
};
_ce.im_self=_cc;
_ce.im_func=_ca;
_ce.im_preargs=_cb;
return _ce;
},bindMethods:function(_d2){
var _d3=MochiKit.Base.bind;
for(var k in _d2){
var _d5=_d2[k];
if(typeof (_d5)=="function"){
_d2[k]=_d3(_d5,_d2);
}
}
},registerComparator:function(_d6,_d7,_d8,_d9){
MochiKit.Base.comparatorRegistry.register(_d6,_d7,_d8,_d9);
},_primitives:{"boolean":true,"string":true,"number":true},compare:function(a,b){
if(a==b){
return 0;
}
var _dc=(typeof (a)=="undefined"||a===null);
var _dd=(typeof (b)=="undefined"||b===null);
if(_dc&&_dd){
return 0;
}else{
if(_dc){
return -1;
}else{
if(_dd){
return 1;
}
}
}
var m=MochiKit.Base;
var _df=m._primitives;
if(!(typeof (a) in _df&&typeof (b) in _df)){
try{
return m.comparatorRegistry.match(a,b);
}
catch(e){
if(e!=m.NotFound){
throw e;
}
}
}
if(a<b){
return -1;
}else{
if(a>b){
return 1;
}
}
var _e0=m.repr;
throw new TypeError(_e0(a)+" and "+_e0(b)+" can not be compared");
},compareDateLike:function(a,b){
return MochiKit.Base.compare(a.getTime(),b.getTime());
},compareArrayLike:function(a,b){
var _e5=MochiKit.Base.compare;
var _e6=a.length;
var _e7=0;
if(_e6>b.length){
_e7=1;
_e6=b.length;
}else{
if(_e6<b.length){
_e7=-1;
}
}
for(var i=0;i<_e6;i++){
var cmp=_e5(a[i],b[i]);
if(cmp){
return cmp;
}
}
return _e7;
},registerRepr:function(_ea,_eb,_ec,_ed){
MochiKit.Base.reprRegistry.register(_ea,_eb,_ec,_ed);
},repr:function(o){
if(typeof (o)=="undefined"){
return "undefined";
}else{
if(o===null){
return "null";
}
}
try{
if(typeof (o.__repr__)=="function"){
return o.__repr__();
}else{
if(typeof (o.repr)=="function"&&o.repr!=arguments.callee){
return o.repr();
}
}
return MochiKit.Base.reprRegistry.match(o);
}
catch(e){
if(typeof (o.NAME)=="string"&&(o.toString==Function.prototype.toString||o.toString==Object.prototype.toString)){
return o.NAME;
}
}
try{
var _ef=(o+"");
}
catch(e){
return "["+typeof (o)+"]";
}
if(typeof (o)=="function"){
_ef=_ef.replace(/^\s+/,"").replace(/\s+/g," ");
var idx=_ef.indexOf("{");
if(idx!=-1){
_ef=_ef.substr(0,idx)+"{...}";
}
}
return _ef;
},reprArrayLike:function(o){
var m=MochiKit.Base;
return "["+m.map(m.repr,o).join(", ")+"]";
},reprString:function(o){
return ("\""+o.replace(/(["\\])/g,"\\$1")+"\"").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r");
},reprNumber:function(o){
return o+"";
},registerJSON:function(_f5,_f6,_f7,_f8){
MochiKit.Base.jsonRegistry.register(_f5,_f6,_f7,_f8);
},evalJSON:function(){
return eval("("+MochiKit.Base._filterJSON(arguments[0])+")");
},_filterJSON:function(s){
var m=s.match(/^\s*\/\*(.*)\*\/\s*$/);
if(m){
return m[1];
}
return s;
},serializeJSON:function(o){
var _fc=typeof (o);
if(_fc=="number"||_fc=="boolean"){
return o+"";
}else{
if(o===null){
return "null";
}
}
var m=MochiKit.Base;
var _fe=m.reprString;
if(_fc=="string"){
return _fe(o);
}
var me=arguments.callee;
var _100;
if(typeof (o.__json__)=="function"){
_100=o.__json__();
if(o!==_100){
return me(_100);
}
}
if(typeof (o.json)=="function"){
_100=o.json();
if(o!==_100){
return me(_100);
}
}
if(_fc!="function"&&typeof (o.length)=="number"){
var res=[];
for(var i=0;i<o.length;i++){
var val=me(o[i]);
if(typeof (val)!="string"){
val="undefined";
}
res.push(val);
}
return "["+res.join(", ")+"]";
}
try{
_100=m.jsonRegistry.match(o);
if(o!==_100){
return me(_100);
}
}
catch(e){
if(e!=m.NotFound){
throw e;
}
}
if(_fc=="undefined"){
throw new TypeError("undefined can not be serialized as JSON");
}
if(_fc=="function"){
return null;
}
res=[];
for(var k in o){
var _105;
if(typeof (k)=="number"){
_105="\""+k+"\"";
}else{
if(typeof (k)=="string"){
_105=_fe(k);
}else{
continue;
}
}
val=me(o[k]);
if(typeof (val)!="string"){
continue;
}
res.push(_105+":"+val);
}
return "{"+res.join(", ")+"}";
},objEqual:function(a,b){
return (MochiKit.Base.compare(a,b)===0);
},arrayEqual:function(self,arr){
if(self.length!=arr.length){
return false;
}
return (MochiKit.Base.compare(self,arr)===0);
},concat:function(){
var rval=[];
var _10b=MochiKit.Base.extend;
for(var i=0;i<arguments.length;i++){
_10b(rval,arguments[i]);
}
return rval;
},keyComparator:function(key){
var m=MochiKit.Base;
var _10f=m.compare;
if(arguments.length==1){
return function(a,b){
return _10f(a[key],b[key]);
};
}
var _112=m.extend(null,arguments);
return function(a,b){
var rval=0;
for(var i=0;(rval===0)&&(i<_112.length);i++){
var key=_112[i];
rval=_10f(a[key],b[key]);
}
return rval;
};
},reverseKeyComparator:function(key){
var _119=MochiKit.Base.keyComparator.apply(this,arguments);
return function(a,b){
return _119(b,a);
};
},partial:function(func){
var m=MochiKit.Base;
return m.bind.apply(this,m.extend([func,undefined],arguments,1));
},listMinMax:function(_11e,lst){
if(lst.length===0){
return null;
}
var cur=lst[0];
var _121=MochiKit.Base.compare;
for(var i=1;i<lst.length;i++){
var o=lst[i];
if(_121(o,cur)==_11e){
cur=o;
}
}
return cur;
},objMax:function(){
return MochiKit.Base.listMinMax(1,arguments);
},objMin:function(){
return MochiKit.Base.listMinMax(-1,arguments);
},findIdentical:function(lst,_125,_126,end){
if(typeof (end)=="undefined"||end===null){
end=lst.length;
}
if(typeof (_126)=="undefined"||_126===null){
_126=0;
}
for(var i=_126;i<end;i++){
if(lst[i]===_125){
return i;
}
}
return -1;
},mean:function(){
var sum=0;
var m=MochiKit.Base;
var args=m.extend(null,arguments);
var _12c=args.length;
while(args.length){
var o=args.shift();
if(o&&typeof (o)=="object"&&typeof (o.length)=="number"){
_12c+=o.length-1;
for(var i=o.length-1;i>=0;i--){
sum+=o[i];
}
}else{
sum+=o;
}
}
if(_12c<=0){
throw new TypeError("mean() requires at least one argument");
}
return sum/_12c;
},median:function(){
var data=MochiKit.Base.flattenArguments(arguments);
if(data.length===0){
throw new TypeError("median() requires at least one argument");
}
data.sort(compare);
if(data.length%2==0){
var _130=data.length/2;
return (data[_130]+data[_130-1])/2;
}else{
return data[(data.length-1)/2];
}
},findValue:function(lst,_132,_133,end){
if(typeof (end)=="undefined"||end===null){
end=lst.length;
}
if(typeof (_133)=="undefined"||_133===null){
_133=0;
}
var cmp=MochiKit.Base.compare;
for(var i=_133;i<end;i++){
if(cmp(lst[i],_132)===0){
return i;
}
}
return -1;
},nodeWalk:function(node,_138){
var _139=[node];
var _13a=MochiKit.Base.extend;
while(_139.length){
var res=_138(_139.shift());
if(res){
_13a(_139,res);
}
}
},nameFunctions:function(_13c){
var base=_13c.NAME;
if(typeof (base)=="undefined"){
base="";
}else{
base=base+".";
}
for(var name in _13c){
var o=_13c[name];
if(typeof (o)=="function"&&typeof (o.NAME)=="undefined"){
try{
o.NAME=base+name;
}
catch(e){
}
}
}
},queryString:function(_140,_141){
if(typeof (MochiKit.DOM)!="undefined"&&arguments.length==1&&(typeof (_140)=="string"||(typeof (_140.nodeType)!="undefined"&&_140.nodeType>0))){
var kv=MochiKit.DOM.formContents(_140);
_140=kv[0];
_141=kv[1];
}else{
if(arguments.length==1){
if(typeof (_140.length)=="number"&&_140.length==2){
return arguments.callee(_140[0],_140[1]);
}
var o=_140;
_140=[];
_141=[];
for(var k in o){
var v=o[k];
if(typeof (v)=="function"){
continue;
}else{
if(MochiKit.Base.isArrayLike(v)){
for(var i=0;i<v.length;i++){
_140.push(k);
_141.push(v[i]);
}
}else{
_140.push(k);
_141.push(v);
}
}
}
}
}
var rval=[];
var len=Math.min(_140.length,_141.length);
var _149=MochiKit.Base.urlEncode;
for(var i=0;i<len;i++){
v=_141[i];
if(typeof (v)!="undefined"&&v!==null){
rval.push(_149(_140[i])+"="+_149(v));
}
}
return rval.join("&");
},parseQueryString:function(_14a,_14b){
var qstr=(_14a.charAt(0)=="?")?_14a.substring(1):_14a;
var _14d=qstr.replace(/\+/g,"%20").split(/(\&amp\;|\&\#38\;|\&#x26;|\&)/);
var o={};
var _14f;
if(typeof (decodeURIComponent)!="undefined"){
_14f=decodeURIComponent;
}else{
_14f=unescape;
}
if(_14b){
for(var i=0;i<_14d.length;i++){
var pair=_14d[i].split("=");
var name=_14f(pair.shift());
if(!name){
continue;
}
var arr=o[name];
if(!(arr instanceof Array)){
arr=[];
o[name]=arr;
}
arr.push(_14f(pair.join("=")));
}
}else{
for(i=0;i<_14d.length;i++){
pair=_14d[i].split("=");
var name=pair.shift();
if(!name){
continue;
}
o[_14f(name)]=_14f(pair.join("="));
}
}
return o;
}});
MochiKit.Base.AdapterRegistry=function(){
this.pairs=[];
};
MochiKit.Base.AdapterRegistry.prototype={register:function(name,_155,wrap,_157){
if(_157){
this.pairs.unshift([name,_155,wrap]);
}else{
this.pairs.push([name,_155,wrap]);
}
},match:function(){
for(var i=0;i<this.pairs.length;i++){
var pair=this.pairs[i];
if(pair[1].apply(this,arguments)){
return pair[2].apply(this,arguments);
}
}
throw MochiKit.Base.NotFound;
},unregister:function(name){
for(var i=0;i<this.pairs.length;i++){
var pair=this.pairs[i];
if(pair[0]==name){
this.pairs.splice(i,1);
return true;
}
}
return false;
}};
MochiKit.Base.EXPORT=["flattenArray","noop","camelize","counter","clone","extend","update","updatetree","setdefault","keys","values","items","NamedError","operator","forwardCall","itemgetter","typeMatcher","isCallable","isUndefined","isUndefinedOrNull","isNull","isEmpty","isNotEmpty","isArrayLike","isDateLike","xmap","map","xfilter","filter","methodcaller","compose","bind","bindMethods","NotFound","AdapterRegistry","registerComparator","compare","registerRepr","repr","objEqual","arrayEqual","concat","keyComparator","reverseKeyComparator","partial","merge","listMinMax","listMax","listMin","objMax","objMin","nodeWalk","zip","urlEncode","queryString","serializeJSON","registerJSON","evalJSON","parseQueryString","findValue","findIdentical","flattenArguments","method","average","mean","median"];
MochiKit.Base.EXPORT_OK=["nameFunctions","comparatorRegistry","reprRegistry","jsonRegistry","compareDateLike","compareArrayLike","reprArrayLike","reprString","reprNumber"];
MochiKit.Base._exportSymbols=function(_15d,_15e){
if(!MochiKit.__export__){
return;
}
var all=_15e.EXPORT_TAGS[":all"];
for(var i=0;i<all.length;i++){
_15d[all[i]]=_15e[all[i]];
}
};
MochiKit.Base.__new__=function(){
var m=this;
m.noop=m.operator.identity;
m.forward=m.forwardCall;
m.find=m.findValue;
if(typeof (encodeURIComponent)!="undefined"){
m.urlEncode=function(_162){
return encodeURIComponent(_162).replace(/\'/g,"%27");
};
}else{
m.urlEncode=function(_163){
return escape(_163).replace(/\+/g,"%2B").replace(/\"/g,"%22").rval.replace(/\'/g,"%27");
};
}
m.NamedError=function(name){
this.message=name;
this.name=name;
};
m.NamedError.prototype=new Error();
m.update(m.NamedError.prototype,{repr:function(){
if(this.message&&this.message!=this.name){
return this.name+"("+m.repr(this.message)+")";
}else{
return this.name+"()";
}
},toString:m.forwardCall("repr")});
m.NotFound=new m.NamedError("MochiKit.Base.NotFound");
m.listMax=m.partial(m.listMinMax,1);
m.listMin=m.partial(m.listMinMax,-1);
m.isCallable=m.typeMatcher("function");
m.isUndefined=m.typeMatcher("undefined");
m.merge=m.partial(m.update,null);
m.zip=m.partial(m.map,null);
m.average=m.mean;
m.comparatorRegistry=new m.AdapterRegistry();
m.registerComparator("dateLike",m.isDateLike,m.compareDateLike);
m.registerComparator("arrayLike",m.isArrayLike,m.compareArrayLike);
m.reprRegistry=new m.AdapterRegistry();
m.registerRepr("arrayLike",m.isArrayLike,m.reprArrayLike);
m.registerRepr("string",m.typeMatcher("string"),m.reprString);
m.registerRepr("numbers",m.typeMatcher("number","boolean"),m.reprNumber);
m.jsonRegistry=new m.AdapterRegistry();
var all=m.concat(m.EXPORT,m.EXPORT_OK);
m.EXPORT_TAGS={":common":m.concat(m.EXPORT_OK),":all":all};
m.nameFunctions(this);
};
MochiKit.Base.__new__();
if(MochiKit.__export__){
compare=MochiKit.Base.compare;
compose=MochiKit.Base.compose;
serializeJSON=MochiKit.Base.serializeJSON;
}
MochiKit.Base._exportSymbols(this,MochiKit.Base);
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.Iter");
dojo.require("MochiKit.Base");
}
if(typeof (JSAN)!="undefined"){
JSAN.use("MochiKit.Base",[]);
}
try{
if(typeof (MochiKit.Base)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Iter depends on MochiKit.Base!";
}
if(typeof (MochiKit.Iter)=="undefined"){
MochiKit.Iter={};
}
MochiKit.Iter.NAME="MochiKit.Iter";
MochiKit.Iter.VERSION="1.4";
MochiKit.Base.update(MochiKit.Iter,{__repr__:function(){
return "["+this.NAME+" "+this.VERSION+"]";
},toString:function(){
return this.__repr__();
},registerIteratorFactory:function(name,_167,_168,_169){
MochiKit.Iter.iteratorRegistry.register(name,_167,_168,_169);
},iter:function(_16a,_16b){
var self=MochiKit.Iter;
if(arguments.length==2){
return self.takewhile(function(a){
return a!=_16b;
},_16a);
}
if(typeof (_16a.next)=="function"){
return _16a;
}else{
if(typeof (_16a.iter)=="function"){
return _16a.iter();
}
}
try{
return self.iteratorRegistry.match(_16a);
}
catch(e){
var m=MochiKit.Base;
if(e==m.NotFound){
e=new TypeError(typeof (_16a)+": "+m.repr(_16a)+" is not iterable");
}
throw e;
}
},count:function(n){
if(!n){
n=0;
}
var m=MochiKit.Base;
return {repr:function(){
return "count("+n+")";
},toString:m.forwardCall("repr"),next:m.counter(n)};
},cycle:function(p){
var self=MochiKit.Iter;
var m=MochiKit.Base;
var lst=[];
var _175=self.iter(p);
return {repr:function(){
return "cycle(...)";
},toString:m.forwardCall("repr"),next:function(){
try{
var rval=_175.next();
lst.push(rval);
return rval;
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
if(lst.length===0){
this.next=function(){
throw self.StopIteration;
};
}else{
var i=-1;
this.next=function(){
i=(i+1)%lst.length;
return lst[i];
};
}
return this.next();
}
}};
},repeat:function(elem,n){
var m=MochiKit.Base;
if(typeof (n)=="undefined"){
return {repr:function(){
return "repeat("+m.repr(elem)+")";
},toString:m.forwardCall("repr"),next:function(){
return elem;
}};
}
return {repr:function(){
return "repeat("+m.repr(elem)+", "+n+")";
},toString:m.forwardCall("repr"),next:function(){
if(n<=0){
throw MochiKit.Iter.StopIteration;
}
n-=1;
return elem;
}};
},next:function(_17b){
return _17b.next();
},izip:function(p,q){
var m=MochiKit.Base;
var self=MochiKit.Iter;
var next=self.next;
var _181=m.map(self.iter,arguments);
return {repr:function(){
return "izip(...)";
},toString:m.forwardCall("repr"),next:function(){
return m.map(next,_181);
}};
},ifilter:function(pred,seq){
var m=MochiKit.Base;
seq=MochiKit.Iter.iter(seq);
if(pred===null){
pred=m.operator.truth;
}
return {repr:function(){
return "ifilter(...)";
},toString:m.forwardCall("repr"),next:function(){
while(true){
var rval=seq.next();
if(pred(rval)){
return rval;
}
}
return undefined;
}};
},ifilterfalse:function(pred,seq){
var m=MochiKit.Base;
seq=MochiKit.Iter.iter(seq);
if(pred===null){
pred=m.operator.truth;
}
return {repr:function(){
return "ifilterfalse(...)";
},toString:m.forwardCall("repr"),next:function(){
while(true){
var rval=seq.next();
if(!pred(rval)){
return rval;
}
}
return undefined;
}};
},islice:function(seq){
var self=MochiKit.Iter;
var m=MochiKit.Base;
seq=self.iter(seq);
var _18d=0;
var stop=0;
var step=1;
var i=-1;
if(arguments.length==2){
stop=arguments[1];
}else{
if(arguments.length==3){
_18d=arguments[1];
stop=arguments[2];
}else{
_18d=arguments[1];
stop=arguments[2];
step=arguments[3];
}
}
return {repr:function(){
return "islice("+["...",_18d,stop,step].join(", ")+")";
},toString:m.forwardCall("repr"),next:function(){
var rval;
while(i<_18d){
rval=seq.next();
i++;
}
if(_18d>=stop){
throw self.StopIteration;
}
_18d+=step;
return rval;
}};
},imap:function(fun,p,q){
var m=MochiKit.Base;
var self=MochiKit.Iter;
var _197=m.map(self.iter,m.extend(null,arguments,1));
var map=m.map;
var next=self.next;
return {repr:function(){
return "imap(...)";
},toString:m.forwardCall("repr"),next:function(){
return fun.apply(this,map(next,_197));
}};
},applymap:function(fun,seq,self){
seq=MochiKit.Iter.iter(seq);
var m=MochiKit.Base;
return {repr:function(){
return "applymap(...)";
},toString:m.forwardCall("repr"),next:function(){
return fun.apply(self,seq.next());
}};
},chain:function(p,q){
var self=MochiKit.Iter;
var m=MochiKit.Base;
if(arguments.length==1){
return self.iter(arguments[0]);
}
var _1a2=m.map(self.iter,arguments);
return {repr:function(){
return "chain(...)";
},toString:m.forwardCall("repr"),next:function(){
while(_1a2.length>1){
try{
return _1a2[0].next();
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
_1a2.shift();
}
}
if(_1a2.length==1){
var arg=_1a2.shift();
this.next=m.bind("next",arg);
return this.next();
}
throw self.StopIteration;
}};
},takewhile:function(pred,seq){
var self=MochiKit.Iter;
seq=self.iter(seq);
return {repr:function(){
return "takewhile(...)";
},toString:MochiKit.Base.forwardCall("repr"),next:function(){
var rval=seq.next();
if(!pred(rval)){
this.next=function(){
throw self.StopIteration;
};
this.next();
}
return rval;
}};
},dropwhile:function(pred,seq){
seq=MochiKit.Iter.iter(seq);
var m=MochiKit.Base;
var bind=m.bind;
return {"repr":function(){
return "dropwhile(...)";
},"toString":m.forwardCall("repr"),"next":function(){
while(true){
var rval=seq.next();
if(!pred(rval)){
break;
}
}
this.next=bind("next",seq);
return rval;
}};
},_tee:function(_1ad,sync,_1af){
sync.pos[_1ad]=-1;
var m=MochiKit.Base;
var _1b1=m.listMin;
return {repr:function(){
return "tee("+_1ad+", ...)";
},toString:m.forwardCall("repr"),next:function(){
var rval;
var i=sync.pos[_1ad];
if(i==sync.max){
rval=_1af.next();
sync.deque.push(rval);
sync.max+=1;
sync.pos[_1ad]+=1;
}else{
rval=sync.deque[i-sync.min];
sync.pos[_1ad]+=1;
if(i==sync.min&&_1b1(sync.pos)!=sync.min){
sync.min+=1;
sync.deque.shift();
}
}
return rval;
}};
},tee:function(_1b4,n){
var rval=[];
var sync={"pos":[],"deque":[],"max":-1,"min":-1};
if(arguments.length==1||typeof (n)=="undefined"||n===null){
n=2;
}
var self=MochiKit.Iter;
_1b4=self.iter(_1b4);
var _tee=self._tee;
for(var i=0;i<n;i++){
rval.push(_tee(i,sync,_1b4));
}
return rval;
},list:function(_1bb){
var rval;
if(_1bb instanceof Array){
return _1bb.slice();
}
if(typeof (_1bb)=="function"&&!(_1bb instanceof Function)&&typeof (_1bb.length)=="number"){
rval=[];
for(var i=0;i<_1bb.length;i++){
rval.push(_1bb[i]);
}
return rval;
}
var self=MochiKit.Iter;
_1bb=self.iter(_1bb);
var rval=[];
try{
while(true){
rval.push(_1bb.next());
}
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
return rval;
}
return undefined;
},reduce:function(fn,_1c0,_1c1){
var i=0;
var x=_1c1;
var self=MochiKit.Iter;
_1c0=self.iter(_1c0);
if(arguments.length<3){
try{
x=_1c0.next();
}
catch(e){
if(e==self.StopIteration){
e=new TypeError("reduce() of empty sequence with no initial value");
}
throw e;
}
i++;
}
try{
while(true){
x=fn(x,_1c0.next());
}
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
}
return x;
},range:function(){
var _1c5=0;
var stop=0;
var step=1;
if(arguments.length==1){
stop=arguments[0];
}else{
if(arguments.length==2){
_1c5=arguments[0];
stop=arguments[1];
}else{
if(arguments.length==3){
_1c5=arguments[0];
stop=arguments[1];
step=arguments[2];
}else{
throw new TypeError("range() takes 1, 2, or 3 arguments!");
}
}
}
if(step===0){
throw new TypeError("range() step must not be 0");
}
return {next:function(){
if((step>0&&_1c5>=stop)||(step<0&&_1c5<=stop)){
throw MochiKit.Iter.StopIteration;
}
var rval=_1c5;
_1c5+=step;
return rval;
},repr:function(){
return "range("+[_1c5,stop,step].join(", ")+")";
},toString:MochiKit.Base.forwardCall("repr")};
},sum:function(_1c9,_1ca){
if(typeof (_1ca)=="undefined"||_1ca===null){
_1ca=0;
}
var x=_1ca;
var self=MochiKit.Iter;
_1c9=self.iter(_1c9);
try{
while(true){
x+=_1c9.next();
}
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
}
return x;
},exhaust:function(_1cd){
var self=MochiKit.Iter;
_1cd=self.iter(_1cd);
try{
while(true){
_1cd.next();
}
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
}
},forEach:function(_1cf,func,self){
var m=MochiKit.Base;
if(arguments.length>2){
func=m.bind(func,self);
}
if(m.isArrayLike(_1cf)){
try{
for(var i=0;i<_1cf.length;i++){
func(_1cf[i]);
}
}
catch(e){
if(e!=MochiKit.Iter.StopIteration){
throw e;
}
}
}else{
self=MochiKit.Iter;
self.exhaust(self.imap(func,_1cf));
}
},every:function(_1d4,func){
var self=MochiKit.Iter;
try{
self.ifilterfalse(func,_1d4).next();
return false;
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
return true;
}
},sorted:function(_1d7,cmp){
var rval=MochiKit.Iter.list(_1d7);
if(arguments.length==1){
cmp=MochiKit.Base.compare;
}
rval.sort(cmp);
return rval;
},reversed:function(_1da){
var rval=MochiKit.Iter.list(_1da);
rval.reverse();
return rval;
},some:function(_1dc,func){
var self=MochiKit.Iter;
try{
self.ifilter(func,_1dc).next();
return true;
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
return false;
}
},iextend:function(lst,_1e0){
if(MochiKit.Base.isArrayLike(_1e0)){
for(var i=0;i<_1e0.length;i++){
lst.push(_1e0[i]);
}
}else{
var self=MochiKit.Iter;
_1e0=self.iter(_1e0);
try{
while(true){
lst.push(_1e0.next());
}
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
}
}
return lst;
},groupby:function(_1e3,_1e4){
var m=MochiKit.Base;
var self=MochiKit.Iter;
if(arguments.length<2){
_1e4=m.operator.identity;
}
_1e3=self.iter(_1e3);
var pk=undefined;
var k=undefined;
var v;
function fetch(){
v=_1e3.next();
k=_1e4(v);
}
function eat(){
var ret=v;
v=undefined;
return ret;
}
var _1eb=true;
var _1ec=m.compare;
return {repr:function(){
return "groupby(...)";
},next:function(){
while(_1ec(k,pk)===0){
fetch();
if(_1eb){
_1eb=false;
break;
}
}
pk=k;
return [k,{next:function(){
if(v==undefined){
fetch();
}
if(_1ec(k,pk)!==0){
throw self.StopIteration;
}
return eat();
}}];
}};
},groupby_as_array:function(_1ed,_1ee){
var m=MochiKit.Base;
var self=MochiKit.Iter;
if(arguments.length<2){
_1ee=m.operator.identity;
}
_1ed=self.iter(_1ed);
var _1f1=[];
var _1f2=true;
var _1f3;
var _1f4=m.compare;
while(true){
try{
var _1f5=_1ed.next();
var key=_1ee(_1f5);
}
catch(e){
if(e==self.StopIteration){
break;
}
throw e;
}
if(_1f2||_1f4(key,_1f3)!==0){
var _1f7=[];
_1f1.push([key,_1f7]);
}
_1f7.push(_1f5);
_1f2=false;
_1f3=key;
}
return _1f1;
},arrayLikeIter:function(_1f8){
var i=0;
return {repr:function(){
return "arrayLikeIter(...)";
},toString:MochiKit.Base.forwardCall("repr"),next:function(){
if(i>=_1f8.length){
throw MochiKit.Iter.StopIteration;
}
return _1f8[i++];
}};
},hasIterateNext:function(_1fa){
return (_1fa&&typeof (_1fa.iterateNext)=="function");
},iterateNextIter:function(_1fb){
return {repr:function(){
return "iterateNextIter(...)";
},toString:MochiKit.Base.forwardCall("repr"),next:function(){
var rval=_1fb.iterateNext();
if(rval===null||rval===undefined){
throw MochiKit.Iter.StopIteration;
}
return rval;
}};
}});
MochiKit.Iter.EXPORT_OK=["iteratorRegistry","arrayLikeIter","hasIterateNext","iterateNextIter",];
MochiKit.Iter.EXPORT=["StopIteration","registerIteratorFactory","iter","count","cycle","repeat","next","izip","ifilter","ifilterfalse","islice","imap","applymap","chain","takewhile","dropwhile","tee","list","reduce","range","sum","exhaust","forEach","every","sorted","reversed","some","iextend","groupby","groupby_as_array"];
MochiKit.Iter.__new__=function(){
var m=MochiKit.Base;
if(typeof (StopIteration)!="undefined"){
this.StopIteration=StopIteration;
}else{
this.StopIteration=new m.NamedError("StopIteration");
}
this.iteratorRegistry=new m.AdapterRegistry();
this.registerIteratorFactory("arrayLike",m.isArrayLike,this.arrayLikeIter);
this.registerIteratorFactory("iterateNext",this.hasIterateNext,this.iterateNextIter);
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
m.nameFunctions(this);
};
MochiKit.Iter.__new__();
if(MochiKit.__export__){
reduce=MochiKit.Iter.reduce;
}
MochiKit.Base._exportSymbols(this,MochiKit.Iter);
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.DOM");
dojo.require("MochiKit.Base");
}
if(typeof (JSAN)!="undefined"){
JSAN.use("MochiKit.Base",[]);
}
try{
if(typeof (MochiKit.Base)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.DOM depends on MochiKit.Base!";
}
if(typeof (MochiKit.DOM)=="undefined"){
MochiKit.DOM={};
}
MochiKit.DOM.NAME="MochiKit.DOM";
MochiKit.DOM.VERSION="1.4";
MochiKit.DOM.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
MochiKit.DOM.toString=function(){
return this.__repr__();
};
MochiKit.DOM.EXPORT=["removeEmptyTextNodes","formContents","currentWindow","currentDocument","withWindow","withDocument","registerDOMConverter","coerceToDOM","createDOM","createDOMFunc","isChildNode","getNodeAttribute","removeNodeAttribute","setNodeAttribute","updateNodeAttributes","appendChildNodes","insertSiblingNodesAfter","insertSiblingNodesBefore","replaceChildNodes","removeElement","swapDOM","BUTTON","TT","PRE","H1","H2","H3","BR","CANVAS","HR","LABEL","TEXTAREA","FORM","STRONG","SELECT","OPTION","OPTGROUP","LEGEND","FIELDSET","P","UL","OL","LI","TD","TR","THEAD","TBODY","TFOOT","TABLE","TH","INPUT","SPAN","A","DIV","IMG","getElement","$","getElementsByTagAndClassName","addToCallStack","addLoadEvent","focusOnLoad","setElementClass","toggleElementClass","addElementClass","removeElementClass","swapElementClass","hasElementClass","escapeHTML","toHTML","emitHTML","scrapeText","isParent","getFirstParentByTagAndClassName","makeClipping","undoClipping","makePositioned","undoPositioned","getFirstElementByTagAndClassName"];
MochiKit.DOM.EXPORT_OK=["domConverters"];
MochiKit.DOM.DEPRECATED=[["computedStyle","MochiKit.Style.getStyle","1.4"],["elementDimensions","MochiKit.Style.getElementDimensions","1.4"],["elementPosition","MochiKit.Style.getElementPosition","1.4"],["hideElement","MochiKit.Style.hideElement","1.4"],["setElementDimensions","MochiKit.Style.setElementDimensions","1.4"],["setElementPosition","MochiKit.Style.setElementPosition","1.4"],["setDisplayForElement","MochiKit.Style.setDisplayForElement","1.4"],["setOpacity","MochiKit.Style.setOpacity","1.4"],["showElement","MochiKit.Style.showElement","1.4"],["Coordinates","MochiKit.Style.Coordinates","1.4"],["Dimensions","MochiKit.Style.Dimensions","1.4"]];
MochiKit.DOM.getViewportDimensions=new Function(""+"if (!MochiKit[\"Style\"]) {"+"    throw new Error(\"This function has been deprecated and depends on MochiKit.Style.\");"+"}"+"return MochiKit.Style.getViewportDimensions.apply(this, arguments);");
MochiKit.Base.update(MochiKit.DOM,{currentWindow:function(){
return MochiKit.DOM._window;
},currentDocument:function(){
return MochiKit.DOM._document;
},withWindow:function(win,func){
var self=MochiKit.DOM;
var _201=self._document;
var _202=self._window;
var rval;
try{
self._window=win;
self._document=win.document;
rval=func();
}
catch(e){
self._window=_202;
self._document=_201;
throw e;
}
self._window=_202;
self._document=_201;
return rval;
},formContents:function(elem){
var _205=[];
var _206=[];
var m=MochiKit.Base;
var self=MochiKit.DOM;
if(typeof (elem)=="undefined"||elem===null){
elem=self._document.body;
}else{
elem=self.getElement(elem);
}
m.nodeWalk(elem,function(elem){
var name=elem.name;
if(m.isNotEmpty(name)){
var _20b=elem.tagName.toUpperCase();
if(_20b==="INPUT"&&(elem.type=="radio"||elem.type=="checkbox")&&!elem.checked){
return null;
}
if(_20b==="SELECT"){
if(elem.type=="select-one"){
if(elem.selectedIndex>=0){
var opt=elem.options[elem.selectedIndex];
var v=opt.value;
if(!v){
var h=opt.outerHTML;
if(h&&!h.match(/^[^>]+\svalue\s*=/i)){
v=opt.text;
}
}
_205.push(name);
_206.push(v);
return null;
}
_205.push(name);
_206.push("");
return null;
}else{
var opts=elem.options;
if(!opts.length){
_205.push(name);
_206.push("");
return null;
}
for(var i=0;i<opts.length;i++){
var opt=opts[i];
if(!opt.selected){
continue;
}
var v=opt.value;
if(!v){
var h=opt.outerHTML;
if(h&&!h.match(/^[^>]+\svalue\s*=/i)){
v=opt.text;
}
}
_205.push(name);
_206.push(v);
}
return null;
}
}
if(_20b==="FORM"||_20b==="P"||_20b==="SPAN"||_20b==="DIV"){
return elem.childNodes;
}
_205.push(name);
_206.push(elem.value||"");
return null;
}
return elem.childNodes;
});
return [_205,_206];
},withDocument:function(doc,func){
var self=MochiKit.DOM;
var _214=self._document;
var rval;
try{
self._document=doc;
rval=func();
}
catch(e){
self._document=_214;
throw e;
}
self._document=_214;
return rval;
},registerDOMConverter:function(name,_217,wrap,_219){
MochiKit.DOM.domConverters.register(name,_217,wrap,_219);
},coerceToDOM:function(node,ctx){
var m=MochiKit.Base;
var im=MochiKit.Iter;
var self=MochiKit.DOM;
if(im){
var iter=im.iter;
var _220=im.repeat;
var map=m.map;
}
var _222=self.domConverters;
var _223=arguments.callee;
var _224=m.NotFound;
while(true){
if(typeof (node)=="undefined"||node===null){
return null;
}
if(typeof (node)=="function"&&typeof (node.length)=="number"&&!(node instanceof Function)){
node=im.list(node);
}
if(typeof (node.nodeType)!="undefined"&&node.nodeType>0){
return node;
}
if(typeof (node)=="number"||typeof (node)=="boolean"){
node=node.toString();
}
if(typeof (node)=="string"){
return self._document.createTextNode(node);
}
if(typeof (node.__dom__)=="function"){
node=node.__dom__(ctx);
continue;
}
if(typeof (node.dom)=="function"){
node=node.dom(ctx);
continue;
}
if(typeof (node)=="function"){
node=node.apply(ctx,[ctx]);
continue;
}
if(im){
var _225=null;
try{
_225=iter(node);
}
catch(e){
}
if(_225){
return map(_223,_225,_220(ctx));
}
}
try{
node=_222.match(node,ctx);
continue;
}
catch(e){
if(e!=_224){
throw e;
}
}
return self._document.createTextNode(node.toString());
}
return undefined;
},isChildNode:function(node,_227){
var self=MochiKit.DOM;
if(typeof (node)=="string"){
node=self.getElement(node);
}
if(typeof (_227)=="string"){
_227=self.getElement(_227);
}
if(node===_227){
return true;
}
while(node&&node.tagName.toUpperCase()!="BODY"){
node=node.parentNode;
if(node===_227){
return true;
}
}
return false;
},setNodeAttribute:function(node,attr,_22b){
var o={};
o[attr]=_22b;
try{
return MochiKit.DOM.updateNodeAttributes(node,o);
}
catch(e){
}
return null;
},getNodeAttribute:function(node,attr){
var self=MochiKit.DOM;
var _230=self.attributeArray.renames[attr];
node=self.getElement(node);
try{
if(_230){
return node[_230];
}
return node.getAttribute(attr);
}
catch(e){
}
return null;
},removeNodeAttribute:function(node,attr){
var self=MochiKit.DOM;
var _234=self.attributeArray.renames[attr];
node=self.getElement(node);
try{
if(_234){
return node[_234];
}
return node.removeAttribute(attr);
}
catch(e){
}
return null;
},updateNodeAttributes:function(node,_236){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
if(_236){
var _239=MochiKit.Base.updatetree;
if(self.attributeArray.compliant){
for(var k in _236){
var v=_236[k];
if(typeof (v)=="object"&&typeof (elem[k])=="object"){
if(k=="style"&&MochiKit.Style){
MochiKit.Style.setStyle(elem,v);
}else{
_239(elem[k],v);
}
}else{
if(k.substring(0,2)=="on"){
if(typeof (v)=="string"){
v=new Function(v);
}
elem[k]=v;
}else{
elem.setAttribute(k,v);
}
}
}
}else{
var _23c=self.attributeArray.renames;
for(var k in _236){
v=_236[k];
var _23d=_23c[k];
if(k=="style"&&typeof (v)=="string"){
elem.style.cssText=v;
}else{
if(typeof (_23d)=="string"){
elem[_23d]=v;
}else{
if(typeof (elem[k])=="object"&&typeof (v)=="object"){
if(k=="style"&&MochiKit.Style){
MochiKit.Style.setStyle(elem,v);
}else{
_239(elem[k],v);
}
}else{
if(k.substring(0,2)=="on"){
if(typeof (v)=="string"){
v=new Function(v);
}
elem[k]=v;
}else{
elem.setAttribute(k,v);
}
}
}
}
}
}
}
return elem;
},appendChildNodes:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
var _241=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
var _242=MochiKit.Base.concat;
while(_241.length){
var n=_241.shift();
if(typeof (n)=="undefined"||n===null){
}else{
if(typeof (n.nodeType)=="number"){
elem.appendChild(n);
}else{
_241=_242(n,_241);
}
}
}
return elem;
},insertSiblingNodesBefore:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
var _247=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
var _248=elem.parentNode;
var _249=MochiKit.Base.concat;
while(_247.length){
var n=_247.shift();
if(typeof (n)=="undefined"||n===null){
}else{
if(typeof (n.nodeType)=="number"){
_248.insertBefore(n,elem);
}else{
_247=_249(n,_247);
}
}
}
return _248;
},insertSiblingNodesAfter:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
var _24e=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
if(elem.nextSibling){
return self.insertSiblingNodesBefore(elem.nextSibling,_24e);
}else{
return self.appendChildNodes(elem.parentNode,_24e);
}
},replaceChildNodes:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
arguments[0]=elem;
}
var _252;
while((_252=elem.firstChild)){
elem.removeChild(_252);
}
if(arguments.length<2){
return elem;
}else{
return self.appendChildNodes.apply(this,arguments);
}
},createDOM:function(name,_254){
var elem;
var self=MochiKit.DOM;
var m=MochiKit.Base;
if(typeof (_254)=="string"||typeof (_254)=="number"){
var args=m.extend([name,null],arguments,1);
return arguments.callee.apply(this,args);
}
if(typeof (name)=="string"){
var _259=self._xhtml;
if(_254&&!self.attributeArray.compliant){
var _25a="";
if("name" in _254){
_25a+=" name=\""+self.escapeHTML(_254.name)+"\"";
}
if(name=="input"&&"type" in _254){
_25a+=" type=\""+self.escapeHTML(_254.type)+"\"";
}
if(_25a){
name="<"+name+_25a+">";
_259=false;
}
}
var d=self._document;
if(_259&&d===document){
elem=d.createElementNS("http://www.w3.org/1999/xhtml",name);
}else{
elem=d.createElement(name);
}
}else{
elem=name;
}
if(_254){
self.updateNodeAttributes(elem,_254);
}
if(arguments.length<=2){
return elem;
}else{
var args=m.extend([elem],arguments,2);
return self.appendChildNodes.apply(this,args);
}
},createDOMFunc:function(){
var m=MochiKit.Base;
return m.partial.apply(this,m.extend([MochiKit.DOM.createDOM],arguments));
},removeElement:function(elem){
var e=MochiKit.DOM.getElement(elem);
e.parentNode.removeChild(e);
return e;
},swapDOM:function(dest,src){
var self=MochiKit.DOM;
dest=self.getElement(dest);
var _262=dest.parentNode;
if(src){
src=self.getElement(src);
_262.replaceChild(src,dest);
}else{
_262.removeChild(dest);
}
return src;
},getElement:function(id){
var self=MochiKit.DOM;
if(arguments.length==1){
return ((typeof (id)=="string")?self._document.getElementById(id):id);
}else{
return MochiKit.Base.map(self.getElement,arguments);
}
},getElementsByTagAndClassName:function(_265,_266,_267){
var self=MochiKit.DOM;
if(typeof (_265)=="undefined"||_265===null){
_265="*";
}
if(typeof (_267)=="undefined"||_267===null){
_267=self._document;
}
_267=self.getElement(_267);
var _269=(_267.getElementsByTagName(_265)||self._document.all);
if(typeof (_266)=="undefined"||_266===null){
return MochiKit.Base.extend(null,_269);
}
var _26a=[];
for(var i=0;i<_269.length;i++){
var _26c=_269[i];
var cls=_26c.className;
if(!cls){
continue;
}
var _26e=cls.split(" ");
for(var j=0;j<_26e.length;j++){
if(_26e[j]==_266){
_26a.push(_26c);
break;
}
}
}
return _26a;
},_newCallStack:function(path,once){
var rval=function(){
var _273=arguments.callee.callStack;
for(var i=0;i<_273.length;i++){
if(_273[i].apply(this,arguments)===false){
break;
}
}
if(once){
try{
this[path]=null;
}
catch(e){
}
}
};
rval.callStack=[];
return rval;
},addToCallStack:function(_275,path,func,once){
var self=MochiKit.DOM;
var _27a=_275[path];
var _27b=_27a;
if(!(typeof (_27a)=="function"&&typeof (_27a.callStack)=="object"&&_27a.callStack!==null)){
_27b=self._newCallStack(path,once);
if(typeof (_27a)=="function"){
_27b.callStack.push(_27a);
}
_275[path]=_27b;
}
_27b.callStack.push(func);
},addLoadEvent:function(func){
var self=MochiKit.DOM;
self.addToCallStack(self._window,"onload",func,true);
},focusOnLoad:function(_27e){
var self=MochiKit.DOM;
self.addLoadEvent(function(){
_27e=self.getElement(_27e);
if(_27e){
_27e.focus();
}
});
},setElementClass:function(_280,_281){
var self=MochiKit.DOM;
var obj=self.getElement(_280);
if(self.attributeArray.compliant){
obj.setAttribute("class",_281);
}else{
obj.setAttribute("className",_281);
}
},toggleElementClass:function(_284){
var self=MochiKit.DOM;
for(var i=1;i<arguments.length;i++){
var obj=self.getElement(arguments[i]);
if(!self.addElementClass(obj,_284)){
self.removeElementClass(obj,_284);
}
}
},addElementClass:function(_288,_289){
var self=MochiKit.DOM;
var obj=self.getElement(_288);
var cls=obj.className;
if(cls==undefined||cls.length===0){
self.setElementClass(obj,_289);
return true;
}
if(cls==_289){
return false;
}
var _28d=cls.split(" ");
for(var i=0;i<_28d.length;i++){
if(_28d[i]==_289){
return false;
}
}
self.setElementClass(obj,cls+" "+_289);
return true;
},removeElementClass:function(_28f,_290){
var self=MochiKit.DOM;
var obj=self.getElement(_28f);
var cls=obj.className;
if(cls==undefined||cls.length===0){
return false;
}
if(cls==_290){
self.setElementClass(obj,"");
return true;
}
var _294=cls.split(" ");
for(var i=0;i<_294.length;i++){
if(_294[i]==_290){
_294.splice(i,1);
self.setElementClass(obj,_294.join(" "));
return true;
}
}
return false;
},swapElementClass:function(_296,_297,_298){
var obj=MochiKit.DOM.getElement(_296);
var res=MochiKit.DOM.removeElementClass(obj,_297);
if(res){
MochiKit.DOM.addElementClass(obj,_298);
}
return res;
},hasElementClass:function(_29b,_29c){
var obj=MochiKit.DOM.getElement(_29b);
var cls=obj.className;
if(!cls){
return false;
}
var _29f=cls.split(" ");
for(var i=1;i<arguments.length;i++){
var good=false;
for(var j=0;j<_29f.length;j++){
if(_29f[j]==arguments[i]){
good=true;
break;
}
}
if(!good){
return false;
}
}
return true;
},escapeHTML:function(s){
return s.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
},toHTML:function(dom){
return MochiKit.DOM.emitHTML(dom).join("");
},emitHTML:function(dom,lst){
if(typeof (lst)=="undefined"||lst===null){
lst=[];
}
var _2a7=[dom];
var self=MochiKit.DOM;
var _2a9=self.escapeHTML;
var _2aa=self.attributeArray;
while(_2a7.length){
dom=_2a7.pop();
if(typeof (dom)=="string"){
lst.push(dom);
}else{
if(dom.nodeType==1){
lst.push("<"+dom.tagName.toLowerCase());
var _2ab=[];
var _2ac=_2aa(dom);
for(var i=0;i<_2ac.length;i++){
var a=_2ac[i];
_2ab.push([" ",a.name,"=\"",_2a9(a.value),"\""]);
}
_2ab.sort();
for(i=0;i<_2ab.length;i++){
var _2af=_2ab[i];
for(var j=0;j<_2af.length;j++){
lst.push(_2af[j]);
}
}
if(dom.hasChildNodes()){
lst.push(">");
_2a7.push("</"+dom.tagName.toLowerCase()+">");
var _2b1=dom.childNodes;
for(i=_2b1.length-1;i>=0;i--){
_2a7.push(_2b1[i]);
}
}else{
lst.push("/>");
}
}else{
if(dom.nodeType==3){
lst.push(_2a9(dom.nodeValue));
}
}
}
}
return lst;
},scrapeText:function(node,_2b3){
var rval=[];
(function(node){
var cn=node.childNodes;
if(cn){
for(var i=0;i<cn.length;i++){
arguments.callee.call(this,cn[i]);
}
}
var _2b8=node.nodeValue;
if(typeof (_2b8)=="string"){
rval.push(_2b8);
}
})(MochiKit.DOM.getElement(node));
if(_2b3){
return rval;
}else{
return rval.join("");
}
},removeEmptyTextNodes:function(_2b9){
_2b9=MochiKit.DOM.getElement(_2b9);
for(var i=0;i<_2b9.childNodes.length;i++){
var node=_2b9.childNodes[i];
if(node.nodeType==3&&!/\S/.test(node.nodeValue)){
node.parentNode.removeChild(node);
}
}
},makeClipping:function(_2bc){
_2bc=MochiKit.DOM.getElement(_2bc);
var _2bd=_2bc.style.overflow;
if((MochiKit.Style.getStyle(_2bc,"overflow")||"visible")!="hidden"){
_2bc.style.overflow="hidden";
}
return _2bd;
},undoClipping:function(_2be,_2bf){
_2be=MochiKit.DOM.getElement(_2be);
if(!_2bf){
return;
}
_2be.style.overflow=_2bf;
},makePositioned:function(_2c0){
_2c0=MochiKit.DOM.getElement(_2c0);
var pos=MochiKit.Style.getStyle(_2c0,"position");
if(pos=="static"||!pos){
_2c0.style.position="relative";
if(/Opera/.test(navigator.userAgent)){
_2c0.style.top=0;
_2c0.style.left=0;
}
}
},undoPositioned:function(_2c2){
_2c2=MochiKit.DOM.getElement(_2c2);
if(_2c2.style.position=="relative"){
_2c2.style.position=_2c2.style.top=_2c2.style.left=_2c2.style.bottom=_2c2.style.right="";
}
},getFirstElementByTagAndClassName:function(_2c3,_2c4,_2c5){
var self=MochiKit.DOM;
if(typeof (_2c3)=="undefined"||_2c3===null){
_2c3="*";
}
if(typeof (_2c5)=="undefined"||_2c5===null){
_2c5=self._document;
}
_2c5=self.getElement(_2c5);
var _2c7=(_2c5.getElementsByTagName(_2c3)||self._document.all);
if(typeof (_2c4)=="undefined"||_2c4===null){
return _2c7[0];
}
for(var i=0;i<_2c7.length;i++){
var _2c9=_2c7[i];
var _2ca=_2c9.className.split(" ");
for(var j=0;j<_2ca.length;j++){
if(_2ca[j]==_2c4){
return _2c9;
}
}
}
},getFirstParentByTagAndClassName:function(elem,_2cd,_2ce){
var self=MochiKit.DOM;
elem=self.getElement(elem);
if(typeof (_2cd)=="undefined"||_2cd===null){
_2cd="*";
}else{
_2cd=_2cd.toUpperCase();
}
if(typeof (_2ce)=="undefined"||_2ce===null){
_2ce=null;
}
var _2d0="";
var _2d1="";
while(elem&&elem.tagName){
elem=elem.parentNode;
if(_2cd=="*"&&_2ce===null){
return elem;
}
_2d0=elem.className.split(" ");
_2d1=elem.tagName.toUpperCase();
if(_2ce===null&&_2cd==_2d1){
return elem;
}else{
if(_2ce!==null){
for(var i=0;i<_2d0.length;i++){
if(_2cd=="*"&&_2d0[i]==_2ce){
return elem;
}else{
if(_2cd==_2d1&&_2d0[i]==_2ce){
return elem;
}
}
}
}
}
}
return elem;
},isParent:function(_2d3,_2d4){
if(!_2d3.parentNode||_2d3==_2d4){
return false;
}
if(_2d3.parentNode==_2d4){
return true;
}
return MochiKit.DOM.isParent(_2d3.parentNode,_2d4);
},__new__:function(win){
var m=MochiKit.Base;
if(typeof (document)!="undefined"){
this._document=document;
var _2d7="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
this._xhtml=(document.documentElement&&document.createElementNS&&document.documentElement.namespaceURI===_2d7);
}else{
if(MochiKit.MockDOM){
this._document=MochiKit.MockDOM.document;
}
}
this._window=win;
this.domConverters=new m.AdapterRegistry();
var _2d8=this._document.createElement("span");
var _2d9;
if(_2d8&&_2d8.attributes&&_2d8.attributes.length>0){
var _2da=m.filter;
_2d9=function(node){
return _2da(_2d9.ignoreAttrFilter,node.attributes);
};
_2d9.ignoreAttr={};
var _2dc=_2d8.attributes;
var _2dd=_2d9.ignoreAttr;
for(var i=0;i<_2dc.length;i++){
var a=_2dc[i];
_2dd[a.name]=a.value;
}
_2d9.ignoreAttrFilter=function(a){
return (_2d9.ignoreAttr[a.name]!=a.value);
};
_2d9.compliant=false;
_2d9.renames={"class":"className","checked":"defaultChecked","usemap":"useMap","for":"htmlFor","readonly":"readOnly","colspan":"colSpan","bgcolor":"bgColor","cellspacing":"cellSpacing","cellpadding":"cellPadding"};
}else{
_2d9=function(node){
return node.attributes;
};
_2d9.compliant=true;
_2d9.renames={};
}
this.attributeArray=_2d9;
var _2e2=function(_2e3,arr){
var _2e5=arr[1].split(".");
var str="";
var obj={};
str+="if (!MochiKit."+_2e5[1]+") { throw new Error(\"";
str+="This function has been deprecated and depends on MochiKit.";
str+=_2e5[1]+".\");}";
str+="return MochiKit."+_2e5[1]+"."+arr[0];
str+=".apply(this, arguments);";
obj[_2e5[2]]=new Function(str);
MochiKit.Base.update(MochiKit[_2e3],obj);
};
for(var i;i<MochiKit.DOM.DEPRECATED.length;i++){
_2e2("DOM",MochiKit.DOM.DEPRECATED[i]);
}
var _2e8=this.createDOMFunc;
this.UL=_2e8("ul");
this.OL=_2e8("ol");
this.LI=_2e8("li");
this.TD=_2e8("td");
this.TR=_2e8("tr");
this.TBODY=_2e8("tbody");
this.THEAD=_2e8("thead");
this.TFOOT=_2e8("tfoot");
this.TABLE=_2e8("table");
this.TH=_2e8("th");
this.INPUT=_2e8("input");
this.SPAN=_2e8("span");
this.A=_2e8("a");
this.DIV=_2e8("div");
this.IMG=_2e8("img");
this.BUTTON=_2e8("button");
this.TT=_2e8("tt");
this.PRE=_2e8("pre");
this.H1=_2e8("h1");
this.H2=_2e8("h2");
this.H3=_2e8("h3");
this.BR=_2e8("br");
this.HR=_2e8("hr");
this.LABEL=_2e8("label");
this.TEXTAREA=_2e8("textarea");
this.FORM=_2e8("form");
this.P=_2e8("p");
this.SELECT=_2e8("select");
this.OPTION=_2e8("option");
this.OPTGROUP=_2e8("optgroup");
this.LEGEND=_2e8("legend");
this.FIELDSET=_2e8("fieldset");
this.STRONG=_2e8("strong");
this.CANVAS=_2e8("canvas");
this.$=this.getElement;
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
m.nameFunctions(this);
}});
MochiKit.DOM.__new__(((typeof (window)=="undefined")?this:window));
if(MochiKit.__export__){
withWindow=MochiKit.DOM.withWindow;
withDocument=MochiKit.DOM.withDocument;
}
MochiKit.Base._exportSymbols(this,MochiKit.DOM);
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.Style");
dojo.require("MochiKit.Base");
dojo.require("MochiKit.DOM");
}
if(typeof (JSAN)!="undefined"){
JSAN.use("MochiKit.Base",[]);
JSAN.use("MochiKit.DOM",[]);
}
try{
if(typeof (MochiKit.Base)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Style depends on MochiKit.Base!";
}
try{
if(typeof (MochiKit.DOM)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Style depends on MochiKit.DOM!";
}
if(typeof (MochiKit.Style)=="undefined"){
MochiKit.Style={};
}
MochiKit.Style.NAME="MochiKit.Style";
MochiKit.Style.VERSION="1.4";
MochiKit.Style.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
MochiKit.Style.toString=function(){
return this.__repr__();
};
MochiKit.Style.EXPORT_OK=[];
MochiKit.Style.EXPORT=["setStyle","setOpacity","getStyle","getElementDimensions","elementDimensions","setElementDimensions","getElementPosition","elementPosition","setElementPosition","setDisplayForElement","hideElement","showElement","getViewportDimensions","getViewportPosition","Dimensions","Coordinates"];
MochiKit.Style.Dimensions=function(w,h){
this.w=w;
this.h=h;
};
MochiKit.Style.Dimensions.prototype.__repr__=function(){
var repr=MochiKit.Base.repr;
return "{w: "+repr(this.w)+", h: "+repr(this.h)+"}";
};
MochiKit.Style.Dimensions.prototype.toString=function(){
return this.__repr__();
};
MochiKit.Style.Coordinates=function(x,y){
this.x=x;
this.y=y;
};
MochiKit.Style.Coordinates.prototype.__repr__=function(){
var repr=MochiKit.Base.repr;
return "{x: "+repr(this.x)+", y: "+repr(this.y)+"}";
};
MochiKit.Style.Coordinates.prototype.toString=function(){
return this.__repr__();
};
MochiKit.Base.update(MochiKit.Style,{getStyle:function(elem,_2f0){
var dom=MochiKit.DOM;
var d=dom._document;
elem=dom.getElement(elem);
_2f0=MochiKit.Base.camelize(_2f0);
if(!elem||elem==d){
return undefined;
}
if(_2f0=="opacity"&&elem.filters){
var _2f3=(MochiKit.Style.getStyle(elem,"filter")||"").match(/alpha\(opacity=(.*)\)/);
if(_2f3&&_2f3[1]){
return parseFloat(_2f3[1])/100;
}
return 1;
}
var _2f4=elem.style?elem.style[_2f0]:null;
if(!_2f4){
if(d.defaultView&&d.defaultView.getComputedStyle){
var css=d.defaultView.getComputedStyle(elem,null);
_2f0=_2f0.replace(/([A-Z])/g,"-$1").toLowerCase();
_2f4=css?css.getPropertyValue(_2f0):null;
}else{
if(elem.currentStyle){
_2f4=elem.currentStyle[_2f0];
}
}
}
if(_2f0=="opacity"){
_2f4=parseFloat(_2f4);
}
if(/Opera/.test(navigator.userAgent)&&(MochiKit.Base.find(["left","top","right","bottom"],_2f0)!=-1)){
if(MochiKit.Style.getStyle(elem,"position")=="static"){
_2f4="auto";
}
}
return _2f4=="auto"?null:_2f4;
},setStyle:function(elem,_2f7){
elem=MochiKit.DOM.getElement(elem);
for(var name in _2f7){
if(name=="opacity"){
MochiKit.Style.setOpacity(elem,_2f7[name]);
}else{
elem.style[MochiKit.Base.camelize(name)]=_2f7[name];
}
}
},setOpacity:function(elem,o){
elem=MochiKit.DOM.getElement(elem);
var self=MochiKit.Style;
if(o==1){
var _2fc=/Gecko/.test(navigator.userAgent)&&!(/Konqueror|AppleWebKit|KHTML/.test(navigator.userAgent));
elem.style["opacity"]=_2fc?0.999999:1;
if(/MSIE/.test(navigator.userAgent)){
elem.style["filter"]=self.getStyle(elem,"filter").replace(/alpha\([^\)]*\)/gi,"");
}
}else{
if(o<0.00001){
o=0;
}
elem.style["opacity"]=o;
if(/MSIE/.test(navigator.userAgent)){
elem.style["filter"]=self.getStyle(elem,"filter").replace(/alpha\([^\)]*\)/gi,"")+"alpha(opacity="+o*100+")";
}
}
},getElementPosition:function(elem,_2fe){
var self=MochiKit.Style;
var dom=MochiKit.DOM;
elem=dom.getElement(elem);
if(!elem||(!(elem.x&&elem.y)&&(!elem.parentNode===null||self.getStyle(elem,"display")=="none"))){
return undefined;
}
var c=new self.Coordinates(0,0);
var box=null;
var _303=null;
var d=MochiKit.DOM._document;
var de=d.documentElement;
var b=d.body;
if(!elem.parentNode&&elem.x&&elem.y){
c.x+=elem.x||0;
c.y+=elem.y||0;
}else{
if(elem.getBoundingClientRect){
box=elem.getBoundingClientRect();
c.x+=box.left+(de.scrollLeft||b.scrollLeft)-(de.clientLeft||0);
c.y+=box.top+(de.scrollTop||b.scrollTop)-(de.clientTop||0);
}else{
if(elem.offsetParent){
c.x+=elem.offsetLeft;
c.y+=elem.offsetTop;
_303=elem.offsetParent;
if(_303!=elem){
while(_303){
c.x+=_303.offsetLeft;
c.y+=_303.offsetTop;
_303=_303.offsetParent;
}
}
var ua=navigator.userAgent.toLowerCase();
if((typeof (opera)!="undefined"&&parseFloat(opera.version())<9)||(ua.indexOf("AppleWebKit")!=-1&&self.getStyle(elem,"position")=="absolute")){
c.x-=b.offsetLeft;
c.y-=b.offsetTop;
}
}
}
}
if(typeof (_2fe)!="undefined"){
_2fe=arguments.callee(_2fe);
if(_2fe){
c.x-=(_2fe.x||0);
c.y-=(_2fe.y||0);
}
}
if(elem.parentNode){
_303=elem.parentNode;
}else{
_303=null;
}
while(_303){
var _308=_303.tagName.toUpperCase();
if(_308==="BODY"||_308==="HTML"){
break;
}
var disp=self.getStyle(_303,"display");
if(disp!="inline"&&disp!="table-row"){
c.x-=_303.scrollLeft;
c.y-=_303.scrollTop;
}
if(_303.parentNode){
_303=_303.parentNode;
}else{
_303=null;
}
}
return c;
},setElementPosition:function(elem,_30b,_30c){
elem=MochiKit.DOM.getElement(elem);
if(typeof (_30c)=="undefined"){
_30c="px";
}
var _30d={};
var _30e=MochiKit.Base.isUndefinedOrNull;
if(!_30e(_30b.x)){
_30d["left"]=_30b.x+_30c;
}
if(!_30e(_30b.y)){
_30d["top"]=_30b.y+_30c;
}
MochiKit.DOM.updateNodeAttributes(elem,{"style":_30d});
},getElementDimensions:function(elem){
var self=MochiKit.Style;
var dom=MochiKit.DOM;
if(typeof (elem.w)=="number"||typeof (elem.h)=="number"){
return new self.Dimensions(elem.w||0,elem.h||0);
}
elem=dom.getElement(elem);
if(!elem){
return undefined;
}
var disp=self.getStyle(elem,"display");
if(disp!="none"&&disp!==""&&typeof (disp)!="undefined"){
return new self.Dimensions(elem.offsetWidth||0,elem.offsetHeight||0);
}
var s=elem.style;
var _314=s.visibility;
var _315=s.position;
s.visibility="hidden";
s.position="absolute";
s.display="";
var _316=elem.offsetWidth;
var _317=elem.offsetHeight;
s.display="none";
s.position=_315;
s.visibility=_314;
return new self.Dimensions(_316,_317);
},setElementDimensions:function(elem,_319,_31a){
elem=MochiKit.DOM.getElement(elem);
if(typeof (_31a)=="undefined"){
_31a="px";
}
var _31b={};
var _31c=MochiKit.Base.isUndefinedOrNull;
if(!_31c(_319.w)){
_31b["width"]=_319.w+_31a;
}
if(!_31c(_319.h)){
_31b["height"]=_319.h+_31a;
}
MochiKit.DOM.updateNodeAttributes(elem,{"style":_31b});
},setDisplayForElement:function(_31d,_31e){
var _31f=MochiKit.Base.extend(null,arguments,1);
var _320=MochiKit.DOM.getElement;
for(var i=0;i<_31f.length;i++){
_31e=_320(_31f[i]);
if(_31e){
_31e.style.display=_31d;
}
}
},getViewportDimensions:function(){
var d=new MochiKit.Style.Dimensions();
var w=MochiKit.DOM._window;
var b=MochiKit.DOM._document.body;
if(w.innerWidth){
d.w=w.innerWidth;
d.h=w.innerHeight;
}else{
if(b.parentElement.clientWidth){
d.w=b.parentElement.clientWidth;
d.h=b.parentElement.clientHeight;
}else{
if(b&&b.clientWidth){
d.w=b.clientWidth;
d.h=b.clientHeight;
}
}
}
return d;
},getViewportPosition:function(){
var c=new MochiKit.Style.Coordinates(0,0);
var d=MochiKit.DOM._document;
var de=d.documentElement;
var db=d.body;
if(de&&(de.scrollTop||de.scrollLeft)){
c.x=de.scrollLeft;
c.y=de.scrollTop;
}else{
if(db){
c.x=db.scrollLeft;
c.y=db.scrollTop;
}
}
return c;
},__new__:function(){
var m=MochiKit.Base;
this.elementPosition=this.getElementPosition;
this.elementDimensions=this.getElementDimensions;
this.hideElement=m.partial(this.setDisplayForElement,"none");
this.showElement=m.partial(this.setDisplayForElement,"block");
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
m.nameFunctions(this);
}});
MochiKit.Style.__new__();
MochiKit.Base._exportSymbols(this,MochiKit.Style);
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.Signal");
dojo.require("MochiKit.Base");
dojo.require("MochiKit.DOM");
dojo.require("MochiKit.Style");
}
if(typeof (JSAN)!="undefined"){
JSAN.use("MochiKit.Base",[]);
JSAN.use("MochiKit.DOM",[]);
JSAN.use("MochiKit.Style",[]);
}
try{
if(typeof (MochiKit.Base)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Signal depends on MochiKit.Base!";
}
try{
if(typeof (MochiKit.DOM)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Signal depends on MochiKit.DOM!";
}
try{
if(typeof (MochiKit.Style)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Signal depends on MochiKit.Style!";
}
if(typeof (MochiKit.Signal)=="undefined"){
MochiKit.Signal={};
}
MochiKit.Signal.NAME="MochiKit.Signal";
MochiKit.Signal.VERSION="1.4";
MochiKit.Signal._observers=[];
MochiKit.Signal.Event=function(src,e){
this._event=e||window.event;
this._src=src;
};
MochiKit.Base.update(MochiKit.Signal.Event.prototype,{__repr__:function(){
var repr=MochiKit.Base.repr;
var str="{event(): "+repr(this.event())+", src(): "+repr(this.src())+", type(): "+repr(this.type())+", target(): "+repr(this.target());
if(this.type()&&this.type().indexOf("key")===0||this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu"){
str+=", modifier(): "+"{alt: "+repr(this.modifier().alt)+", ctrl: "+repr(this.modifier().ctrl)+", meta: "+repr(this.modifier().meta)+", shift: "+repr(this.modifier().shift)+", any: "+repr(this.modifier().any)+"}";
}
if(this.type()&&this.type().indexOf("key")===0){
str+=", key(): {code: "+repr(this.key().code)+", string: "+repr(this.key().string)+"}";
}
if(this.type()&&(this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu")){
str+=", mouse(): {page: "+repr(this.mouse().page)+", client: "+repr(this.mouse().client);
if(this.type()!="mousemove"){
str+=", button: {left: "+repr(this.mouse().button.left)+", middle: "+repr(this.mouse().button.middle)+", right: "+repr(this.mouse().button.right)+"}}";
}else{
str+="}";
}
}
if(this.type()=="mouseover"||this.type()=="mouseout"){
str+=", relatedTarget(): "+repr(this.relatedTarget());
}
str+="}";
return str;
},toString:function(){
return this.__repr__();
},src:function(){
return this._src;
},event:function(){
return this._event;
},type:function(){
return this._event.type||undefined;
},target:function(){
return this._event.target||this._event.srcElement;
},_relatedTarget:null,relatedTarget:function(){
if(this._relatedTarget!==null){
return this._relatedTarget;
}
var elem=null;
if(this.type()=="mouseover"){
elem=(this._event.relatedTarget||this._event.fromElement);
}else{
if(this.type()=="mouseout"){
elem=(this._event.relatedTarget||this._event.toElement);
}
}
if(elem!==null){
this._relatedTarget=elem;
return elem;
}
return undefined;
},_modifier:null,modifier:function(){
if(this._modifier!==null){
return this._modifier;
}
var m={};
m.alt=this._event.altKey;
m.ctrl=this._event.ctrlKey;
m.meta=this._event.metaKey||false;
m.shift=this._event.shiftKey;
m.any=m.alt||m.ctrl||m.shift||m.meta;
this._modifier=m;
return m;
},_key:null,key:function(){
if(this._key!==null){
return this._key;
}
var k={};
if(this.type()&&this.type().indexOf("key")===0){
if(this.type()=="keydown"||this.type()=="keyup"){
k.code=this._event.keyCode;
k.string=(MochiKit.Signal._specialKeys[k.code]||"KEY_UNKNOWN");
this._key=k;
return k;
}else{
if(this.type()=="keypress"){
k.code=0;
k.string="";
if(typeof (this._event.charCode)!="undefined"&&this._event.charCode!==0&&!MochiKit.Signal._specialMacKeys[this._event.charCode]){
k.code=this._event.charCode;
k.string=String.fromCharCode(k.code);
}else{
if(this._event.keyCode&&typeof (this._event.charCode)=="undefined"){
k.code=this._event.keyCode;
k.string=String.fromCharCode(k.code);
}
}
this._key=k;
return k;
}
}
}
return undefined;
},_mouse:null,mouse:function(){
if(this._mouse!==null){
return this._mouse;
}
var m={};
var e=this._event;
if(this.type()&&(this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu")){
m.client=new MochiKit.Style.Coordinates(0,0);
if(e.clientX||e.clientY){
m.client.x=(!e.clientX||e.clientX<0)?0:e.clientX;
m.client.y=(!e.clientY||e.clientY<0)?0:e.clientY;
}
m.page=new MochiKit.Style.Coordinates(0,0);
if(e.pageX||e.pageY){
m.page.x=(!e.pageX||e.pageX<0)?0:e.pageX;
m.page.y=(!e.pageY||e.pageY<0)?0:e.pageY;
}else{
var de=MochiKit.DOM._document.documentElement;
var b=MochiKit.DOM._document.body;
m.page.x=e.clientX+(de.scrollLeft||b.scrollLeft)-(de.clientLeft||0);
m.page.y=e.clientY+(de.scrollTop||b.scrollTop)-(de.clientTop||0);
}
if(this.type()!="mousemove"){
m.button={};
m.button.left=false;
m.button.right=false;
m.button.middle=false;
if(e.which){
m.button.left=(e.which==1);
m.button.middle=(e.which==2);
m.button.right=(e.which==3);
}else{
m.button.left=!!(e.button&1);
m.button.right=!!(e.button&2);
m.button.middle=!!(e.button&4);
}
}
this._mouse=m;
return m;
}
return undefined;
},stop:function(){
this.stopPropagation();
this.preventDefault();
},stopPropagation:function(){
if(this._event.stopPropagation){
this._event.stopPropagation();
}else{
this._event.cancelBubble=true;
}
},preventDefault:function(){
if(this._event.preventDefault){
this._event.preventDefault();
}else{
if(this._confirmUnload===null){
this._event.returnValue=false;
}
}
},_confirmUnload:null,confirmUnload:function(msg){
if(this.type()=="beforeunload"){
this._confirmUnload=msg;
this._event.returnValue=msg;
}
}});
MochiKit.Signal._specialMacKeys={3:"KEY_ENTER",63289:"KEY_NUM_PAD_CLEAR",63276:"KEY_PAGE_UP",63277:"KEY_PAGE_DOWN",63275:"KEY_END",63273:"KEY_HOME",63234:"KEY_ARROW_LEFT",63232:"KEY_ARROW_UP",63235:"KEY_ARROW_RIGHT",63233:"KEY_ARROW_DOWN",63302:"KEY_INSERT",63272:"KEY_DELETE"};
(function(){
var _336=MochiKit.Signal._specialMacKeys;
for(i=63236;i<=63242;i++){
_336[i]="KEY_F"+(i-63236+1);
}
})();
MochiKit.Signal._specialKeys={8:"KEY_BACKSPACE",9:"KEY_TAB",12:"KEY_NUM_PAD_CLEAR",13:"KEY_ENTER",16:"KEY_SHIFT",17:"KEY_CTRL",18:"KEY_ALT",19:"KEY_PAUSE",20:"KEY_CAPS_LOCK",27:"KEY_ESCAPE",32:"KEY_SPACEBAR",33:"KEY_PAGE_UP",34:"KEY_PAGE_DOWN",35:"KEY_END",36:"KEY_HOME",37:"KEY_ARROW_LEFT",38:"KEY_ARROW_UP",39:"KEY_ARROW_RIGHT",40:"KEY_ARROW_DOWN",44:"KEY_PRINT_SCREEN",45:"KEY_INSERT",46:"KEY_DELETE",59:"KEY_SEMICOLON",91:"KEY_WINDOWS_LEFT",92:"KEY_WINDOWS_RIGHT",93:"KEY_SELECT",106:"KEY_NUM_PAD_ASTERISK",107:"KEY_NUM_PAD_PLUS_SIGN",109:"KEY_NUM_PAD_HYPHEN-MINUS",110:"KEY_NUM_PAD_FULL_STOP",111:"KEY_NUM_PAD_SOLIDUS",144:"KEY_NUM_LOCK",145:"KEY_SCROLL_LOCK",186:"KEY_SEMICOLON",187:"KEY_EQUALS_SIGN",188:"KEY_COMMA",189:"KEY_HYPHEN-MINUS",190:"KEY_FULL_STOP",191:"KEY_SOLIDUS",192:"KEY_GRAVE_ACCENT",219:"KEY_LEFT_SQUARE_BRACKET",220:"KEY_REVERSE_SOLIDUS",221:"KEY_RIGHT_SQUARE_BRACKET",222:"KEY_APOSTROPHE"};
(function(){
var _337=MochiKit.Signal._specialKeys;
for(var i=48;i<=57;i++){
_337[i]="KEY_"+(i-48);
}
for(i=65;i<=90;i++){
_337[i]="KEY_"+String.fromCharCode(i);
}
for(i=96;i<=105;i++){
_337[i]="KEY_NUM_PAD_"+(i-96);
}
for(i=112;i<=123;i++){
_337[i]="KEY_F"+(i-112+1);
}
})();
MochiKit.Signal.Ident=function(_339){
this.source=_339.source;
this.signal=_339.signal;
this.listener=_339.listener;
this.isDOM=_339.isDOM;
this.objOrFunc=_339.objOrFunc;
this.funcOrStr=_339.funcOrStr;
this.connected=_339.connected;
};
MochiKit.Signal.Ident.prototype={};
MochiKit.Base.update(MochiKit.Signal,{__repr__:function(){
return "["+this.NAME+" "+this.VERSION+"]";
},toString:function(){
return this.__repr__();
},_unloadCache:function(){
var self=MochiKit.Signal;
var _33b=self._observers;
for(var i=0;i<_33b.length;i++){
if(_33b[i].signal!=="onload"&&_33b[i].signal!=="onunload"){
self._disconnect(_33b[i]);
}
}
},_listener:function(src,sig,func,obj,_341){
var self=MochiKit.Signal;
var E=self.Event;
if(!_341){
if(typeof (func.im_self)=="undefined"){
return MochiKit.Base.bind(func,obj);
}else{
return func;
}
}
obj=obj||src;
if(typeof (func)=="string"){
if(sig==="onload"||sig==="onunload"){
return function(_344){
obj[func].apply(obj,[new E(src,_344)]);
var _345=new MochiKit.Signal.Ident({source:src,signal:sig,objOrFunc:obj,funcOrStr:func});
MochiKit.Signal._disconnect(_345);
};
}else{
return function(_346){
obj[func].apply(obj,[new E(src,_346)]);
};
}
}else{
if(sig==="onload"||sig==="onunload"){
return function(_347){
func.apply(obj,[new E(src,_347)]);
MochiKit.Signal.disconnect(src,sig,func);
var _348=new MochiKit.Signal.Ident({source:src,signal:sig,objOrFunc:func});
MochiKit.Signal._disconnect(_348);
};
}else{
return function(_349){
func.apply(obj,[new E(src,_349)]);
};
}
}
},_browserAlreadyHasMouseEnterAndLeave:function(){
return /MSIE/.test(navigator.userAgent);
},_mouseEnterListener:function(src,sig,func,obj){
var E=MochiKit.Signal.Event;
return function(_34f){
var e=new E(src,_34f);
try{
e.relatedTarget().nodeName;
}
catch(err){
return;
}
e.stop();
if(MochiKit.DOM.isChildNode(e.relatedTarget(),src)){
return;
}
e.type=function(){
return sig;
};
if(typeof (func)=="string"){
return obj[func].apply(obj,[e]);
}else{
return func.apply(obj,[e]);
}
};
},_getDestPair:function(_351,_352){
var obj=null;
var func=null;
if(typeof (_352)!="undefined"){
obj=_351;
func=_352;
if(typeof (_352)=="string"){
if(typeof (_351[_352])!="function"){
throw new Error("'funcOrStr' must be a function on 'objOrFunc'");
}
}else{
if(typeof (_352)!="function"){
throw new Error("'funcOrStr' must be a function or string");
}
}
}else{
if(typeof (_351)!="function"){
throw new Error("'objOrFunc' must be a function if 'funcOrStr' is not given");
}else{
func=_351;
}
}
return [obj,func];
},connect:function(src,sig,_357,_358){
src=MochiKit.DOM.getElement(src);
var self=MochiKit.Signal;
if(typeof (sig)!="string"){
throw new Error("'sig' must be a string");
}
var _35a=self._getDestPair(_357,_358);
var obj=_35a[0];
var func=_35a[1];
if(typeof (obj)=="undefined"||obj===null){
obj=src;
}
var _35d=!!(src.addEventListener||src.attachEvent);
if(_35d&&(sig==="onmouseenter"||sig==="onmouseleave")&&!self._browserAlreadyHasMouseEnterAndLeave()){
var _35e=self._mouseEnterListener(src,sig.substr(2),func,obj);
if(sig==="onmouseenter"){
sig="onmouseover";
}else{
sig="onmouseout";
}
}else{
var _35e=self._listener(src,sig,func,obj,_35d);
}
if(src.addEventListener){
src.addEventListener(sig.substr(2),_35e,false);
}else{
if(src.attachEvent){
src.attachEvent(sig,_35e);
}
}
var _35f=new MochiKit.Signal.Ident({source:src,signal:sig,listener:_35e,isDOM:_35d,objOrFunc:_357,funcOrStr:_358,connected:true});
self._observers.push(_35f);
if(!_35d&&typeof (src.__connect__)=="function"){
var args=MochiKit.Base.extend([_35f],arguments,1);
src.__connect__.apply(src,args);
}
return _35f;
},_disconnect:function(_361){
if(!_361.connected){
return;
}
_361.connected=false;
if(!_361.isDOM){
return;
}
var src=_361.source;
var sig=_361.signal;
var _364=_361.listener;
if(src.removeEventListener){
src.removeEventListener(sig.substr(2),_364,false);
}else{
if(src.detachEvent){
src.detachEvent(sig,_364);
}else{
throw new Error("'src' must be a DOM element");
}
}
},disconnect:function(_365){
var self=MochiKit.Signal;
var _367=self._observers;
var m=MochiKit.Base;
if(arguments.length>1){
var src=MochiKit.DOM.getElement(arguments[0]);
var sig=arguments[1];
var obj=arguments[2];
var func=arguments[3];
for(var i=_367.length-1;i>=0;i--){
var o=_367[i];
if(o.source===src&&o.signal===sig&&o.objOrFunc===obj&&o.funcOrStr===func){
self._disconnect(o);
if(!self._lock){
_367.splice(i,1);
}else{
self._dirty=true;
}
return true;
}
}
}else{
var idx=m.findIdentical(_367,_365);
if(idx>=0){
self._disconnect(_365);
if(!self._lock){
_367.splice(idx,1);
}else{
self._dirty=true;
}
return true;
}
}
return false;
},disconnectAllTo:function(_370,_371){
var self=MochiKit.Signal;
var _373=self._observers;
var _374=self._disconnect;
var _375=self._lock;
var _376=self._dirty;
if(typeof (_371)==="undefined"){
_371=null;
}
for(var i=_373.length-1;i>=0;i--){
var _378=_373[i];
if(_378.objOrFunc===_370&&(_371===null||_378.funcOrStr===_371)){
_374(_378);
if(_375){
_376=true;
}else{
_373.splice(i,1);
}
}
}
self._dirty=_376;
},disconnectAll:function(src,sig){
src=MochiKit.DOM.getElement(src);
var m=MochiKit.Base;
var _37c=m.flattenArguments(m.extend(null,arguments,1));
var self=MochiKit.Signal;
var _37e=self._disconnect;
var _37f=self._observers;
var i,_381;
var _382=self._lock;
var _383=self._dirty;
if(_37c.length===0){
for(i=_37f.length-1;i>=0;i--){
_381=_37f[i];
if(_381.source===src){
_37e(_381);
if(!_382){
_37f.splice(i,1);
}else{
_383=true;
}
}
}
}else{
var sigs={};
for(i=0;i<_37c.length;i++){
sigs[_37c[i]]=true;
}
for(i=_37f.length-1;i>=0;i--){
_381=_37f[i];
if(_381.source===src&&_381.signal in sigs){
_37e(_381);
if(!_382){
_37f.splice(i,1);
}else{
_383=true;
}
}
}
}
self._dirty=_383;
},signal:function(src,sig){
var self=MochiKit.Signal;
var _388=self._observers;
src=MochiKit.DOM.getElement(src);
var args=MochiKit.Base.extend(null,arguments,2);
var _38a=[];
self._lock=true;
for(var i=0;i<_388.length;i++){
var _38c=_388[i];
if(_38c.source===src&&_38c.signal===sig&&_38c.connected){
try{
_38c.listener.apply(src,args);
}
catch(e){
_38a.push(e);
}
}
}
self._lock=false;
if(self._dirty){
self._dirty=false;
for(var i=_388.length-1;i>=0;i--){
if(!_388[i].connected){
_388.splice(i,1);
}
}
}
if(_38a.length==1){
throw _38a[0];
}else{
if(_38a.length>1){
var e=new Error("Multiple errors thrown in handling 'sig', see errors property");
e.errors=_38a;
throw e;
}
}
}});
MochiKit.Signal.EXPORT_OK=[];
MochiKit.Signal.EXPORT=["connect","disconnect","signal","disconnectAll","disconnectAllTo"];
MochiKit.Signal.__new__=function(win){
var m=MochiKit.Base;
this._document=document;
this._window=win;
this._lock=false;
this._dirty=false;
try{
this.connect(window,"onunload",this._unloadCache);
}
catch(e){
}
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
m.nameFunctions(this);
};
MochiKit.Signal.__new__(this);
if(MochiKit.__export__){
connect=MochiKit.Signal.connect;
disconnect=MochiKit.Signal.disconnect;
disconnectAll=MochiKit.Signal.disconnectAll;
signal=MochiKit.Signal.signal;
}
MochiKit.Base._exportSymbols(this,MochiKit.Signal);
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.Async");
dojo.require("MochiKit.Base");
}
if(typeof (JSAN)!="undefined"){
JSAN.use("MochiKit.Base",[]);
}
try{
if(typeof (MochiKit.Base)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Async depends on MochiKit.Base!";
}
if(typeof (MochiKit.Async)=="undefined"){
MochiKit.Async={};
}
MochiKit.Async.NAME="MochiKit.Async";
MochiKit.Async.VERSION="1.4";
MochiKit.Async.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
MochiKit.Async.toString=function(){
return this.__repr__();
};
MochiKit.Async.Deferred=function(_390){
this.chain=[];
this.id=this._nextId();
this.fired=-1;
this.paused=0;
this.results=[null,null];
this.canceller=_390;
this.silentlyCancelled=false;
this.chained=false;
};
MochiKit.Async.Deferred.prototype={repr:function(){
var _391;
if(this.fired==-1){
_391="unfired";
}else{
if(this.fired===0){
_391="success";
}else{
_391="error";
}
}
return "Deferred("+this.id+", "+_391+")";
},toString:MochiKit.Base.forwardCall("repr"),_nextId:MochiKit.Base.counter(),cancel:function(){
var self=MochiKit.Async;
if(this.fired==-1){
if(this.canceller){
this.canceller(this);
}else{
this.silentlyCancelled=true;
}
if(this.fired==-1){
this.errback(new self.CancelledError(this));
}
}else{
if((this.fired===0)&&(this.results[0] instanceof self.Deferred)){
this.results[0].cancel();
}
}
},_resback:function(res){
this.fired=((res instanceof Error)?1:0);
this.results[this.fired]=res;
this._fire();
},_check:function(){
if(this.fired!=-1){
if(!this.silentlyCancelled){
throw new MochiKit.Async.AlreadyCalledError(this);
}
this.silentlyCancelled=false;
return;
}
},callback:function(res){
this._check();
if(res instanceof MochiKit.Async.Deferred){
throw new Error("Deferred instances can only be chained if they are the result of a callback");
}
this._resback(res);
},errback:function(res){
this._check();
var self=MochiKit.Async;
if(res instanceof self.Deferred){
throw new Error("Deferred instances can only be chained if they are the result of a callback");
}
if(!(res instanceof Error)){
res=new self.GenericError(res);
}
this._resback(res);
},addBoth:function(fn){
if(arguments.length>1){
fn=MochiKit.Base.partial.apply(null,arguments);
}
return this.addCallbacks(fn,fn);
},addCallback:function(fn){
if(arguments.length>1){
fn=MochiKit.Base.partial.apply(null,arguments);
}
return this.addCallbacks(fn,null);
},addErrback:function(fn){
if(arguments.length>1){
fn=MochiKit.Base.partial.apply(null,arguments);
}
return this.addCallbacks(null,fn);
},addCallbacks:function(cb,eb){
if(this.chained){
throw new Error("Chained Deferreds can not be re-used");
}
this.chain.push([cb,eb]);
if(this.fired>=0){
this._fire();
}
return this;
},_fire:function(){
var _39c=this.chain;
var _39d=this.fired;
var res=this.results[_39d];
var self=this;
var cb=null;
while(_39c.length>0&&this.paused===0){
var pair=_39c.shift();
var f=pair[_39d];
if(f===null){
continue;
}
try{
res=f(res);
_39d=((res instanceof Error)?1:0);
if(res instanceof MochiKit.Async.Deferred){
cb=function(res){
self._resback(res);
self.paused--;
if((self.paused===0)&&(self.fired>=0)){
self._fire();
}
};
this.paused++;
}
}
catch(err){
_39d=1;
if(!(err instanceof Error)){
err=new MochiKit.Async.GenericError(err);
}
res=err;
}
}
this.fired=_39d;
this.results[_39d]=res;
if(cb&&this.paused){
res.addBoth(cb);
res.chained=true;
}
}};
MochiKit.Base.update(MochiKit.Async,{evalJSONRequest:function(req){
return MochiKit.Base.evalJSON(req.responseText);
},succeed:function(_3a5){
var d=new MochiKit.Async.Deferred();
d.callback.apply(d,arguments);
return d;
},fail:function(_3a7){
var d=new MochiKit.Async.Deferred();
d.errback.apply(d,arguments);
return d;
},getXMLHttpRequest:function(){
var self=arguments.callee;
if(!self.XMLHttpRequest){
var _3aa=[function(){
return new XMLHttpRequest();
},function(){
return new ActiveXObject("Msxml2.XMLHTTP");
},function(){
return new ActiveXObject("Microsoft.XMLHTTP");
},function(){
return new ActiveXObject("Msxml2.XMLHTTP.4.0");
},function(){
throw new MochiKit.Async.BrowserComplianceError("Browser does not support XMLHttpRequest");
}];
for(var i=0;i<_3aa.length;i++){
var func=_3aa[i];
try{
self.XMLHttpRequest=func;
return func();
}
catch(e){
}
}
}
return self.XMLHttpRequest();
},_xhr_onreadystatechange:function(d){
var m=MochiKit.Base;
if(this.readyState==4){
try{
this.onreadystatechange=null;
}
catch(e){
try{
this.onreadystatechange=m.noop;
}
catch(e){
}
}
var _3af=null;
try{
_3af=this.status;
if(!_3af&&m.isNotEmpty(this.responseText)){
_3af=304;
}
}
catch(e){
}
if(_3af==200||_3af==201||_3af==204||_3af==304||_3af==1223){
d.callback(this);
}else{
var err=new MochiKit.Async.XMLHttpRequestError(this,"Request failed");
if(err.number){
d.errback(err);
}else{
d.errback(err);
}
}
}
},_xhr_canceller:function(req){
try{
req.onreadystatechange=null;
}
catch(e){
try{
req.onreadystatechange=MochiKit.Base.noop;
}
catch(e){
}
}
req.abort();
},sendXMLHttpRequest:function(req,_3b3){
if(typeof (_3b3)=="undefined"||_3b3===null){
_3b3="";
}
var m=MochiKit.Base;
var self=MochiKit.Async;
var d=new self.Deferred(m.partial(self._xhr_canceller,req));
try{
req.onreadystatechange=m.bind(self._xhr_onreadystatechange,req,d);
req.send(_3b3);
}
catch(e){
try{
req.onreadystatechange=null;
}
catch(ignore){
}
d.errback(e);
}
return d;
},doXHR:function(url,opts){
var self=MochiKit.Async;
return self.callLater(0,self._doXHR,url,opts);
},_doXHR:function(url,opts){
var m=MochiKit.Base;
opts=m.update({method:"GET",sendContent:""},opts);
var self=MochiKit.Async;
var req=self.getXMLHttpRequest();
if(opts.queryString){
var qs=m.queryString(opts.queryString);
if(qs){
url+="?"+qs;
}
}
if("username" in opts){
req.open(opts.method,url,true,opts.username,opts.password);
}else{
req.open(opts.method,url,true);
}
if(req.overrideMimeType&&opts.mimeType){
req.overrideMimeType(opts.mimeType);
}
if(opts.headers){
var _3c0=opts.headers;
if(!m.isArrayLike(_3c0)){
_3c0=m.items(_3c0);
}
for(var i=0;i<_3c0.length;i++){
var _3c2=_3c0[i];
var name=_3c2[0];
var _3c4=_3c2[1];
req.setRequestHeader(name,_3c4);
}
}
return self.sendXMLHttpRequest(req,opts.sendContent);
},_buildURL:function(url){
if(arguments.length>1){
var m=MochiKit.Base;
var qs=m.queryString.apply(null,m.extend(null,arguments,1));
if(qs){
return url+"?"+qs;
}
}
return url;
},doSimpleXMLHttpRequest:function(url){
var self=MochiKit.Async;
url=self._buildURL.apply(self,arguments);
return self.doXHR(url);
},loadJSONDoc:function(url){
var self=MochiKit.Async;
url=self._buildURL.apply(self,arguments);
var d=self.doXHR(url,{"mimeType":"text/plain","headers":[["Accept","application/json"]]});
d=d.addCallback(self.evalJSONRequest);
return d;
},wait:function(_3cd,_3ce){
var d=new MochiKit.Async.Deferred();
var m=MochiKit.Base;
if(typeof (_3ce)!="undefined"){
d.addCallback(function(){
return _3ce;
});
}
var _3d1=setTimeout(m.bind("callback",d),Math.floor(_3cd*1000));
d.canceller=function(){
try{
clearTimeout(_3d1);
}
catch(e){
}
};
return d;
},callLater:function(_3d2,func){
var m=MochiKit.Base;
var _3d5=m.partial.apply(m,m.extend(null,arguments,1));
return MochiKit.Async.wait(_3d2).addCallback(function(res){
return _3d5();
});
}});
MochiKit.Async.DeferredLock=function(){
this.waiting=[];
this.locked=false;
this.id=this._nextId();
};
MochiKit.Async.DeferredLock.prototype={__class__:MochiKit.Async.DeferredLock,acquire:function(){
var d=new MochiKit.Async.Deferred();
if(this.locked){
this.waiting.push(d);
}else{
this.locked=true;
d.callback(this);
}
return d;
},release:function(){
if(!this.locked){
throw TypeError("Tried to release an unlocked DeferredLock");
}
this.locked=false;
if(this.waiting.length>0){
this.locked=true;
this.waiting.shift().callback(this);
}
},_nextId:MochiKit.Base.counter(),repr:function(){
var _3d8;
if(this.locked){
_3d8="locked, "+this.waiting.length+" waiting";
}else{
_3d8="unlocked";
}
return "DeferredLock("+this.id+", "+_3d8+")";
},toString:MochiKit.Base.forwardCall("repr")};
MochiKit.Async.DeferredList=function(list,_3da,_3db,_3dc,_3dd){
MochiKit.Async.Deferred.apply(this,[_3dd]);
this.list=list;
var _3de=[];
this.resultList=_3de;
this.finishedCount=0;
this.fireOnOneCallback=_3da;
this.fireOnOneErrback=_3db;
this.consumeErrors=_3dc;
var cb=MochiKit.Base.bind(this._cbDeferred,this);
for(var i=0;i<list.length;i++){
var d=list[i];
_3de.push(undefined);
d.addCallback(cb,i,true);
d.addErrback(cb,i,false);
}
if(list.length===0&&!_3da){
this.callback(this.resultList);
}
};
MochiKit.Async.DeferredList.prototype=new MochiKit.Async.Deferred();
MochiKit.Async.DeferredList.prototype._cbDeferred=function(_3e2,_3e3,_3e4){
this.resultList[_3e2]=[_3e3,_3e4];
this.finishedCount+=1;
if(this.fired==-1){
if(_3e3&&this.fireOnOneCallback){
this.callback([_3e2,_3e4]);
}else{
if(!_3e3&&this.fireOnOneErrback){
this.errback(_3e4);
}else{
if(this.finishedCount==this.list.length){
this.callback(this.resultList);
}
}
}
}
if(!_3e3&&this.consumeErrors){
_3e4=null;
}
return _3e4;
};
MochiKit.Async.gatherResults=function(_3e5){
var d=new MochiKit.Async.DeferredList(_3e5,false,true,false);
d.addCallback(function(_3e7){
var ret=[];
for(var i=0;i<_3e7.length;i++){
ret.push(_3e7[i][1]);
}
return ret;
});
return d;
};
MochiKit.Async.maybeDeferred=function(func){
var self=MochiKit.Async;
var _3ec;
try{
var r=func.apply(null,MochiKit.Base.extend([],arguments,1));
if(r instanceof self.Deferred){
_3ec=r;
}else{
if(r instanceof Error){
_3ec=self.fail(r);
}else{
_3ec=self.succeed(r);
}
}
}
catch(e){
_3ec=self.fail(e);
}
return _3ec;
};
MochiKit.Async.EXPORT=["AlreadyCalledError","CancelledError","BrowserComplianceError","GenericError","XMLHttpRequestError","Deferred","succeed","fail","getXMLHttpRequest","doSimpleXMLHttpRequest","loadJSONDoc","wait","callLater","sendXMLHttpRequest","DeferredLock","DeferredList","gatherResults","maybeDeferred","doXHR"];
MochiKit.Async.EXPORT_OK=["evalJSONRequest"];
MochiKit.Async.__new__=function(){
var m=MochiKit.Base;
var ne=m.partial(m._newNamedError,this);
ne("AlreadyCalledError",function(_3f0){
this.deferred=_3f0;
});
ne("CancelledError",function(_3f1){
this.deferred=_3f1;
});
ne("BrowserComplianceError",function(msg){
this.message=msg;
});
ne("GenericError",function(msg){
this.message=msg;
});
ne("XMLHttpRequestError",function(req,msg){
this.req=req;
this.message=msg;
try{
this.number=req.status;
}
catch(e){
}
});
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
m.nameFunctions(this);
};
MochiKit.Async.__new__();
MochiKit.Base._exportSymbols(this,MochiKit.Async);


